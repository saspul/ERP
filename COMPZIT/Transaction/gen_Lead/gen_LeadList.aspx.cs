using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using BL_Compzit;
using CL_Compzit;
using EL_Compzit;
using System.Data;
using System.Text;
using System.Web.Services;
using System.Web.Script.Serialization;
using System.IO;
using PdfSharp;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using PdfSharp.Drawing.Layout;


// CREATED BY:EVM-0001,0003,0005
// CREATED DATE:01/04/2016
// REVIEWED BY:0001
// REVIEW DATE:17/06/2016
public partial class MasterPage_Default : System.Web.UI.Page
{
    private enum Button_type
    {
        Previous = 1,
        Next = 2
    }
    private enum QUOTATION_STATUS
    {
        NotConfirmed = 0,
        Confirmed = 1,
        Return = 2,
        Approved = 3,
        Delivered = 4,
        Re_Opened = 5
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        txtCustomerName.Attributes.Add("onkeypress", "return isTag(event)");
        if (!IsPostBack)
        {
           

            if (Request.QueryString["L_MODE"] != null)
            {
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                string strQueryStringGet = Request.QueryString["L_MODE"].ToString();
                HiddenFieldL_MODE.Value = strQueryStringGet;
                string[] Mode = strQueryStringGet.Split('-');
                string strLeadListMode = Mode[0];
                spanPageHeading.InnerHtml = "<a href=\"gen_LeadList.aspx?L_MODE=" + strQueryStringGet + "\" id=\"a_Caption\" class=\"auto-style1\" style=\"cursor:pointer\">Opportunity</a>";

                if (strLeadListMode == "NEW")
                {
                    hiddenLMode.Value = "NEW";
                    HiddenSearchStatus.Value = "1";
                    pHeader.InnerHtml = "Listing New Opportunity of User";
                }
                else if (strLeadListMode == "APRV")
                {
                    hiddenLMode.Value = "APRV";
                    HiddenSearchStatus.Value = "6";
                    pHeader.InnerHtml = "Listing Approved Opportunity of User";
                }
                else if (strLeadListMode == "DPEND")
                {
                    hiddenLMode.Value = "DPEND";
                    HiddenSearchStatus.Value = "8";
                    pHeader.InnerHtml = "Listing Client Decision Pending Opportunity of User";
                }
                else if (strLeadListMode == "ACTV")
                {
                    DropDownBindLeadStatus("ACTIVE");
                    hiddenLMode.Value = "ACTV";
                    pHeader.InnerHtml = "Listing Active Opportunity of User";
                }
                //strLeadListMode == "TCNVRTD" || strLeadListMode == "TJUNK" || strLeadListMode == "TONOLD"
                else if (strLeadListMode == "TCNVRTD")
                {
                    hiddenLMode.Value = "TCNVRTD";
                    HiddenSearchStatus.Value = "9";
                    pHeader.InnerHtml = "Listing Total Converted Opportunity of User";
                }
                else if (strLeadListMode == "TJUNK")
                {
                    hiddenLMode.Value = "TJUNK";
                    HiddenSearchStatus.Value = "10";
                    pHeader.InnerHtml = "Listing Total Junk Opportunity of User";
                }
                else if (strLeadListMode == "TONOLD")
                {
                    hiddenLMode.Value = "TONOLD";
                    HiddenSearchStatus.Value = "11";
                    pHeader.InnerHtml = "Listing Total Opportunity of User";
                }
               else if (strLeadListMode == "MCNVRTD")
                {
                    hiddenLMode.Value = "MCNVRTD";
                    HiddenSearchStatus.Value = "9";
                    pHeader.InnerHtml = "Listing Monthly Converted Opportunity of User";
                }
                else if (strLeadListMode == "MJUNK")
                {
                    hiddenLMode.Value = "MJUNK";
                    HiddenSearchStatus.Value = "10";
                    pHeader.InnerHtml = "Listing Monthly Junk Opportunity of User";
                }
                else if (strLeadListMode == "MOPEND")
                {
                    hiddenLMode.Value = "MOPEND";
                    //2
                    HiddenSearchStatus.Value = "12";
                    pHeader.InnerHtml = "Listing Monthly Opened Opportunity of User";
                }

                    //start 0005
                else if (strLeadListMode == "APRV_PNDNG")
                {
                    hiddenLMode.Value = "APRV_PNDNG";
                    HiddenSearchStatus.Value = "4";
                    HiddenTeamId.Value = Mode[1];
                    string strTeamId = "0";
                    if (HiddenTeamId.Value != "")
                    {
                        string strRandomMixedId = HiddenTeamId.Value;
                        string strLenghtofId = strRandomMixedId.Substring(0, 2);
                        int intLenghtofId = Convert.ToInt16(strLenghtofId);
                        strTeamId = strRandomMixedId.Substring(2, intLenghtofId);
                    }
                    clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
                    objEntityLead.Team = Convert.ToInt32(strTeamId);
                    DataTable dtTeamName = new DataTable();
                    dtTeamName = objBusinessLayer.ReadTeamById(objEntityLead);
                    if (dtTeamName.Rows.Count > 0)
                    {
                        pHeader.InnerHtml = "Approval Pending Opportunity List Of Team : " + dtTeamName.Rows[0]["TEAM_NAME"].ToString();
                    }
                }
            }
           
            else
            {
                spanPageHeading.InnerHtml = "<a href=\"gen_LeadList.aspx\" id=\"a_Caption\" class=\"auto-style1\" style=\"cursor:pointer\">Opportunity</a>";
                DropDownBindLeadStatus("ALL");
                hiddenLMode.Value = "";
            }


            PageLoad();
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            DataTable dtTaskSubjctList = objBusinessLeadIndvl.Read_TaskSubject();
            divOptionsTaskSubject.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtTaskSubjctList);
            DataTable dtSourceList = objBusinessLeadIndvl.Read_LeadSource();
            divOptionsLeadSource.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtSourceList);
            //for Loss Reason drop down in loss Reason ddl
            DataTable dtLossReasonList = objBusinessLeadIndvl.Read_LoseRsn();
            divOptionsLossReason.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtLossReasonList);
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"].ToString());
                hiddenCorporateId.Value = Session["CORPOFFICEID"].ToString();
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                hiddenOrganisationId.Value = Session["ORGID"].ToString();
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
            DataTable dtReopenRsnMstr = objBusinessLayerQuotation.ReadReopenReasonMstr(objEntityQuotation);
            divOptionsReopenReason.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtReopenRsnMstr);
            LoadTaskTimeDropDowns();
            clsBusinessLayer objBusiness = new clsBusinessLayer();
            string strCurrentDate = objBusiness.LoadCurrentDateInString();
            hiddenCurrentDate.Value = strCurrentDate;
            clsCommonLibrary objCommon = new clsCommonLibrary();
            if (Request.QueryString["InsUpd"] != null)
            {
                string strInsUpd = Request.QueryString["InsUpd"].ToString();
                if (strInsUpd == "Save")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessSave", "SuccessSave();", true);
                }
                else if (strInsUpd == "Upd")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessUpdation", "SuccessUpdation();", true);
                }
                else if (strInsUpd == "Cnfrm")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessConfirmation", "SuccessConfirmation();", true);
                }
                else if (strInsUpd == "CnfrmNM")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessConfirmationNM", "SuccessConfirmationNM();", true);
                }
                else if (strInsUpd == "Aprv")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessApprove", "SuccessApprove();", true);
                }
                else if (strInsUpd == "Rtrn")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessReturn", "SuccessReturn();", true);
                }
                else if (strInsUpd == "ReOpn")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessReOpen", "SuccessReOpen();", true);
                }
                else if (strInsUpd == "Dlvr")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessDelivery", "SuccessDelivery();", true);
                }
                else if (strInsUpd == "AprvNM")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessApproveNM", "SuccessApproveNM();", true);
                }
                else if (strInsUpd == "AprvDlvr")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessApproveDeliver", "SuccessApproveDeliver();", true);
                }
                else if (strInsUpd == "Mail")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessReMail", "SuccessReMail();", true);
                }
                else if (strInsUpd == "MailNS")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessReMail", "UnSuccessReMail();", true);
                }

                else if (strInsUpd == "SaveFnl")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SaveFinal", "SaveFinal();", true);
                }

                else if (strInsUpd == "StsChange")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessStatusChange", "SuccessStatusChange();", true);
                }
                else if (strInsUpd == "InsTask")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessInsertionTask", "SuccessInsertionTask();", true);
                }
                else if (strInsUpd == "UpdTask")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessUpdationTask", "SuccessUpdationTask();", true);
                }
                else if (strInsUpd == "StsTask")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessUpdationTaskSts", "SuccessUpdationTaskSts();", true);
                }
                else if (strInsUpd == "InsLoss")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessLoss", "SuccessLoss('" + objCommon.GetMsg(clsCommonLibrary.MSG_SECTION.LEAD_LOST) + "');", true);
                }          
                else if (strInsUpd == "InsWin")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessWin", "SuccessWin('" + objCommon.GetMsg(clsCommonLibrary.MSG_SECTION.LEAD_WON) + "');", true);
                }             
                else if (strInsUpd == "ClsTask")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessCancelationTask", "SuccessCancelationTask();", true);
                }
                else if (strInsUpd == "InsFollowUp")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessInsertionFollowUp", "SuccessInsertionFollowUp();", true);
                }
                else if (strInsUpd == "InsMailR")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "RejectedMail", "RejectedMail();", true);
                }
                else if (strInsUpd == "UpdMailS")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "UpdateSuccessMail", "UpdateSuccessMail();", true);
                }
                else if (strInsUpd == "UpdMailU")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "UpdateUnSuccessMail", "UpdateUnSuccessMail();", true);
                }
                else if (strInsUpd == "UpdMailU")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "UpdateUnSuccessMail", "UpdateUnSuccessMail();", true);
                }
                else if (strInsUpd == "InsList")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessInsertionList", "SuccessInsertionList();", true);
                }
                else if (strInsUpd == "UpdList")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessUpdationList", "SuccessUpdationList();", true);
                }
            }
        }
    }

    //Assign City details from city table to dropdownlist.
    public void DropDownBindLeadStatus(string strType)
    {
        ddlLeadSts.Items.Clear();
        clsBusinessLayerLeadCreation objBusinessLayerLead = new clsBusinessLayerLeadCreation();
        DataTable dtStatusDetails = new DataTable();
        dtStatusDetails = objBusinessLayerLead.ReadLeadStatus(strType);

        ddlLeadSts.DataSource = dtStatusDetails;
        ddlLeadSts.DataTextField = "LDSTS_NAME";
        ddlLeadSts.DataValueField = "LDSTS_ID";
        ddlLeadSts.DataBind();
        if (strType == "ACTIVE")
        {
            ddlLeadSts.Items.Insert(0, "ALL ACTIVE STATUS");
        }
        else if (strType == "ALL")
        {
            ddlLeadSts.Items.Insert(0, "ALL STATUS");
        }
    }
    //It build the Html table by using the datatable provided
    public static string ConvertDataTableToHTML(DataTable dt, int intEnableModify,string L_MODE,string USERID)
    {
       
            int intUserId = 0, intUsrRolMstrId, intEnableConfirm = 0, intEnableApprove = 0, intEnableReOpen = 0, intEnableReturn = 0;
            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            if (USERID != null && USERID!="")
            {
                intUserId = Convert.ToInt32(USERID);
            }
            //Allocating child roles
            intUsrRolMstrId = Convert.ToInt32(clsCommonLibrary.USR_ROLE_MSTR.Quotation);
            DataTable dtChildRol = objBusinessLayer.LoadChildRoleDefnDetail(intUserId, intUsrRolMstrId);
            if (dtChildRol.Rows.Count > 0)
            {
                string strChildRolDeftn = dtChildRol.Rows[0]["USRROL_CHLDRL_DEFN"].ToString();
                string[] strChildDefArrWords = strChildRolDeftn.Split('-');
                foreach (string strC_Role in strChildDefArrWords)
                {

                    if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Modify).ToString())
                    {
                        intEnableModify = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Confirm).ToString())
                    {
                        intEnableConfirm = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Approve).ToString())
                    {
                        intEnableApprove = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Re_Open).ToString())
                    {
                        intEnableReOpen = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Return).ToString())
                    {
                        intEnableReturn = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                }
            }
               
        string strRandom = objCommon.Random_Number();
        StringBuilder sb = new StringBuilder(); 
        if (dt.Rows.Count > 0)
        {
        for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
        {

            Int32 intLeadId = Convert.ToInt32( dt.Rows[intRowBodyCount]["LEADS_ID"].ToString());
                     
                    
                        sb.Append("<tr  >");
                        string strId = dt.Rows[intRowBodyCount][0].ToString();
                        int intIdLength = dt.Rows[intRowBodyCount][0].ToString().Length;
                        string stridLength = intIdLength.ToString("00");
                        string Id = stridLength + strId + strRandom;





                        if (dt.Rows[intRowBodyCount]["STATUS_ID"].ToString() == "10")
                           sb.Append("<td class=\"tr_l\"  style=\"word-wrap:break-word;word-break: break-all;\"><div class=\"bo_not3 mrl_bon flt_l\" title=\"Loss\"> <i class=\"fa fa-square\"></i></div>" + dt.Rows[intRowBodyCount][2].ToString() + "</td>");
                        else if (dt.Rows[intRowBodyCount]["STATUS_ID"].ToString() == "16")              
                           sb.Append("<td class=\"tr_l\"  style=\"word-wrap:break-word;word-break: break-all;\"><div class=\"bo_not2 mrl_bon flt_l\" title=\"Partially Win\"><i class=\"fa fa-square\"></i></div>" + dt.Rows[intRowBodyCount][2].ToString() + "</td>");
                        else if (dt.Rows[intRowBodyCount]["STATUS_ID"].ToString() == "9")
                           sb.Append("<td class=\"tr_l\"  style=\"word-wrap:break-word;word-break: break-all;\"><div class=\"bo_not1 mrl_bon flt_l\" title=\"Win\"> <i class=\"fa fa-square\"></i> </div>" + dt.Rows[intRowBodyCount][2].ToString() + "</td>");
                        else
                           sb.Append("<td class=\"tr_l\"  style=\"word-wrap:break-word;word-break: break-all;\">" + dt.Rows[intRowBodyCount][2].ToString() + "</td>");
               



                         sb.Append("<td style=\"word-wrap:break-word;word-break: break-all;\">" + dt.Rows[intRowBodyCount][3].ToString() + "</td>");

                         sb.Append("<td class=\"tr_l\" style=\"word-break: break-all; word-wrap:break-word;\"  >" + dt.Rows[intRowBodyCount][4].ToString() + "</td>");

                         sb.Append("<td class=\"tr_l\" style=\"word-break: break-all; word-wrap:break-word;\"  >" + dt.Rows[intRowBodyCount][5].ToString() + "</td>");

                         if(dt.Rows[intRowBodyCount][6].ToString()=="Fax")
                             sb.Append("<td class=\"tr_l\" style=\"word-break: break-all; word-wrap:break-word;\"  ><i class=\"i_cm\"><img src=\"/Images/opp/fax_b.png\"></i>" + dt.Rows[intRowBodyCount][6].ToString() + "</td>");
                         else if (dt.Rows[intRowBodyCount][6].ToString() == "Mail")
                             sb.Append("<td class=\"tr_l\" style=\"word-break: break-all; word-wrap:break-word;\"  ><i class=\"i_cm\"><img src=\"/Images/opp/mail_b.png\"></i>" + dt.Rows[intRowBodyCount][6].ToString() + "</td>");
                         else if (dt.Rows[intRowBodyCount][6].ToString() == "Other")
                             sb.Append("<td class=\"tr_l\" style=\"word-break: break-all; word-wrap:break-word;\"  ><i class=\"i_cm\"><img src=\"/Images/opp/oth_b.png\"></i>" + dt.Rows[intRowBodyCount][6].ToString() + "</td>");
                         else if (dt.Rows[intRowBodyCount][6].ToString() == "Phone")
                             sb.Append("<td class=\"tr_l\" style=\"word-break: break-all; word-wrap:break-word;\"  ><i class=\"i_cm\"><img src=\"/Images/opp/phone_b.png\"></i>" + dt.Rows[intRowBodyCount][6].ToString() + "</td>");
                         else if (dt.Rows[intRowBodyCount][6].ToString() == "Reference")            
            sb.Append("<td class=\"tr_l\" style=\"word-break: break-all; word-wrap:break-word;\"  ><i class=\"i_cm\"><img src=\"/Images/opp/ref_b.png\"></i>" + dt.Rows[intRowBodyCount][6].ToString() + "</td>");
                           


                                if (Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Prepared) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_ReOpened) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Returned) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) ||
                                  Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
                       
                                {
                                    intUserId = 0;
                                    if (USERID != null && USERID!="")
                                    {
                                        intUserId = Convert.ToInt32(USERID);

                                    }
                                   
                                    //Allocating child roles
                                    intUsrRolMstrId = Convert.ToInt32(clsCommonLibrary.USR_ROLE_MSTR.Quotation);
                                    dtChildRol = objBusinessLayer.LoadChildRoleDefnDetail(intUserId, intUsrRolMstrId);
                                    if (dtChildRol.Rows.Count > 0)
                                    {//for template
                                        int intQtnTmpltId = 0;
                                        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                                        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();                                       
                                            objEntityQuotation.Lead_Id = intLeadId;
                                    
                                        DataTable dtQtnTemplt = new DataTable();
                                        dtQtnTemplt = objBusinessLayerQuotation.ReadLeadDtlForDisplay(objEntityQuotation);
                                        if (dtQtnTemplt.Rows.Count > 0)
                                        {
                                            if (dtQtnTemplt.Rows[0]["QTN_TMPLT_ID"].ToString() != "")
                                            {
                                                intQtnTmpltId = Convert.ToInt32(dtQtnTemplt.Rows[0]["QTN_TMPLT_ID"].ToString());
                                            }
                                        }
                                        if (L_MODE == null || L_MODE=="")
                                        {
                                            if (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard))
                                            {
                                                sb.Append("<td  style=\"word-break: break-all; word-wrap:break-word;\" >" + dt.Rows[intRowBodyCount][7].ToString() + "</td>");
                                            }
                                            else if ((intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project)) || (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender)))
                                            {
                                                sb.Append("<td  style=\"word-break: break-all; word-wrap:break-word;\"  >" + dt.Rows[intRowBodyCount][7].ToString() + "</td>");
                                            }
                                            else
                                            {
                                                sb.Append("<td style=\"word-break: break-all; word-wrap:break-word;;\"  > " + dt.Rows[intRowBodyCount][7].ToString() + "</td>");
                                            }
                                        }
                                        else
                                        {
                                            string strL_MODE = L_MODE;
                                            if (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard))
                                            {
                                                sb.Append("<td style=\"word-break: break-all; word-wrap:break-word;\"  >" + dt.Rows[intRowBodyCount][7].ToString() + "</td>");
                                            }
                                            else if ((intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project)) || (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender)))
                                            {
                                                sb.Append("<td  style=\"word-break: break-all; word-wrap:break-word;\"  >" + dt.Rows[intRowBodyCount][7].ToString() + "</td>");
                                            }
                                            else
                                            {
                                                sb.Append("<td  style=\"word-break: break-all; word-wrap:break-word;\"  >" + dt.Rows[intRowBodyCount][7].ToString() + "</td>");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sb.Append("<td style=\"word-break: break-all; word-wrap:break-word;\"  >" + dt.Rows[intRowBodyCount][7].ToString() + "</td>");
                                    }
                                }
                                else
                                {
                                    sb.Append("<td  style=\"word-break: break-all; word-wrap:break-word;\"  >" + dt.Rows[intRowBodyCount][7].ToString() + "</td>");
                                }






                                sb.Append("<td  style=\"word-break: break-all; word-wrap:break-word;\"  >" + dt.Rows[intRowBodyCount][11].ToString() + "</td>");





                                if (L_MODE != null && L_MODE != "")
                                {
                                    string strL_MODE = L_MODE;
                                    sb.Append("<td style=\"word-break: break-all; word-wrap:break-word;\" >" + dt.Rows[intRowBodyCount][1].ToString() + "</td>");
                                }
                                else
                                {
                                    sb.Append("<td  style=\"word-break: break-all; word-wrap:break-word;\" >" + dt.Rows[intRowBodyCount][1].ToString() + "</td>");
                                }
                    
         

            sb.Append("<td>");
                sb.Append("<div class=\"btn_stl1 opp_icoz\">");


                if (intEnableModify == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    int intUser = 0;
                    if (USERID != null && USERID != "")
                    {
                        intUser = Convert.ToInt32(USERID);
                    }
                    if (intUser == Convert.ToInt32(dt.Rows[intRowBodyCount]["USER"]))
                    {
                        if (Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss) ||
                                Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered))
                        {
                            if (L_MODE == null || L_MODE == "")
                            {

                                sb.Append("<button class=\"btn act_btn bn4 bt_v\" onclick='return getdetails(\"gen_Lead.aspx?Id=" + Id + "\");' title=\"View\">");
                                sb.Append("<i class=\"fa fa-edit\"></i>");
                                sb.Append(" </button>");
                               
                            }
                            else
                            {
                                string strL_MODE = L_MODE;
                                sb.Append("<button class=\"btn act_btn bn4 bt_v\" onclick='return getdetails(\"gen_Lead.aspx?Id=" + Id + "&L_MODE=" + strL_MODE + "\");' title=\"View\">");
                                sb.Append("<i class=\"fa fa-edit\"></i>");
                                sb.Append(" </button>");
                            }
                        }
                        else
                        {
                            if (L_MODE == null || L_MODE == "")
                            {
                               
                                sb.Append("<button class=\"btn act_btn bn1 bt_e\" onclick='return getdetails(\"gen_Lead.aspx?Id=" + Id + "\");' title=\"Edit\">");
                                sb.Append("<i class=\"fa fa-edit\"></i>");
                                sb.Append(" </button>");
                            }
                            else
                            {
                                string strL_MODE = L_MODE;
                               
                                sb.Append("<button class=\"btn act_btn bn1 bt_e\" onclick='return getdetails(\"gen_Lead.aspx?Id=" + Id + "&L_MODE=" + strL_MODE + "\");' title=\"Edit\">");
                                sb.Append("<i class=\"fa fa-edit\"></i>");
                                sb.Append(" </button>");
                            }
                        }
                    }
                }

                 
                  //sb.Append("<button class=\"btn act_btn bn3\" data-toggle=\"modal\" data-target=\"#exampleModal\" title=\"Delete\">");
                  // sb.Append(" <i class=\"fa fa-trash\"></i>");
                  //sb.Append("</button>");


                if (L_MODE != null && L_MODE!="")
                {
                    string strL_MODE = L_MODE;

                    sb.Append("<button class=\"btn act_btn bn8 bt_e\" type=\"button\" onclick='return getdetails(\"gen_LeadIndividualList.aspx?Id=" + Id + "&L_MODE=" + strL_MODE + "\");' title=\"Opportunity Information\">");
                    sb.Append(" <i class=\"fa fa-external-link\"></i>");
                    sb.Append("</button>");

                }
                else
                {
                    sb.Append("<button class=\"btn act_btn bn8 bt_e\" type=\"button\" onclick='return getdetails(\"gen_LeadIndividualList.aspx?Id=" + Id + "\");' title=\"Opportunity Information\">");
                    sb.Append(" <i class=\"fa fa-external-link\"></i>");
                    sb.Append("</button>");

                }




                
                  if (Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Prepared) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_ReOpened) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Returned) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) ||
                        Convert.ToInt32(dt.Rows[intRowBodyCount]["STATUS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
                  {
                      intUserId = 0;
                      if (USERID != null && USERID!="")
                      {
                          intUserId = Convert.ToInt32(USERID);

                      }
                     
                      //Allocating child roles
                      intUsrRolMstrId = Convert.ToInt32(clsCommonLibrary.USR_ROLE_MSTR.Quotation);
                      dtChildRol = objBusinessLayer.LoadChildRoleDefnDetail(intUserId, intUsrRolMstrId);
                      if (dtChildRol.Rows.Count > 0)
                      {//for template
                          int intQtnTmpltId = 0;
                          clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                          clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                          objEntityQuotation.Lead_Id = intLeadId;

                          DataTable dtQtnTemplt = new DataTable();
                          dtQtnTemplt = objBusinessLayerQuotation.ReadLeadDtlForDisplay(objEntityQuotation);
                          if (dtQtnTemplt.Rows.Count > 0)
                          {
                              if (dtQtnTemplt.Rows[0]["QTN_TMPLT_ID"].ToString() != "")
                              {
                                  intQtnTmpltId = Convert.ToInt32(dtQtnTemplt.Rows[0]["QTN_TMPLT_ID"].ToString());
                              }
                          }
                          if (L_MODE == null || L_MODE=="")
                          {
                              if (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard))
                              {

                                  sb.Append("<span class=\"dropdown dd_spl1\">");
                                  sb.Append("<button class=\"btn act_btn bn7 bt_e dropdown-toggle\" onclick='return getdetails(\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + Id + "&Prev=List\");'  title=\"Quotation\">");
                                  sb.Append("<i class=\"fa fa-file-text-o\"></i>");
                                  sb.Append("</button>");
                                  sb.Append("</span>");

                              }
                              else if ((intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project)) || (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender)))
                              {
                                  sb.Append("<span class=\"dropdown dd_spl1\">");
                                  sb.Append("<button class=\"btn act_btn bn7 bt_e dropdown-toggle\" onclick='return getdetails(\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=List&QTN_TMPLT=" + intQtnTmpltId +"\");'  title=\"Quotation\">");
                                  sb.Append("<i class=\"fa fa-file-text-o\"></i>");
                                  sb.Append("</button>");
                                  sb.Append("</span>");                            
                              }
                              else
                              {
                                  sb.Append("<span class=\"dropdown dd_spl1\">");
                                  sb.Append("<button class=\"btn act_btn bn7 bt_e dropdown-toggle\" onclick='return getdetails(\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + Id + "&Prev=List\");'  title=\"Quotation\">");
                                  sb.Append("<i class=\"fa fa-file-text-o\"></i>");
                                  sb.Append("</button>");
                                  sb.Append("</span>");
                              }
                          }
                          else
                          {
                              string strL_MODE = L_MODE;
                              if (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard))
                              {
                                  sb.Append("<span class=\"dropdown dd_spl1\">");
                                  sb.Append("<button class=\"btn act_btn bn7 bt_e dropdown-toggle\" onclick='return getdetails(\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + Id + "&Prev=List&L_MODE=" + strL_MODE +"\");'  title=\"Quotation\">");
                                  sb.Append("<i class=\"fa fa-file-text-o\"></i>");
                                  sb.Append("</button>");
                                  sb.Append("</span>");

                              }
                              else if ((intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project)) || (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender)))
                              {

                                  sb.Append("<span class=\"dropdown dd_spl1\">");
                                  sb.Append("<button class=\"btn act_btn bn7 bt_e dropdown-toggle\" onclick='return getdetails(\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=List&L_MODE=" + strL_MODE + "&QTN_TMPLT=" + intQtnTmpltId +"\");'  title=\"Quotation\">");
                                  sb.Append("<i class=\"fa fa-file-text-o\"></i>");
                                  sb.Append("</button>");
                                  sb.Append("</span>");
                              }
                              else
                              {
                                  sb.Append("<span class=\"dropdown dd_spl1\">");
                                  sb.Append("<button class=\"btn act_btn bn7 bt_e dropdown-toggle\" onclick='return getdetails(\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + Id + "&Prev=List&L_MODE=" + strL_MODE + "\");'  title=\"Quotation\">");
                                  sb.Append("<i class=\"fa fa-file-text-o\"></i>");
                                  sb.Append("</button>");
                                  sb.Append("</span>");
                              }
                          }
                      }
                      else
                      {
                          sb.Append("<span class=\"dropdown dd_spl1\">");
                          sb.Append("<button class=\"btn act_btn bn7 bt_e dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" title=\"Quotation\">");
                          sb.Append("<i class=\"fa fa-file-text-o\"></i>");
                          sb.Append("</button>");
                          sb.Append("<ul class=\"dropdown-menu drop_dn spn_drp_tbl\" role=\"dialog\" aria-haspopup=\"true\" aria-expanded=\"false\">");
                          if (L_MODE != null && L_MODE!="")
                          {
                              string strL_MODE = L_MODE;

                              sb.Append("<li class=\"li1_cz\">");
                              sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + Id + "&Prev=Indvl&L_MODE=" + strL_MODE + "\" title=\"Standerd Template\" class=\"t1_a\">");
                              sb.Append(" <i class=\"fa fa-list-alt\"></i> Standerd Template");
                              sb.Append("</a>");
                              sb.Append("</li>");
                           

                             sb.Append("<li>");
                             sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=Indvl&L_MODE=" + strL_MODE + "&QTN_TMPLT=2\" title=\"Project Template\" class=\"t1_d_grn\">");
                             sb.Append("<i class=\"fa fa-list-alt\"></i> Project Template");
                             sb.Append("</a>");
                             sb.Append(" </li>");
                           


                             sb.Append("<li>");
                             sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=Indvl&L_MODE=" + strL_MODE + "&QTN_TMPLT=3\" title=\"Tender Template\" class=\"t1_c_vio\">");
                             sb.Append("<i class=\"fa fa-list-alt\"></i> Tender Template");
                             sb.Append("</a>");
                             sb.Append(" </li>");

                                                          
                          }
                          else
                          {

                              sb.Append("<li class=\"li1_cz\">");
                              sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + Id + "&Prev=Indvl\" title=\"Standerd Template\" class=\"t1_a\">");
                              sb.Append(" <i class=\"fa fa-list-alt\"></i> Standerd Template");
                              sb.Append("</a>");
                              sb.Append("</li>");


                              sb.Append("<li>");
                              sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=Indvl&QTN_TMPLT=2\" title=\"Project Template\" class=\"t1_d_grn\">");
                              sb.Append("<i class=\"fa fa-list-alt\"></i> Project Template");
                              sb.Append("</a>");
                              sb.Append(" </li>");



                              sb.Append("<li>");
                              sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=Indvl&QTN_TMPLT=3\" title=\"Tender Template\" class=\"t1_c_vio\">");
                              sb.Append("<i class=\"fa fa-list-alt\"></i> Tender Template");
                              sb.Append("</a>");
                              sb.Append(" </li>");

                          }
                      
                          sb.Append(" </ul>");
                          sb.Append("</span>");
                      }
                  }
                  else
                  {
                      sb.Append("<span class=\"dropdown dd_spl1\">");
                      sb.Append("<button class=\"btn act_btn bn7 bt_e dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" title=\"Quotation\">");
                      sb.Append("<i class=\"fa fa-file-text-o\"></i>");
                      sb.Append("</button>");
                      sb.Append("<ul class=\"dropdown-menu drop_dn spn_drp_tbl\" role=\"dialog\" aria-haspopup=\"true\" aria-expanded=\"false\">");
                      if (L_MODE != null && L_MODE != "")
                      {
                          string strL_MODE = L_MODE;

                          sb.Append("<li class=\"li1_cz\">");
                          sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + Id + "&Prev=Indvl&L_MODE=" + strL_MODE + "\" title=\"Standerd Template\" class=\"t1_a\">");
                          sb.Append(" <i class=\"fa fa-list-alt\"></i> Standerd Template");
                          sb.Append("</a>");
                          sb.Append("</li>");


                          sb.Append("<li>");
                          sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=Indvl&L_MODE=" + strL_MODE + "&QTN_TMPLT=2\" title=\"Project Template\" class=\"t1_d_grn\">");
                          sb.Append("<i class=\"fa fa-list-alt\"></i> Project Template");
                          sb.Append("</a>");
                          sb.Append(" </li>");



                          sb.Append("<li>");
                          sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=Indvl&L_MODE=" + strL_MODE + "&QTN_TMPLT=3\" title=\"Tender Template\" class=\"t1_c_vio\">");
                          sb.Append("<i class=\"fa fa-list-alt\"></i> Tender Template");
                          sb.Append("</a>");
                          sb.Append(" </li>");


                      }
                      else
                      {

                          sb.Append("<li class=\"li1_cz\">");
                          sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + Id + "&Prev=Indvl\" title=\"Standerd Template\" class=\"t1_a\">");
                          sb.Append(" <i class=\"fa fa-list-alt\"></i> Standerd Template");
                          sb.Append("</a>");
                          sb.Append("</li>");


                          sb.Append("<li>");
                          sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=Indvl&QTN_TMPLT=2\" title=\"Project Template\" class=\"t1_d_grn\">");
                          sb.Append("<i class=\"fa fa-list-alt\"></i> Project Template");
                          sb.Append("</a>");
                          sb.Append(" </li>");



                          sb.Append("<li>");
                          sb.Append("<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&Prev=Indvl&QTN_TMPLT=3\" title=\"Tender Template\" class=\"t1_c_vio\">");
                          sb.Append("<i class=\"fa fa-list-alt\"></i> Tender Template");
                          sb.Append("</a>");
                          sb.Append(" </li>");

                      }

                      sb.Append(" </ul>");
                      sb.Append("</span>");

                  }
        Boolean btnConfirm = true, btnReOpen = true, BtnQuatnSts = true, btnDelivered = true;
        clsBusinessLayerQuotation objBusinessLayerQuotation1 = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation1 = new clsEntityLayerQuotation();    
        objEntityQuotation1.Lead_Id = intLeadId;
        DataTable dtLead = new DataTable();
        dtLead = objBusinessLayerQuotation1.ReadLeadDtlForDisplay(objEntityQuotation1);
        int intLeadStatus = 0;
        // for RE-OPEN PROVISION TO BE ALLOCATED FOR TEAM HEAD
        int intTeamHeadId = 0;
        string HiddenFieldTeamLeadId ="";
        string hiddenDivisionCode = "";
        string hiddenUserCode = "";
        string hiddenQtnRevisionVersn = "";
        string hiddenQuotationId = "";
        string hiddenQtnRefSerialId ="" ;
        string hiddenQuotationStatus = "";
        string hiddenLeadActiveUser = "";
        if (dtLead.Rows.Count > 0)
        {
            intLeadStatus = Convert.ToInt32(dtLead.Rows[0]["LDSTS_ID"].ToString());
            intTeamHeadId = Convert.ToInt32(dtLead.Rows[0]["TEAM_LEAD_EMP_ID"].ToString());
             HiddenFieldTeamLeadId = dtLead.Rows[0]["TEAM_LEAD_EMP_ID"].ToString();
             hiddenDivisionCode = dtLead.Rows[0]["CPRDIV_CODE"].ToString();
             hiddenUserCode = dtLead.Rows[0]["USR_CODE"].ToString();
             hiddenQtnRevisionVersn = dtLead.Rows[0]["LDQUOT_RVSN"].ToString();
             hiddenQuotationId = dtLead.Rows[0]["LDQUOT_ID"].ToString();
             hiddenQtnRefSerialId = dtLead.Rows[0]["LDQUOT_REF_SLN_ID"].ToString();
             hiddenQuotationStatus = dtLead.Rows[0]["LDQUOT_STS"].ToString();
             hiddenLeadActiveUser = dtLead.Rows[0]["LEADS_ACTIVE_USR_ID"].ToString(); 
            if (hiddenQuotationId != "")
            {
                objEntityQuotation1.QuotationId = Convert.ToInt32(hiddenQuotationId);
            }
            else
            {
                objEntityQuotation1.QuotationId = 0;
                btnConfirm = false;
                btnReOpen = false;
                BtnQuatnSts = false;
                btnDelivered = false;
            }           
        }
        if (hiddenLeadActiveUser != USERID && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending))
        {                     
            btnConfirm = false;
            if (intTeamHeadId.ToString() != USERID)
            {              
                btnReOpen = false;
                BtnQuatnSts = false;
            }
            else
            {
                if (intLeadStatus == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss) || intLeadStatus == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success))
                {
                    btnReOpen = false;
                    BtnQuatnSts = false;
                }
                int intQtnStatus = 0;
                if (hiddenQuotationStatus != "")
                {
                    intQtnStatus = Convert.ToInt32(hiddenQuotationStatus);
                    if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.NotConfirmed))
                    {                                            
                        btnReOpen = false;
                        BtnQuatnSts = false;
                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Return))
                    {
                        btnReOpen = false;
                        BtnQuatnSts = false;
                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Re_Opened))
                    {                  
                        btnReOpen = false;
                        BtnQuatnSts = false;
                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Confirmed) && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.InActive)))
                    {
                        btnReOpen = false;
                        BtnQuatnSts = false;
                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Confirmed) && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.Active)))
                    {
                        btnReOpen = false;
                        BtnQuatnSts = false;
                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Approved))
                    {
                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Delivered))
                    {

                    }
                    else
                    {
                        btnReOpen = false;
                        BtnQuatnSts = false;
                    }
                }
                else
                {
                    btnReOpen = false;
                    BtnQuatnSts = false;
                }
            }
            btnDelivered = false;           
        }
        else
        {           
            if (intLeadStatus == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss) || intLeadStatus == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success))
            { 
                btnConfirm = false;
                btnReOpen = false;
                btnDelivered = false;
                BtnQuatnSts = false;
            }
            else
            {
                //this mean no quotation has been done against lead 
                if (hiddenQuotationId == "")
                {                 
                    btnConfirm = false;
                    btnReOpen = false;
                    btnDelivered = false;
                    BtnQuatnSts = false;
                }
                // quotation has been added so no new quotation can be added ONLY EDITING POSSIBLE
                else
                {
                   
                    int intQtnStatus = 0;
                    int intQtnId = Convert.ToInt32(hiddenQuotationId);
                    if (hiddenQuotationStatus != "")
                    {
                        intQtnStatus = Convert.ToInt32(hiddenQuotationStatus);
                        if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.NotConfirmed))
                        {                                                      
                            btnReOpen = false;
                            btnDelivered = false;
                            BtnQuatnSts = false;
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Return))
                        {                           
                            btnReOpen = false;
                            btnDelivered = false;
                            BtnQuatnSts = false;
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Re_Opened))
                        {                          
                            btnReOpen = false;
                            btnDelivered = false;
                            BtnQuatnSts = false;
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Confirmed) && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.InActive)))
                        {
                           
                            btnReOpen = false;
                            BtnQuatnSts = false;
                            btnConfirm = false;
                            btnDelivered = false;                       
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Confirmed) && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.Active)))
                        {
                           
                            btnReOpen = false;
                            BtnQuatnSts = false;
                            btnConfirm = false;
                            btnDelivered = false;
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Approved))
                        {
                            btnConfirm = false;
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Delivered))
                        {
                            btnConfirm = false;                         
                            btnDelivered = false;
                        }
                        else
                        {
                          
                            btnConfirm = false;                           
                            btnReOpen = false;
                            BtnQuatnSts = false;
                            btnDelivered = false;                           
                        }
                    }
                }
            }
        }



                  if (intEnableConfirm == Convert.ToInt32(clsCommonLibrary.StatusAll.Active) && btnConfirm==true)
                  {
                      sb.Append("<button class=\"btn act_btn bn2 bt_e\" type=\"button\" onclick=\"return ChangeStsQuot('1','" + Id + "');\" title=\"Confirm Quotation\">");
                      sb.Append("<i class=\"fa fa-check\"></i>");
                      sb.Append("</button>");
                  }
                  else
                  {
                      sb.Append("<button disabled class=\"btn act_btn bn2 bt_e\" type=\"button\"  title=\"Confirm Quotation\">");
                      sb.Append("<i class=\"fa fa-check\"></i>");
                      sb.Append("</button>");
                  }

                  if (btnDelivered == true)
                  {
                      sb.Append("<button class=\"btn act_btn bn4 bt_e\" type=\"button\" onclick=\"return ChangeStsQuot('2','" + Id + "');\" title=\"Quotation Delivery\">");
                      sb.Append("<i class=\"fa fa-calendar-check-o\"></i>");
                      sb.Append("</button>");
                  }
                  else
                  {
                      sb.Append("<button disabled class=\"btn act_btn bn4 bt_e\" type=\"button\"  title=\"Quotation Delivery\">");
                      sb.Append("<i class=\"fa fa-calendar-check-o\"></i>");
                      sb.Append("</button>");
                  }


                  if (intEnableReOpen == Convert.ToInt32(clsCommonLibrary.StatusAll.Active) && btnReOpen == true)
                  {
                      sb.Append("<button class=\"btn act_btn bn2 bt_e\" type=\"button\" onclick=\"return ChangeStsQuot('3','" + Id + "');\" title=\"Quotation Reopen\">");
                      sb.Append("<i class=\"fa fa-repeat\"></i>");
                      sb.Append("</button>");
                  }
                  else
                  {
                      sb.Append("<button disabled class=\"btn act_btn bn2 bt_e\" type=\"button\" title=\"Quotation Reopen\">");
                      sb.Append("<i class=\"fa fa-repeat\"></i>");
                      sb.Append("</button>");
                  }


                  sb.Append("<span class=\"dropdown dd_spl1\">");
                  if (BtnQuatnSts == true)
                  {
                      sb.Append(" <button class=\"btn act_btn bn1 bt_e dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" onclick=\"return OpenQuotationSts('" + Id + "');\" title=\"Change Quotation Status\">");
                      sb.Append(" <i class=\"fa fa-window-restore\"></i>");
                      sb.Append("</button>");
                  }
                  else
                  {
                      sb.Append(" <button disabled class=\"btn act_btn bn1 bt_e dropdown-toggle\" type=\"button\" title=\"Change Quotation Status\">");
                      sb.Append(" <i class=\"fa fa-window-restore\"></i>");
                      sb.Append("</button>");
                  }
                  sb.Append("<ul id=\"ulSts" + Id + "\" class=\"dropdown-menu drop_dn spn_drp_tbl\" role=\"dialog\" aria-haspopup=\"true\" aria-expanded=\"false\">");                    
                  sb.Append("</ul>");
                  sb.Append("</span>");


            int  intEnableWin = 0, intEnableLoss = 0;
            intUsrRolMstrId = Convert.ToInt32(clsCommonLibrary.USR_ROLE_MSTR.New_Lead);
            dtChildRol = objBusinessLayer.LoadChildRoleDefnDetail(intUserId, intUsrRolMstrId);
            if (dtChildRol.Rows.Count > 0)
            {
                string strChildRolDeftn = dtChildRol.Rows[0]["USRROL_CHLDRL_DEFN"].ToString();
                string[] strChildDefArrWords = strChildRolDeftn.Split('-');
                foreach (string strC_Role in strChildDefArrWords)
                {
                    if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Win).ToString())
                    {
                        intEnableWin = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Loss).ToString())
                    {
                        intEnableLoss = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                }
            }

        Boolean imgbtnWin = true, imgbtnPartialWin = true, imgbtnLoss = true;
        int taskAdd = 0;
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();      
        objEntityLead.LeadId = intLeadId;
        DataTable dtReadList = new DataTable();
        dtReadList = objBusinessLeadIndvl.Read_Indvidual_Lead_List(objEntityLead);
        if (dtReadList.Rows.Count > 0)
        {
            string strStatusName = dtReadList.Rows[0]["LDSTS_NAME"].ToString();
            int intStsId = Convert.ToInt32(dtReadList.Rows[0]["LDSTS_ID"].ToString());
            int intWinLoss = 0;
            int intIsActiveUser = 0;
            string strActiveUserId = dtReadList.Rows[0]["LEADS_ACTIVE_USR_ID"].ToString();
            int intActiveUserId = Convert.ToInt32(strActiveUserId);

            objEntityLead.User_Id = intUserId;
            objEntityLead.Active_UserId = intActiveUserId;
            //for Users drop down in Allocate ddl
            if (strActiveUserId == USERID)
            {
                intIsActiveUser = 1;
                if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success))
                {
                    intWinLoss = 1;
                    imgbtnWin = false;
                    imgbtnPartialWin = false;
                    imgbtnLoss = false;
                   
                }
                else if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    intWinLoss = 1;
                    imgbtnWin = false;
                    imgbtnPartialWin = false;
                    imgbtnLoss = false;
                    taskAdd = 0;
                }
                else
                {
                    intWinLoss = 0;
                    taskAdd = 1;
                }
            }
            else
            {
                intIsActiveUser = 0;
                if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    intWinLoss = 1;
                }
                else
                {
                    intWinLoss = 0;
                }
                imgbtnWin = false;
                imgbtnPartialWin = false;
                imgbtnLoss = false;
                taskAdd = 0;
            }

            if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.New)
               || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Open) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved)
                || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Prepared) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_ReOpened) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Returned))
            {
                imgbtnWin = false;
                imgbtnPartialWin = false;
            }            
        }

   
                  sb.Append("<span class=\"dropdown dd_spl1\">");
                  if ((intEnableWin == Convert.ToInt32(clsCommonLibrary.StatusAll.Active) && imgbtnWin == true) || (intEnableWin == Convert.ToInt32(clsCommonLibrary.StatusAll.Active) && imgbtnPartialWin == true) || (intEnableLoss == Convert.ToInt32(clsCommonLibrary.StatusAll.Active) && imgbtnLoss == true))
                  {
                      sb.Append("<button class=\"btn act_btn bn4 bt_e dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" title=\"Change Opportunity Status\">");
                      sb.Append("<i class=\"fa fa-th-list\"></i>");
                      sb.Append("</button>");
                  }
                  else
                  {
                      sb.Append("<button disabled class=\"btn act_btn bn4 bt_e dropdown-toggle\" type=\"button\"  title=\"Change Opportunity Status\">");
                      sb.Append("<i class=\"fa fa-th-list\"></i>");
                      sb.Append("</button>");
                  }
                  sb.Append(" <ul class=\"dropdown-menu drop_dn spn_drp_tbl\" role=\"dialog\" aria-haspopup=\"true\" aria-expanded=\"false\">");

                  if (intEnableWin == Convert.ToInt32(clsCommonLibrary.StatusAll.Active) && imgbtnWin == true)
                   {
                       sb.Append("<li class=\"li1_cz\">");
                       sb.Append("<a href=\"#\" onclick=\"return ChangeStsOpportunity('1','" + Id + "');\" title=\"Approved\">");
                       sb.Append("<div class=\"bo_not1 mrl_bon flt_l\" title=\"Loss\">");
                       sb.Append("<i class=\"fa fa-square\"></i>");
                       sb.Append("</div> Win");
                       sb.Append(" </a>");
                       sb.Append("</li>");
                   }
                  if (intEnableWin == Convert.ToInt32(clsCommonLibrary.StatusAll.Active) && imgbtnPartialWin == true)
                   {
                       sb.Append("<li>");
                       sb.Append("<a href=\"#\" onclick=\"return ChangeStsOpportunity('2','" + Id + "');\" title=\"Approved\">");
                       sb.Append("<div class=\"bo_not2 mrl_bon flt_l\" title=\"Loss\">");
                       sb.Append(" <i class=\"fa fa-square\"></i>");
                       sb.Append("</div> partially win");
                       sb.Append(" </a>");
                       sb.Append("</li>");
                   }
                  if (intEnableLoss == Convert.ToInt32(clsCommonLibrary.StatusAll.Active) && imgbtnLoss == true)
                   {
                       sb.Append("<li>");
                       sb.Append("<a href=\"#\" onclick=\"return ChangeStsOpportunity('3','" + Id + "');\" title=\"Approved\">");
                       sb.Append("<div class=\"bo_not3 mrl_bon flt_l\" title=\"Loss\">");
                       sb.Append(" <i class=\"fa fa-square\"></i>");
                       sb.Append("</div> Loss");
                       sb.Append("</a>");
                       sb.Append("</li>");
                   }
                 sb.Append("</ul>");
                 sb.Append(" </span>");








                  sb.Append("<span class=\"dropdown dd_spl1\">");
                    sb.Append("<button class=\"btn act_btn bn6 bt_e bt_e dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" title=\"Activities\">");
                      sb.Append("<i class=\"fa fa-indent\"></i>");
                    sb.Append("</button>");
                    sb.Append("<ul class=\"dropdown-menu drop_dn spn_drp_tbl\" role=\"dialog\" aria-haspopup=\"true\" aria-expanded=\"false\">");
                      sb.Append("<li class=\"li1_cz\">");
                      sb.Append(" <a href=\"#\" data-toggle=\"modal\" data-target=\"#attachview_box\" onclick=\"return ViewDetails('1','" + Id + "','" + dt.Rows[intRowBodyCount]["STATUS_ID"].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "','" + taskAdd + "');\" title=\"View Mails\">");
                        sb.Append("  <i class=\"opp_ico_img\"><img src=\"/Images/opp/view_attach.png\"> </i> View Attachments");
                       sb.Append(" </a>");
                     sb.Append(" </li>");
                     sb.Append(" <li>");
                     sb.Append(" <a href=\"#\" data-toggle=\"modal\" data-target=\"#view_mail_box\" onclick=\"return ViewDetails('2','" + Id + "','" + dt.Rows[intRowBodyCount]["STATUS_ID"].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "','" + taskAdd + "');\" title=\"Send Mails\">");
                         sb.Append(" <i class=\"opp_ico_img\"><img src=\"/Images/opp/view_mail.png\"> </i> View Emails");
                        sb.Append("</a>");
                     sb.Append(" </li>");
                      sb.Append("<li>");
                      sb.Append("<a href=\"#\" data-toggle=\"modal\" data-target=\"#note_qoute_box\" onclick=\"return ViewDetails('3','" + Id + "','" + dt.Rows[intRowBodyCount]["STATUS_ID"].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "','" + taskAdd + "');\" title=\"Send Mails\">");
                      sb.Append(" <i class=\"opp_ico_img\"><img src=\"/Images/opp/quot.notes.png\"> </i> Notes");
                        sb.Append("</a>");
                      sb.Append("</li>");
                      sb.Append("<li>");
                      sb.Append("<a href=\"#\" data-toggle=\"modal\" data-target=\"#follow_box\" onclick=\"return ViewDetails('4','" + Id + "','" + dt.Rows[intRowBodyCount]["STATUS_ID"].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "','" + taskAdd + "');\" title=\"Send Mails\">");
                      sb.Append("  <i class=\"opp_ico_img\"><i class=\"fa fa-book\"></i> </i> Follow-up / Tasks");
                       sb.Append(" </a>");
                      sb.Append("</li>");
                      sb.Append("<li>");
                      sb.Append("  <a href=\"#\" data-toggle=\"modal\" data-target=\"#send_mail_box\" onclick=\"return ViewDetails('5','" + Id + "','" + dt.Rows[intRowBodyCount]["STATUS_ID"].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "','" + taskAdd + "');\" title=\"Send Mails\">");
                        sb.Append("  <i class=\"opp_ico_img\"><img src=\"/Images/opp/snd_mail.png\"> </i> Resend Emails");
                      sb.Append("  </a>");
                     sb.Append(" </li>");
                  sb.Append("  </ul>");
                 sb.Append(" </span>");






               sb.Append(" </div>");
               sb.Append(" </td>");
               sb.Append("</tr>");       
        }
        }
        else
        {
             sb.Append("<td class=\"tr_c\" colspan=\"9\">No data available in table</td>");
        }      
        return sb.ToString();
        }
    public void PageLoad()
    {
        int intUserId = 0, intUsrRolMstrId, intEnableAdd = 0, intEnableModify = 0;
        hiddenRoleAdd.Value = "0";
        hiddenRoleUpdate.Value = "0";
        hiddenRoleCancel.Value = "0";
        clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
        clsCommonLibrary objCommon = new clsCommonLibrary();
        if (Session["USERID"] != null)
        {
            intUserId = Convert.ToInt32(Session["USERID"]);

        }
        else if (Session["USERID"] == null)
        {
            Response.Redirect("~/Default.aspx");
        }
        //Allocating child roles
        intUsrRolMstrId = Convert.ToInt32(clsCommonLibrary.USR_ROLE_MSTR.New_Lead);
        DataTable dtChildRol = objBusinessLayer.LoadChildRoleDefnDetail(intUserId, intUsrRolMstrId);

        if (dtChildRol.Rows.Count > 0)
        {
            string strChildRolDeftn = dtChildRol.Rows[0]["USRROL_CHLDRL_DEFN"].ToString();

            string[] strChildDefArrWords = strChildRolDeftn.Split('-');
            foreach (string strC_Role in strChildDefArrWords)
            {
                if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Add).ToString())
                {
                    intEnableAdd = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    hiddenRoleAdd.Value = "1";
                }
                else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Modify).ToString())
                {
                    intEnableModify = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    hiddenRoleUpdate.Value = "1";
                }
                else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Cancel).ToString())
                {
                    //

                }
                else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Find).ToString())
                {
                    //future

                }
                else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Rate_Updation).ToString())
                {
                    //future

                }
                else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Confirm).ToString())
                {
                    //future

                }

            }

            if (intEnableAdd == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
            {
                myBtn.Visible = true;

            }
            else
            {

                myBtn.Visible = false;

            }
            clsBusinessLayerLeadCreation objBusinessLayerLead = new clsBusinessLayerLeadCreation();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            int intCorpId = 0;
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityLead.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"].ToString());
                intCorpId = Convert.ToInt32(Session["CORPOFFICEID"].ToString());

            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
            if (Session["ORGID"] != null)
            {
                objEntityLead.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }

            clsCommonLibrary.CORP_GLOBAL[] arrEnumer = {  clsCommonLibrary.CORP_GLOBAL.CNCL_REASN_MUST,
                                                               clsCommonLibrary.CORP_GLOBAL.CMN_PERCENT_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.TAX_PERC_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_MNEY_DECIMAL_CNT,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_UNIT_DECIMAL_CNT,
                                                                clsCommonLibrary.CORP_GLOBAL.DEFLT_CURNCY_MST_ID,
                                                                  clsCommonLibrary.CORP_GLOBAL.GN_TAX_ENABLED,
                                                                    clsCommonLibrary.CORP_GLOBAL.ITEM_LISTING_MODE,
                                                                      clsCommonLibrary.CORP_GLOBAL.DFLT_QTNFRMT_ID,
                                                                        clsCommonLibrary.CORP_GLOBAL.DFLT_CURNCY_DISPLAY,
                                                                        clsCommonLibrary.CORP_GLOBAL.QTN_STNDRD_ALLOW_ITM_DUP
                                                              };
            DataTable dtCorpDetail = new DataTable();
            dtCorpDetail = objBusinessLayer.LoadGlobalDetail(arrEnumer, intCorpId);
            if (dtCorpDetail.Rows.Count > 0)
            {               
                hiddenFloatingValueMoney.Value = dtCorpDetail.Rows[0]["GN_MNEY_DECIMAL_CNT"].ToString();
                hiddenFloatingValueTaxPercentage.Value = dtCorpDetail.Rows[0]["TAX_PERC_DECIMAL"].ToString();
                hiddenFloatingValueUnit.Value = dtCorpDetail.Rows[0]["GN_UNIT_DECIMAL_CNT"].ToString(); ;
                hiddenTaxEnabled.Value = dtCorpDetail.Rows[0]["GN_TAX_ENABLED"].ToString();
                hiddenFloatingValueCommonPercentage.Value = dtCorpDetail.Rows[0]["CMN_PERCENT_DECIMAL"].ToString();
                hiddenDfltCurrencyMstrId.Value = dtCorpDetail.Rows[0]["DEFLT_CURNCY_MST_ID"].ToString();
                hiddenDfltQuotationFormatId.Value = dtCorpDetail.Rows[0]["DFLT_QTNFRMT_ID"].ToString();
                hiddenDfltCurrencyDisplay.Value = dtCorpDetail.Rows[0]["DFLT_CURNCY_DISPLAY"].ToString();
            }  
            if (Request.QueryString["InsUpd"] != null)
            {
                string strInsUpd = Request.QueryString["InsUpd"].ToString();
                if (strInsUpd == "Ins")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessInsertion", "SuccessInsertion();", true);
                }
                else if (strInsUpd == "Upd")
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "SuccessUpdation", "SuccessUpdation();", true);
                }                
            }
        }
        if (Request.QueryString["L_MODE"] != null)
        {
            myBtn.Visible = false;       
        }
    }
    [WebMethod]
    public static string[] GetData(string OrgId, string CorpId, string UserId, string FromDate, string ToDate, string Status, string SearchText,string Condition,string Ageing1,string Ageing2,string UpdRole,string L_MODE,string hiddenLMode,string HiddenTeamId, string PageNumber, string PageMaxSize, string strCommonSearchTerm, string OrderColumn, string OrderMethod, string strInputColumnSearch)
    {
        clsCommonLibrary objCommon = new clsCommonLibrary();
        DataTable dt = new DataTable();
        clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
        clsBusinessLayerLeadCreation objBusinessLayerLead = new clsBusinessLayerLeadCreation();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
        objEntityLead.Org_Id = Convert.ToInt32(OrgId);
        objEntityLead.Corp_Id = Convert.ToInt32(CorpId);
        objEntityLead.User_Id = Convert.ToInt32(UserId);
        if(FromDate!="")
            objEntityLead.LeadDate = objCommon.textToDateTime(FromDate);
        if (ToDate != "")
            objEntityLead.InsertDate = objCommon.textToDateTime(ToDate);
        if (Ageing1 != "")
        objEntityLead.LeadSourceId = Convert.ToInt32(Condition);
        if(Ageing1!="")
            objEntityLead.LeadId = Convert.ToInt32(Ageing1);
        if (Ageing2 != "")
            objEntityLead.DivisionId = Convert.ToInt32(Ageing2);

        string[] strResults = new string[2];
        objEntityLead.PageNumber = Convert.ToInt32(PageNumber);
        objEntityLead.PageMaxSize = Convert.ToInt32(PageMaxSize);
        objEntityLead.OrderMethod = Convert.ToInt32(OrderMethod);
        objEntityLead.OrderColumn = Convert.ToInt32(OrderColumn);
        objEntityLead.CommonSearchTerm = strCommonSearchTerm;

        var values = Enum.GetValues(typeof(SearchInputColumns));
        int intSearchColumnCount = values.Length;

        string[] strSearchInputs = new string[intSearchColumnCount];
        //— ‡
        if (strInputColumnSearch != "")
        {
            string[] InputColumnSearchList = strInputColumnSearch.Split('—');
            foreach (var InputColumnSearch in InputColumnSearchList)
            {
                string[] strColumnSrch = InputColumnSearch.Split('‡');
                int intColumnNo = Convert.ToInt32(strColumnSrch[0]);
                string strSearchString = strColumnSrch[1];

                if (intColumnNo <= intSearchColumnCount)
                {
                    strSearchInputs[intColumnNo] = strSearchString;
                }
            }
        }
        objEntityLead.SearchDate = strSearchInputs[Convert.ToInt32(SearchInputColumns.DATE)];
        objEntityLead.SearchCust = strSearchInputs[Convert.ToInt32(SearchInputColumns.CUST)];
        objEntityLead.SearchOwner = strSearchInputs[Convert.ToInt32(SearchInputColumns.OWNER)];
        objEntityLead.SearchRef = strSearchInputs[Convert.ToInt32(SearchInputColumns.REF)];


        if (L_MODE == null || L_MODE=="")
        {// normal method
            objEntityLead.Customer_Name = SearchText;
            if (Status == "ALL STATUS" || Status == "")
            {
                objEntityLead.Status = 0;
            }
            else
            {

                objEntityLead.Status = Convert.ToInt32(Status);
            }
            dt = objBusinessLayerLead.Read_Customer_List_BySearch(objEntityLead);
        }
        else if (L_MODE != null && L_MODE!="")
        {
            string strLeadListMode = hiddenLMode;

            //from dashboard
            // here status id =0 for active leads
            objEntityLead.Customer_Name = SearchText;
            if (Status == "ALL ACTIVE STATUS" || Status == "")
            {
                objEntityLead.Status = 0;
            }
            else
            {

                objEntityLead.Status = Convert.ToInt32(Status);
            }
            if (strLeadListMode == "APRV_PNDNG")
            {

                string strId = "0";
                if (HiddenTeamId != "")
                {
                    string strRandomMixedId = HiddenTeamId;
                    string strLenghtofId = strRandomMixedId.Substring(0, 2);
                    int intLenghtofId = Convert.ToInt16(strLenghtofId);
                    strId = strRandomMixedId.Substring(2, intLenghtofId);
                }
                objEntityLead.Team = Convert.ToInt32(strId);

                dt = objBusinessLayerLead.Read_Pending_Lead_Detail_ByTeam(objEntityLead);

            }
            else if (strLeadListMode == "NEW" || strLeadListMode == "APRV" || strLeadListMode == "ACTV" || strLeadListMode == "DPEND")
            {
                dt = objBusinessLayerLead.Read_Customer_List_Indvl_BySearch(objEntityLead);
            }
            else if (strLeadListMode == "TCNVRTD" || strLeadListMode == "TJUNK" || strLeadListMode == "TONOLD")
            {
                dt = objBusinessLayerLead.Read_Customer_List_Indvl_BySearch(objEntityLead);
            }
            else if (strLeadListMode == "MCNVRTD" || strLeadListMode == "MJUNK" || strLeadListMode == "MOPEND")
            {
                dt = objBusinessLayerLead.Read_Customer_List_Indvl_Mnthly_BySearch(objEntityLead);
            }
        }



        int intEnableUpdate = Convert.ToInt32(UpdRole);
        strResults[0] = ConvertDataTableToHTML(dt, intEnableUpdate, L_MODE, UserId);
        if (dt.Rows.Count > 0)
        {
            int intTotalItems = Convert.ToInt32(dt.Rows[0]["CNT"].ToString());
            int intCurrentRowCount = dt.Rows.Count;
            //Pagination
            strResults[1] = objBusinessLayer.GenereatePagination(intTotalItems, objEntityLead.PageNumber, objEntityLead.PageMaxSize, intCurrentRowCount);
        }

        return strResults;
    }
    [WebMethod]
    public static string[] LoadStaticDatafordt()//Filters
    {
        StringBuilder html = new StringBuilder();
        StringBuilder sbSearchInputColumns = new StringBuilder();

        string[] strResults = new string[3];
        html.Append("<div>");

        html.Append("<div class=\"col-md-2\" style=\"padding-left: 0px;\">");//length
        html.Append("<label><span>Show</span> <select onchange=\"getdata(1);\" id=\"ddl_page_size\" style=\"height: 24px;margin: 0px 2px;margin-right: 2px;\">");
        html.Append("<option value=\"10\">10</option><option value=\"25\">25</option><option value=\"50\">50</option><option value=\"100\">100</option></select> entries");
        html.Append("</label></div>");
        //page length ends
        //common filter
        html.Append("<div class=\"pull-right\" style=\"padding-right: 0px;\">");
        html.Append("<label>Search:");
        html.Append("<input  autocomplete=\"off\" onkeypress=\"return isTagEnter(event);\" onkeydown=\"return isTagEnter(event);\" onkeyup=\"SettypingTimer(event);\" class=\"tbl_fil_s\" id=\"txtCommonSearch_dt\"  type=\"search\" aria-controls=\"example\">");
        html.Append("</label>");
        html.Append("</div>");
        //common filter ends
        html.Append("</div>");
        strResults[0] = html.ToString();

        //custom search fields
        var values = Enum.GetValues(typeof(SearchInputColumns));
        int intSearchColumnCount = values.Length;


        sbSearchInputColumns.Append("<th id=\"tdColumnHead_3\" onclick=\"SetOrderByValue(3)\" class=\"sorting th_b7_5\" style=\"word-wrap:break-word;\">DATE<i class=\"fa fa-sort pull-right hed_fa\" aria-hidden=\"true\"></i><br><input autocomplete=\"off\" id=\"txtSearchColumn_0\"  onkeypress=\"return isTagEnter(event);\" onkeydown=\"return isTagEnter(event);\" onkeyup=\"return SettypingTimer(event);\" class=\"tb_inp_1 tb_in\" type=\"text\" title=\"DATE\" placeholder=\"Date\"></th>");
        sbSearchInputColumns.Append("<th id=\"tdColumnHead_4\"  onclick=\"SetOrderByValue(4)\" class=\"sorting th_b1_6\" style=\"word-wrap:break-word;\">AGEING<i class=\"fa fa-sort pull-right hed_fa\" aria-hidden=\"true\"></i></th>");
        sbSearchInputColumns.Append("<th id=\"tdColumnHead_5\" onclick=\"SetOrderByValue(5)\" class=\"sorting th_b8_6 tr_l\" style=\"word-wrap:break-word;\">CUSTOMER<i class=\"fa fa-sort pull-right hed_fa\" aria-hidden=\"true\"></i><br><input autocomplete=\"off\" id=\"txtSearchColumn_1\"  onkeypress=\"return isTagEnter(event);\" onkeydown=\"return isTagEnter(event);\" onkeyup=\"return SettypingTimer(event);\" class=\"tb_inp_1 tb_in\" type=\"text\" title=\"CUSTOMER\" placeholder=\"Customer\"></th>");
        sbSearchInputColumns.Append("<th id=\"tdColumnHead_6\" onclick=\"SetOrderByValue(6)\" class=\"sorting th_b8_5 tr_l\" style=\"word-wrap:break-word;width: 9.1% !important;\">OPPORTUNITY OWNER<i class=\"fa fa-sort pull-right hed_fa\" aria-hidden=\"true\"></i><br><input autocomplete=\"off\" id=\"txtSearchColumn_2\"  onkeypress=\"return isTagEnter(event);\" onkeydown=\"return isTagEnter(event);\" onkeyup=\"return SettypingTimer(event);\" class=\"tb_inp_1 tb_in\" type=\"text\" title=\"OPPORTUNITY OWNER\" placeholder=\"Opportunity Owner\"></th>");
        sbSearchInputColumns.Append("<th id=\"tdColumnHead_7\"  onclick=\"SetOrderByValue(7)\" class=\"sorting th_b7_6 tr_l\" style=\"word-wrap:break-word;\">SOURCE<i class=\"fa fa-sort pull-right hed_fa\" aria-hidden=\"true\"></i></th>");
        sbSearchInputColumns.Append("<th id=\"tdColumnHead_8\"  onclick=\"SetOrderByValue(8)\" class=\"sorting th_b6_1\" style=\"word-wrap:break-word;\">STATUS<i class=\"fa fa-sort pull-right hed_fa\" aria-hidden=\"true\"></i></th>");
        sbSearchInputColumns.Append("<th id=\"tdColumnHead_12\"  onclick=\"SetOrderByValue(12)\" class=\"sorting th_b1_6 tr_c\" style=\"word-wrap:break-word;width:5% !important;\">LAST <i class=\"fa fa-sort pull-right hed_fa\" aria-hidden=\"true\"></i><br>UPDATION</th>");
        sbSearchInputColumns.Append("<th id=\"tdColumnHead_2\" onclick=\"SetOrderByValue(2)\" class=\"sorting th_b7_6 tr_l\" style=\"word-wrap:break-word;width:6% !important;\">QUOTATION#<i class=\"fa fa-sort pull-right hed_fa\" aria-hidden=\"true\"></i><br><input autocomplete=\"off\" id=\"txtSearchColumn_3\"  onkeypress=\"return isTagEnter(event);\" onkeydown=\"return isTagEnter(event);\" onkeyup=\"return SettypingTimer(event);\" class=\"tb_inp_1 tb_in\" type=\"text\" title=\"QUOTATION#\" placeholder=\"Quotation#\"></th>");
        sbSearchInputColumns.Append("<th class=\"th_b3_1\"  style=\"word-wrap:break-word;\">ACTIONS</th>");
        strResults[1] = sbSearchInputColumns.ToString();
        strResults[2] = intSearchColumnCount.ToString();
        return strResults;
    }

    public enum SearchInputColumns
    {
        //Must be sequential 
        DATE = 0,
        CUST = 1,
        OWNER = 2,
        REF = 3,
    }
    [WebMethod]
    public static string ViewDetails(string OrgId, string CorpId, string Mode, string Id, string sts,string refe,string userid)
    {
        StringBuilder sb = new StringBuilder();
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl1 = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead1 = new clsEntityLeadCreation();
        clsCommonLibrary objCommon = new clsCommonLibrary();
        string hiddenMailFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.Lead_Mail_Attachment);

        string strRandomMixedId = Id;
        string id = strRandomMixedId;
        string strLenghtofId = strRandomMixedId.Substring(0, 2);
        int intLenghtofId = Convert.ToInt16(strLenghtofId);
        string strId = strRandomMixedId.Substring(2, intLenghtofId);
        objEntityLead1.LeadId = Convert.ToInt32(strId);
        objEntityLead1.User_Id = Convert.ToInt32(userid);
        DataTable dt = new DataTable();
        if (Mode == "1")
        {
            dt = objBusinessLeadIndvl1.Read_Indvidual_Lead_Atch(objEntityLead1);
            if (dt.Rows.Count == 0)
            {
                sb.Append("<tr>");
                sb.Append("<td class=\"tr_c\" colspan='3'>No Data Available</td>");
                sb.Append("</tr>");
            }
            else
            {
                for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
                {
                    sb.Append("<tr  >");
                    int intCnt = intRowBodyCount + 1;
                    sb.Append("<td>" + intCnt + "</td>");
                    sb.Append("<td class=\"tr_l\" ><a  target='_blank' href='" + hiddenMailFilePath + dt.Rows[intRowBodyCount]["LDATCH_FILENAME"].ToString() + "' >" + dt.Rows[intRowBodyCount]["LDATCH_FLNAME_ACT"].ToString() + "</a></td>");
                    sb.Append("<td class=\"tr_c\">" + dt.Rows[intRowBodyCount]["LDATCH_INS_DATE"].ToString() + "</td>");
                    sb.Append("</tr>");
                }
            }
        }
        else if (Mode == "2")
        {
            dt = objBusinessLeadIndvl1.ReadMailList(objEntityLead1);

            if (dt.Rows.Count == 0)
            {
                sb.Append("<tr>");
                sb.Append("<td class=\"tr_c\" colspan='7'>No Data Available</td>");
                sb.Append("</tr>");
            }
            else
            {
                for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
                {
                    int intCnt = intRowBodyCount + 1;
                    string strSucessSts = "";
                    if (dt.Rows[intRowBodyCount]["LDMAIL_SUCESS_STS"].ToString() == "2")
                    {
                        sb.Append("<tr >");
                          sb.Append("<td>");
                 sb.Append("<div class=\"bo_not1 mrl_bon flt_l fol_2_ico fx_width\" title=\"Time-Out Mail\">");
                  sb.Append(" <i class=\"fa fa-envelope\"></i>");
                  sb.Append("</div>" + intCnt);
                 sb.Append(" </td>");
                        strSucessSts = "2";//lost mail failure
                    }
                    else
                    {
                        sb.Append("<tr>");
                        sb.Append("<td>" + intCnt + "</td>");
                        strSucessSts = "1";//mail success
                    }
                    //   sb.Append( "<tr>");
                   
                   
                    sb.Append("<td class=\"tr_l\" >" + dt.Rows[intRowBodyCount]["LDMAIL_FRM_ADD"].ToString() + "</td>");
                    sb.Append("<td class=\"tr_l\" >" + dt.Rows[intRowBodyCount]["LDMAIL_TO_ADD"].ToString() + "</td>");

                    sb.Append("<td class=\"tr_l\" >" + dt.Rows[intRowBodyCount]["USR_NAME"].ToString() + "</td>");
                    sb.Append("<td>" + dt.Rows[intRowBodyCount]["LDMAIL_DATE"].ToString() + "</td>");
                    sb.Append("<td>" + dt.Rows[intRowBodyCount]["LDMAIL_STS"].ToString() + "</td>");
                    string strRandomMixedLeadId = "";
                    if (Id != "" && Id!=null)
                    {
                        strRandomMixedLeadId = Id;
                    }
                    string strLeadMailId = "";
                    strLeadMailId = dt.Rows[intRowBodyCount]["LDMAIL_ID"].ToString();
                    strLeadMailId = objCommon.ReplaceEscapeSequence_ForJavascript(strLeadMailId);

                    string strMailContent = dt.Rows[intRowBodyCount]["LDMAIL_CONTENT"].ToString();
                    strMailContent = objCommon.ReplaceEscapeSequence_ForJavascript(strMailContent);

                    string strLeadMailSts = dt.Rows[intRowBodyCount]["LDMAIL_STS"].ToString();
                    strLeadMailSts = objCommon.ReplaceEscapeSequence_ForJavascript(strLeadMailSts);
                    string strFrom = dt.Rows[intRowBodyCount]["LDMAIL_FRM_ADD"].ToString();
                    string strTo = dt.Rows[intRowBodyCount]["LDMAIL_TO_ADD"].ToString();
                    //005 start
                    clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                    clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
                    objEntityLead.PrvsCcMailid = Convert.ToInt64(dt.Rows[intRowBodyCount]["LDMAIL_ID"]);
                    DataTable dtCc = objBusinessLeadIndvl.ReadMailCcPreviousAddrs(objEntityLead);
                    string strCcMailIds = "";
                    if (dtCc.Rows.Count > 0)
                    {
                        if (dtCc.Rows[0]["LDMAILCC_CC"].ToString() != "")
                        {
                            int intRowCount = dtCc.Rows.Count;
                            for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                            {
                                strCcMailIds += dtCc.Rows[intRcount]["LDMAILCC_CC"].ToString() + ",";

                            }
                            strCcMailIds = strCcMailIds.TrimEnd(strCcMailIds[strCcMailIds.Length - 1]);
                        }
                    }
                    objEntityLead.PrvsBCcMailid = Convert.ToInt64(dt.Rows[intRowBodyCount]["LDMAIL_ID"]);
                    DataTable dtBcc = objBusinessLeadIndvl.ReadMailBCcPreviousAddrs(objEntityLead);
                    string strBccMailIds = "";
                    if (dtBcc.Rows.Count > 0)
                    {
                        if (dtBcc.Rows[0]["LDMAILBCC_BCC"].ToString() != "")
                        {
                            int intRowCount = dtBcc.Rows.Count;
                            for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                            {
                                strBccMailIds += dtBcc.Rows[intRcount]["LDMAILBCC_BCC"].ToString() + ",";
                            }
                            strBccMailIds = strBccMailIds.TrimEnd(strBccMailIds[strBccMailIds.Length - 1]);
                        }
                    }
                    DataTable dtSubject = objBusinessLeadIndvl.ReadMailSubject(objEntityLead);
                    string strSubjects = "";
                    if (dtSubject.Rows.Count > 0)
                    {
                        if (dtSubject.Rows[0]["LDMAIL_SUBJECT"].ToString() != "")
                        {
                            int intRowCount = dtSubject.Rows.Count;
                            for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                            {
                                strSubjects += dtSubject.Rows[intRcount]["LDMAIL_SUBJECT"].ToString() + ",";
                            }
                            strSubjects = strSubjects.TrimEnd(strSubjects[strSubjects.Length - 1]);
                        }
                    }
                    DataTable dtMultyTo = objBusinessLeadIndvl.ReadMailMultyTo(objEntityLead);
                    string strMultyTo = "";
                    if (dtMultyTo.Rows.Count > 0)
                    {
                        if (dtMultyTo.Rows[0]["LDMAILMULTY_TO"].ToString() != "")
                        {
                            int intRowCount = dtMultyTo.Rows.Count;
                            for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                            {
                                strMultyTo += dtMultyTo.Rows[intRcount]["LDMAILMULTY_TO"].ToString() + ",";
                            }
                            strMultyTo = strMultyTo.TrimEnd(strMultyTo[strMultyTo.Length - 1]);
                        }
                    }
                    sb.Append("<td><button  id='SpanEditViewMail" + intRowBodyCount + "' onclick=\"return ViewModalMail('SpanEditViewMail" + intRowBodyCount + "',event,'" + strLeadMailId + "','" + strMailContent + "','" + strLeadMailSts + "','" + strCcMailIds + "','" + strBccMailIds + "','" + strSubjects + "','" + strMultyTo + "','" + strFrom + "','" + strTo + "','" + strSucessSts + "');\" class=\"btn act_btn bn4\" data-toggle=\"modal\" data-target=\"#send_mail\" title=\"View\">");
                   sb.Append("<i class=\"fa fa-list-alt\"></i>");
                 sb.Append("</button></td>");                 
                    sb.Append("</tr>");
                }

            }
        }
        else if (Mode == "3")
        {
            dt = objBusinessLeadIndvl1.Read_Indvidual_Lead_Followup(objEntityLead1);
            if (dt.Rows.Count == 0)
            {
                sb.Append("<tr>");
                sb.Append("<td class=\"tr_c\" colspan='4'>No Data Available</td>");
                sb.Append("</tr>");
            }
            else
            {
                for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
                {
                    sb.Append("<tr  >");
                    int intCnt = intRowBodyCount + 1;
                    sb.Append("<td>" + intCnt + "</td>");
                    sb.Append("<td class=\"tr_l\" >" + dt.Rows[intRowBodyCount]["USR_NAME"].ToString() + "</td>");
                    sb.Append("<td>" + dt.Rows[intRowBodyCount]["LDFLUP_DATE"].ToString() + "</td>");
                    sb.Append("<td>" + dt.Rows[intRowBodyCount]["LDSRCE_NAME"].ToString() + "</td>");                   
                    sb.Append("</tr>");
                }
            }

        }
        else if (Mode == "4")
        {

        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
        if (strId != "")
        {
            objEntityLead.LeadId = Convert.ToInt32(strId);
        }
       objEntityLead.Corp_Id = Convert.ToInt32(CorpId);     
       objEntityLead.Org_Id = Convert.ToInt32(OrgId);
       DataTable dtReadList = new DataTable();
       dtReadList = objBusinessLeadIndvl.Read_Indvidual_Lead_List(objEntityLead);
       int intWinLoss = 0;
       int intIsActiveUser = 0;

       if (dtReadList.Rows.Count > 0)
       {
           string strStatusName = dtReadList.Rows[0]["LDSTS_NAME"].ToString();
           int intStsId = Convert.ToInt32(dtReadList.Rows[0]["LDSTS_ID"].ToString());
          
           string strActiveUserId = dtReadList.Rows[0]["LEADS_ACTIVE_USR_ID"].ToString();
           int intActiveUserId = Convert.ToInt32(strActiveUserId);


           objEntityLead.User_Id = Convert.ToInt32(userid);
           objEntityLead.Active_UserId = intActiveUserId;
           //for Users drop down in Allocate ddl
           DataTable dtAllocateUsersList = objBusinessLeadIndvl.Read_UserForAllocate(objEntityLead);

           if (strActiveUserId == userid)
           {
               intIsActiveUser = 1;

               if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success))
               {
                   intWinLoss = 1;
               }
               else if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
               {
                   intWinLoss = 1;
               }
               else
               {
                   intWinLoss = 0;
               }
           }
           else
           {
               intIsActiveUser = 0;
               if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
               {
                   intWinLoss = 1;
               }
               else
               {
                   intWinLoss = 0;
               }
                 }
              }

            dt = objBusinessLeadIndvl1.Read_Indvidual_Lead_Task(objEntityLead1);
            if (dt.Rows.Count == 0)
            {
                sb.Append("<tr>");
                sb.Append("<td  colspan='5'>No Data Available</td>");
                sb.Append("</tr>");

            }
            else
            {
                for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
                {


                    //for replacing special characters

                    string strTaskId = "";
                    strTaskId = dt.Rows[intRowBodyCount]["TASK_ID"].ToString();
                    strTaskId = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskId);

                    string strTaskSbjctId = dt.Rows[intRowBodyCount]["TASKSUBJCT_ID"].ToString();
                    strTaskSbjctId = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskSbjctId);


                    string strTaskSbjctName = dt.Rows[intRowBodyCount]["TASKSUBJCT_NAME"].ToString();
                    strTaskSbjctName = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskSbjctName);

                    string strTaskDueDate = dt.Rows[intRowBodyCount]["T_DUE_DATE"].ToString();
                    strTaskDueDate = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskDueDate);

                    string strTaskDueHr = dt.Rows[intRowBodyCount]["T_DUE_HOUR"].ToString();
                    strTaskDueHr = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskDueHr);

                    string strTaskDueMin = dt.Rows[intRowBodyCount]["T_DUE_MIN"].ToString();
                    strTaskDueMin = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskDueMin);

                    string strTaskDueAM_PM = dt.Rows[intRowBodyCount]["T_DUE_AM_PM"].ToString();
                    strTaskDueAM_PM = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskDueAM_PM);


                    string strTaskInsDate = dt.Rows[intRowBodyCount]["T_INS_DATE"].ToString();
                    strTaskInsDate = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskInsDate);

                    string strTaskInsHr = dt.Rows[intRowBodyCount]["T_INS_HOUR"].ToString();
                    strTaskInsHr = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskInsHr);

                    string strTaskInsMin = dt.Rows[intRowBodyCount]["T_INS_MIN"].ToString();
                    strTaskInsMin = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskInsMin);

                    string strTaskInsAM_PM = dt.Rows[intRowBodyCount]["T_INS_AM_PM"].ToString();
                    strTaskInsAM_PM = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskInsAM_PM);


                    string strTaskClsDate = dt.Rows[intRowBodyCount]["T_CLS_DATE"].ToString();
                    strTaskClsDate = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskClsDate);

                    string strTaskClsHr = dt.Rows[intRowBodyCount]["T_CLS_HOUR"].ToString();
                    strTaskClsHr = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskClsHr);

                    string strTaskClsMin = dt.Rows[intRowBodyCount]["T_CLS_MIN"].ToString();
                    strTaskClsMin = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskClsMin);

                    string strTaskClsAM_PM = dt.Rows[intRowBodyCount]["T_CLS_AM_PM"].ToString();
                    strTaskClsAM_PM = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskClsAM_PM);

                    string strTaskCurDate = dt.Rows[intRowBodyCount]["T_CUR_DATE"].ToString();
                    strTaskCurDate = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCurDate);

                    string strTaskCurHr = dt.Rows[intRowBodyCount]["T_CUR_HOUR"].ToString();
                    strTaskCurHr = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCurHr);

                    string strTaskCurMin = dt.Rows[intRowBodyCount]["T_CUR_MIN"].ToString();


                    if (strTaskCurMin != "")
                    {
                        int intCurMin = Convert.ToInt32(strTaskCurMin);
                        if (intCurMin >= 0 && intCurMin < 5)
                        {
                            int intMin = 0;
                            strTaskCurMin = intMin.ToString("00");

                        }
                        else if (intCurMin >= 5 && intCurMin < 10)
                        {
                            int intMin = 5;
                            strTaskCurMin = intMin.ToString("00");

                        }
                        else if (intCurMin >= 10 && intCurMin < 15)
                        {

                            int intMin = 10;
                            strTaskCurMin = intMin.ToString("00");
                        }
                        else if (intCurMin >= 15 && intCurMin < 20)
                        {
                            int intMin = 15;
                            strTaskCurMin = intMin.ToString("00");

                        }
                        else if (intCurMin >= 20 && intCurMin < 25)
                        {
                            int intMin = 20;
                            strTaskCurMin = intMin.ToString("00");

                        }
                        else if (intCurMin >= 25 && intCurMin < 30)
                        {
                            int intMin = 25;
                            strTaskCurMin = intMin.ToString("00");

                        }
                        else if (intCurMin >= 30 && intCurMin < 35)
                        {
                            int intMin = 30;
                            strTaskCurMin = intMin.ToString("00");

                        }
                        else if (intCurMin >= 35 && intCurMin < 40)
                        {
                            int intMin = 35;
                            strTaskCurMin = intMin.ToString("00");

                        }
                        else if (intCurMin >= 40 && intCurMin < 45)
                        {

                            int intMin = 40;
                            strTaskCurMin = intMin.ToString("00");
                        }
                        else if (intCurMin >= 45 && intCurMin < 50)
                        {
                            int intMin = 45;
                            strTaskCurMin = intMin.ToString("00");

                        }
                        else if (intCurMin >= 50 && intCurMin < 55)
                        {
                            int intMin = 50;
                            strTaskCurMin = intMin.ToString("00");

                        }
                        else if (intCurMin >= 55 && intCurMin < 60)
                        {

                            int intMin = 55;
                            strTaskCurMin = intMin.ToString("00");
                        }
                    }

                    strTaskCurMin = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCurMin);

                    string strTaskCurAM_PM = dt.Rows[intRowBodyCount]["T_CUR_AM_PM"].ToString();
                    strTaskCurAM_PM = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCurAM_PM);

                    string strDescptn = dt.Rows[intRowBodyCount]["TASK_DESCRIPTION"].ToString();
                    strDescptn = objCommon.ReplaceEscapeSequence_ForJavascript(strDescptn);

                    string strStatus = dt.Rows[intRowBodyCount]["TASK_STATUS"].ToString();
                    strStatus = objCommon.ReplaceEscapeSequence_ForJavascript(strStatus);

                    string strTaskCloseStatus = dt.Rows[intRowBodyCount]["TASK_CLOSE_STATUS"].ToString();
                    strTaskCloseStatus = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCloseStatus);
                   
                    int intCnt = intRowBodyCount + 1;
                    if (intCnt % 2 == 0)
                    {
                        sb.Append("<tr class=\"tr1\">");
                    }
                    else
                    {
                        sb.Append("<tr>");
                    }
                    if (dt.Rows[intRowBodyCount]["TASK_CLOSE_STATUS"].ToString() == "OPEN")
                    {
                        string strDueDate = strTaskDueDate + "-" + strTaskDueHr + "-" + strTaskDueMin + "-" + strTaskDueAM_PM;
                        DateTime dtDueDateTime = objCommon.textWithTimeToDateTime(strDueDate);
                        if (dtDueDateTime < System.DateTime.Now)
                        {
                              sb.Append("<td><div class=\"bo_not1 mrl_bon flt_l fol_3_ico\" title=\"Open task / Follow-Up\"> <i class=\"fa fa-book\"></i>");
                              sb.Append("</div>" + intCnt + "</td>");
                        }
                        else
                        {                         
                             sb.Append("<td><div class=\"bo_not1 mrl_bon flt_l fol_1_ico\" title=\"Breached task / Follow-Up\">");
                             sb.Append("<i class=\"fa fa-book\"></i></div>" + intCnt + "</td>");
                        }
                    }
                    else
                    {
                          sb.Append("<td><div class=\"bo_not1 mrl_bon flt_l fol_2_ico\" title=\"Closed task / Follow-Up\">");
                           sb.Append("<i class=\"fa fa-book\"></i></div> " + intCnt + "</td>");                      
                    }


                    sb.Append("<td class=\"tr_l\">" + dt.Rows[intRowBodyCount]["TASKSUBJCT_NAME"].ToString() + "</td>");
                    sb.Append("<td >" + dt.Rows[intRowBodyCount]["TASK_INS_DATE"].ToString() + "</td>");
                    sb.Append("<td >" + dt.Rows[intRowBodyCount]["TASK_DUE_DATE"].ToString() + "</td>");
                    sb.Append("<td>");
                          
                    if (intWinLoss == 0 && intIsActiveUser == 1)//if not win or loss and is active user
                    {
                        if (dt.Rows[intRowBodyCount]["TASK_CLOSE_STATUS"].ToString() == "OPEN")
                        {
                             if(dt.Rows[intRowBodyCount]["TASK_STATUS"].ToString()=="ACTIVE"){
                                 sb.Append("<button class=\"btn tab_but1 butn1 btn_sta\" onclick=\"return StsModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskId + "','" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "');\" title=\"Change Status\">");
                             sb.Append("<i class=\"fa fa-check-circle\"></i>");
                             sb.Append(" </button>");
                              }
                             else{

                               sb.Append("<button class=\"btn tab_but1 butn1 btn_sti\" onclick=\"return StsModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskId + "','" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "');\"  title=\"Change Status\">");
                               sb.Append("<i class=\"fa fa-times-circle\"></i>");
                               sb.Append("</button>");
                              }
                             sb.Append("<button id='SpanEditViewTask" + intRowBodyCount + "' onclick=\"return EditModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskId + "','" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "');\"  class=\"btn act_btn bn1 bt_e\" data-toggle=\"modal\" data-target=\"#myModal_3\" title=\"Edit\">");
                                sb.Append("<i class=\"fa fa-edit\"></i>");
                                sb.Append("</button>");


                                sb.Append("<button id='SpanEditViewCancelTask" + intRowBodyCount + "' onclick=\"return OpenModalCancelTask('SpanEditViewCancelTask" + intRowBodyCount + "',event,'" + strTaskId + "','" + strTaskInsDate + "','" + strTaskInsHr + "','" + strTaskInsMin + "','" + strTaskInsAM_PM + "','" + strTaskCurDate + "','" + strTaskCurHr + "','" + strTaskCurMin + "','" + strTaskCurAM_PM + "');\" class=\"btn act_btn bn1\"  title=\"Close this task\">");
                                 sb.Append("<i class=\"fa fa-tasks\"></i>");
                                sb.Append("</button>");
                        
                        }
                        else
                        {
                          
                             if(dt.Rows[intRowBodyCount]["TASK_STATUS"].ToString()=="ACTIVE"){
                             sb.Append("<button disabled class=\"btn tab_but1 butn1 btn_sta\"  title=\"Change Status\">");
                             sb.Append("<i class=\"fa fa-check-circle\"></i>");
                             sb.Append(" </button>");
                              }
                             else{

                               sb.Append("<button disabled class=\"btn tab_but1 butn1 btn_sti\" title=\"Change Status\">");
                               sb.Append("<i class=\"fa fa-times-circle\"></i>");
                               sb.Append("</button>");
                              }


                             sb.Append("<button  id='SpanEditViewTask" + intRowBodyCount + "'  onclick=\"return ViewModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "','" + strTaskClsDate + "','" + strTaskClsHr + "','" + strTaskClsMin + "','" + strTaskClsAM_PM + "','" + strTaskCloseStatus + "');\" class=\"btn act_btn bn4\" data-toggle=\"modal\" data-target=\"#myModal_3\" title=\"View\">");
                            sb.Append("<i class=\"fa fa-list-alt\"></i>");
                             sb.Append("</button>");

                              sb.Append("<button class=\"btn act_btn bn1\" title=\"Close this task\" disabled=\"\">");
                              sb.Append("<i class=\"fa fa-tasks\"></i>");
                              sb.Append("</button>");
                        }
                    }
                    else
                    {
                        if (dt.Rows[intRowBodyCount]["TASK_STATUS"].ToString() == "ACTIVE")
                        {
                            sb.Append("<button disabled class=\"btn tab_but1 butn1 btn_sta\"  title=\"Change Status\">");
                            sb.Append("<i class=\"fa fa-check-circle\"></i>");
                            sb.Append(" </button>");
                        }
                        else
                        {

                            sb.Append("<button disabled class=\"btn tab_but1 butn1 btn_sti\" title=\"Change Status\">");
                            sb.Append("<i class=\"fa fa-times-circle\"></i>");
                            sb.Append("</button>");
                        }


                        sb.Append("<button  id='SpanEditViewTask" + intRowBodyCount + "'  onclick=\"return ViewModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "','" + strTaskClsDate + "','" + strTaskClsHr + "','" + strTaskClsMin + "','" + strTaskClsAM_PM + "','" + strTaskCloseStatus + "');\" class=\"btn act_btn bn4\" data-toggle=\"modal\" data-target=\"#myModal_3\" title=\"View\">");
                        sb.Append("<i class=\"fa fa-list-alt\"></i>");
                        sb.Append("</button>");

                        sb.Append("<button class=\"btn act_btn bn1\" title=\"Close this task\" disabled=\"\">");
                        sb.Append("<i class=\"fa fa-tasks\"></i>");
                        sb.Append("</button>");
                    }

                    sb.Append("</td>");
                    sb.Append("</tr>");
                }
            }



        }
        else if (Mode == "5")
        {

            int intLeadStatus = 0;
            if (sts!="")
            {
                intLeadStatus = Convert.ToInt32(sts);
            }
            int intCurrentSts = 0;
            if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
            {

                intCurrentSts = 1;
            }
            else
            {
                intCurrentSts = 0;
            }
            string strCurrRef = "";
            if (refe!="")
            {
                strCurrRef = refe;
            }



            dt = objBusinessLeadIndvl1.Read_ResendMailList(objEntityLead1);
            DataTable dtFromMail2 = objBusinessLeadIndvl1.ReadFromMailAddress(objEntityLead1);
            DataTable dtToMail2 = objBusinessLeadIndvl1.ReadToMailAddress(objEntityLead1);
            string strFromMail = "";
            if (dtFromMail2.Rows.Count > 0)
            {
                strFromMail = dtFromMail2.Rows[0]["MLCNFG_EMAIL"].ToString();
            }
            string strToMail = "";
            if (dtToMail2.Rows.Count > 0)
            {
                strToMail = dtToMail2.Rows[0]["LEADS_EMAIL"].ToString();
            }
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
            objEntityQuotation.Lead_Id = Convert.ToInt32(strId);
            DataTable dtRvsdQtnList = objBusinessLayerQuotation.ReadRvsdQuotation(objEntityQuotation);
           
          
            int intCnt = 1;
            if (dt.Rows.Count > 0)
            {
                if (intCurrentSts == 0)
                {
                    if (dt.Rows[0]["TO_MAIL"].ToString() != "")
                    {
                        string strTOMails = dt.Rows[0]["TO_MAIL"].ToString();
                        string[] strArrayTOMails = strTOMails.Split(',');
                        for (int i = 0; i < strArrayTOMails.Length; i++)
                        {
                            if (intCnt % 2 == 0)
                            {
                                sb.Append("<tr >");
                            }
                            else
                            {
                                sb.Append("<tr class=\"tr1\">");
                            }

                            sb.Append("<td >" + intCnt + "</td>");
                            sb.Append("<td >" + strCurrRef + "</td>");
                            sb.Append("<td >" + strFromMail + "</td>");
                            sb.Append("<td >" + strArrayTOMails[i].ToString() + "</td>");
                          
                            sb.Append("<td>TO</td>");
                            sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + strArrayTOMails[i].ToString() + "','TO'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                            sb.Append("</tr>");
                            intCnt++;
                        }

                    }
                    if (dt.Rows[0]["CC_MAIL"].ToString() != "")
                    {
                        string strCCMails = dt.Rows[0]["CC_MAIL"].ToString();
                        string[] strArrayCCMails = strCCMails.Split(',');
                        for (int i = 0; i < strArrayCCMails.Length; i++)
                        {
                            if (intCnt % 2 == 0)
                            {
                                sb.Append("<tr >");
                            }
                            else
                            {
                                sb.Append("<tr class=\"tr1\">");
                            }
                            sb.Append("<td >" + intCnt + "</td>");
                            sb.Append("<td >" + strCurrRef + "</td>");
                            sb.Append("<td >" + strFromMail + "</td>");
                            sb.Append("<td >" + strArrayCCMails[i].ToString() + "</td>");
                            
                            sb.Append("<td >CC</td>");
                            sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + strArrayCCMails[i].ToString() + "','CC'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                            sb.Append("</tr>");
                            intCnt++;
                        }
                    }
                    if (dt.Rows[0]["BCC_MAIL"].ToString() != "")
                    {
                        string strBCCMails = dt.Rows[0]["BCC_MAIL"].ToString();
                        string[] strArrayBCCMails = strBCCMails.Split(',');
                        for (int i = 0; i < strArrayBCCMails.Length; i++)
                        {
                            if (intCnt % 2 == 0)
                            {
                                sb.Append("<tr >");
                            }
                            else
                            {
                                sb.Append("<tr class=\"tr1\">");
                            }
                            sb.Append("<td >" + intCnt + "</td>");
                            sb.Append("<td >" + strCurrRef + "</td>");
                            sb.Append("<td >" + strFromMail + "</td>");
                            sb.Append("<td >" + strArrayBCCMails[i].ToString() + "</td>");
                           
                            sb.Append("<td >BCC</td>");

                            sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + strArrayBCCMails[i].ToString() + "','BCC'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i> </button></td>");
                            sb.Append("</tr>");
                            intCnt++;
                        }
                    }
                }

                //revision
                if (dtRvsdQtnList.Rows.Count > 0)
                {
                    for (int intRowCount = 0; intRowCount < dtRvsdQtnList.Rows.Count; intRowCount++)
                    {
                        objEntityQuotation.BckupId = Convert.ToInt32(dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"]);
                        DataTable dtAdditnlmail = new DataTable();
                        dtAdditnlmail = objBusinessLayerQuotation.ReadQuotationAddtnMailBckup(objEntityQuotation);
                        if (dtAdditnlmail.Rows.Count > 0)
                        {
                            if (dtAdditnlmail.Rows[0]["BCKTO_MAIL"].ToString() != "")
                            {
                                string strAddTomail = dtAdditnlmail.Rows[0]["BCKTO_MAIL"].ToString();
                                string[] strArrayAddTomail = strAddTomail.Split(',');
                                for (int i = 0; i < strArrayAddTomail.Length; i++)
                                {
                                    if (intCnt % 2 == 0)
                                    {
                                        sb.Append("<tr >");
                                    }
                                    else
                                    {
                                        sb.Append("<tr class=\"tr1\">");
                                    }
                                    sb.Append("<td >" + intCnt + "</td>");
                                    sb.Append("<td>" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                    sb.Append("<td >" + strFromMail + "</td>");
                                    sb.Append("<td >" + strArrayAddTomail[i].ToString() + "</td>");
                                  
                                    sb.Append("<td >TO</td>");
                                    sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayAddTomail[i].ToString() + "','TO'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                    sb.Append("</tr>");
                                    intCnt++;
                                }
                            }

                            if (dtAdditnlmail.Rows[0]["BCKCC_MAIL"].ToString() != "")
                            {
                                string strAddCcmail = dtAdditnlmail.Rows[0]["BCKCC_MAIL"].ToString();
                                string[] strArrayCCMails = strAddCcmail.Split(',');
                                for (int i = 0; i < strArrayCCMails.Length; i++)
                                {
                                    if (intCnt % 2 == 0)
                                    {
                                        sb.Append("<tr >");
                                    }
                                    else
                                    {
                                        sb.Append("<tr class=\"tr1\">");
                                    }
                                    sb.Append("<td >" + intCnt + "</td>");
                                    sb.Append("<td >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                    sb.Append("<td >" + strFromMail + "</td>");
                                    sb.Append("<td >" + strArrayCCMails[i].ToString() + "</td>");
                                   
                                    sb.Append("<td >CC</td>");


                                    sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayCCMails[i].ToString() + "','CC'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                    sb.Append("</tr>");
                                    intCnt++;
                                }
                            }

                            if (dtAdditnlmail.Rows[0]["BCKBCC_MAIL"].ToString() != "")
                            {
                                string strAddBccmail = dtAdditnlmail.Rows[0]["BCKBCC_MAIL"].ToString();
                                string[] strArrayBCCMails = strAddBccmail.Split(',');
                                for (int i = 0; i < strArrayBCCMails.Length; i++)
                                {
                                    if (intCnt % 2 == 0)
                                    {
                                        sb.Append("<tr >");
                                    }
                                    else
                                    {
                                        sb.Append("<tr class=\"tr1\">");
                                    }
                                    sb.Append("<td >" + intCnt + "</td>");
                                    sb.Append("<td >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                    sb.Append("<td >" + strFromMail + "</td>");
                                    sb.Append("<td >" + strArrayBCCMails[i].ToString() + "</td>");
                                   
                                    sb.Append("<td >BCC</td>");


                                    sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayBCCMails[i].ToString() + "','BCC'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                    sb.Append("</tr>");
                                    intCnt++;
                                }
                            }
                        }
                        else
                        {
                            if (dt.Rows[0]["TO_MAIL"].ToString() != "")
                            {
                                if (intCnt % 2 == 0)
                                {
                                    sb.Append("<tr >");
                                }
                                else
                                {
                                    sb.Append("<tr class=\"tr1\">");
                                }
                                sb.Append("<td >" + intCnt + "</td>");
                                sb.Append("<td >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                sb.Append("<td >" + strFromMail + "</td>");
                                sb.Append("<td >" + dt.Rows[0]["TO_MAIL"].ToString() + "</td>");
                               
                                sb.Append("<td >To</td>");

                                sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + dt.Rows[0]["TO_MAIL"].ToString() + "','TO'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                               
                                sb.Append("</tr>");
                                intCnt++;

                            }
                        }


                    }

                }
            }
            else if (strToMail != "")
            {
                if (intCurrentSts == 0)
                {
                    if (intCnt % 2 == 0)
                    {
                        sb.Append("<tr >");
                    }
                    else
                    {
                        sb.Append("<tr class=\"tr1\">");
                    }
                    sb.Append("<td >" + intCnt + "</td>");
                    sb.Append("<td >" + strCurrRef + "</td>");
                    sb.Append("<td >" + strFromMail + "</td>");
                    sb.Append("<td >" + strToMail + "</td>");
                   
                    sb.Append("<td >TO</td>");


                    sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + strToMail + "','TO'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                    sb.Append("</tr>");
                    intCnt++;



                    foreach (DataRow row in dtToMail2.Rows)
                    {
                        if (row["LDCNT_MAIL_ALWD"].ToString() == "1")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            if (row["LDCNT_EMAIL"].ToString() != "")
                            {
                                if (intCnt % 2 == 0)
                                {
                                    sb.Append("<tr >");
                                }
                                else
                                {
                                    sb.Append("<tr class=\"tr1\">");
                                }
                                sb.Append("<td >" + intCnt + "</td>");
                                sb.Append("<td >" + strCurrRef + "</td>");
                                sb.Append("<td >" + strFromMail + "</td>");
                                sb.Append("<td >" + row["LDCNT_EMAIL"].ToString() + "</td>");
                               
                                sb.Append("<td >CC</td>");


                                sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + row["LDCNT_EMAIL"].ToString() + "','CC'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                sb.Append("</tr>");
                                intCnt++;
                            }

                        }

                    }
                }
                if (dtRvsdQtnList.Rows.Count > 0)
                {
                    for (int intRowCount = 0; intRowCount < dtRvsdQtnList.Rows.Count; intRowCount++)
                    {
                        objEntityQuotation.BckupId = Convert.ToInt32(dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"]);
                        DataTable dtAdditnlmail = new DataTable();
                        dtAdditnlmail = objBusinessLayerQuotation.ReadQuotationAddtnMailBckup(objEntityQuotation);
                        if (dtAdditnlmail.Rows.Count > 0)
                        {
                            if (dtAdditnlmail.Rows[0]["BCKTO_MAIL"].ToString() != "")
                            {
                                string strAddTomail = dtAdditnlmail.Rows[0]["BCKTO_MAIL"].ToString();
                                string[] strArrayAddTomail = strAddTomail.Split(',');
                                for (int i = 0; i < strArrayAddTomail.Length; i++)
                                {
                                    if (strArrayAddTomail[i].ToString() != "")
                                    {
                                        if (intCnt % 2 == 0)
                                        {
                                            sb.Append("<tr >");
                                        }
                                        else
                                        {
                                            sb.Append("<tr class=\"tr1\">");
                                        }
                                        sb.Append("<td >" + intCnt + "</td>");
                                        sb.Append("<td >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                        sb.Append("<td >" + strFromMail + "</td>");
                                        sb.Append("<td >" + strArrayAddTomail[i].ToString() + "</td>");
                                       
                                        sb.Append("<td >TO</td>");


                                        sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayAddTomail[i].ToString() + "','TO'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                        sb.Append("</tr>");
                                        intCnt++;
                                    }
                                }
                            }

                            if (dtAdditnlmail.Rows[0]["BCKCC_MAIL"].ToString() != "")
                            {
                                string strAddCcmail = dtAdditnlmail.Rows[0]["BCKCC_MAIL"].ToString();
                                string[] strArrayCCMails = strAddCcmail.Split(',');
                                for (int i = 0; i < strArrayCCMails.Length; i++)
                                {
                                    if (strArrayCCMails[i].ToString() != "")
                                    {
                                        if (intCnt % 2 == 0)
                                        {
                                            sb.Append("<tr >");
                                        }
                                        else
                                        {
                                            sb.Append("<tr class=\"tr1\">");
                                        }
                                        sb.Append("<td >" + intCnt + "</td>");
                                        sb.Append("<td >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                        sb.Append("<td >" + strFromMail + "</td>");
                                        sb.Append("<td >" + strArrayCCMails[i].ToString() + "</td>");
                                      
                                        sb.Append("<td >CC</td>");


                                        sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayCCMails[i].ToString() + "','CC'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                        sb.Append("</tr>");
                                        intCnt++;
                                    }
                                }
                            }

                            if (dtAdditnlmail.Rows[0]["BCKBCC_MAIL"].ToString() != "")
                            {
                                string strAddBccmail = dtAdditnlmail.Rows[0]["BCKBCC_MAIL"].ToString();
                                string[] strArrayBCCMails = strAddBccmail.Split(',');
                                for (int i = 0; i < strArrayBCCMails.Length; i++)
                                {
                                    if (strArrayBCCMails[i].ToString() != "")
                                    {
                                        if (intCnt % 2 == 0)
                                        {
                                            sb.Append("<tr >");
                                        }
                                        else
                                        {
                                            sb.Append("<tr class=\"tr1\">");
                                        }
                                        sb.Append("<td >" + intCnt + "</td>");
                                        sb.Append("<td >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                        sb.Append("<td >" + strFromMail + "</td>");
                                        sb.Append("<td >" + strArrayBCCMails[i].ToString() + "</td>");
                                      
                                        sb.Append("<td >BCC</td>");


                                        sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayBCCMails[i].ToString() + "','BCC'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                        sb.Append("</tr>");
                                        intCnt++;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["TO_MAIL"].ToString() != "")
                                {
                                    if (intCnt % 2 == 0)
                                    {
                                        sb.Append("<tr >");
                                    }
                                    else
                                    {
                                        sb.Append("<tr class=\"tr1\">");
                                    }
                                    sb.Append("<td >" + intCnt + "</td>");
                                    sb.Append("<td >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                    sb.Append("<td >" + strFromMail + "</td>");
                                    sb.Append("<td >" + dt.Rows[0]["TO_MAIL"].ToString() + "</td>");
                                   
                                    sb.Append("<td >To</td>");
                                    sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + dt.Rows[0]["TO_MAIL"].ToString() + "','TO'," + strId + ");\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                    sb.Append("</tr>");
                                    intCnt++;

                                }
                            }
                        }


                    }
                }
            }
            else
            {
                sb.Append("<tr>");
                sb.Append("<td  colspan='6'> No Data Available</td>");
                sb.Append("</tr>");
            }


        }




        return sb.ToString(); ;
    }
    protected void btnReSendMailQtn_Click(object sender, EventArgs e)
    {
        string lblCustName = "", lblTitle = "";
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl12 = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead12 = new clsEntityLeadCreation();
        objEntityLead12.LeadId = Convert.ToInt32(hiddenLeadId.Value);
        DataTable dtReadList = new DataTable();
        dtReadList = objBusinessLeadIndvl12.Read_Indvidual_Lead_List(objEntityLead12);
        if (dtReadList.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
        {
            lblCustName = dtReadList.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtReadList.Rows[0]["LEADS_CSTMR_NAME"].ToString();
        }
        else
        {
            lblCustName = dtReadList.Rows[0]["LEADS_CSTMR_NAME"].ToString();
        }
        lblTitle = dtReadList.Rows[0]["LEADS_TITLE"].ToString();




        clsBusinessLayerLeadIndividual objBusinessLeadIndvl1 = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead1 = new clsEntityLeadCreation();
        objEntityLead1.LeadId = Convert.ToInt32(hiddenLeadId.Value);
        objEntityLead1.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
        DataTable dtQtn = objBusinessLeadIndvl1.Read_Indvidual_Lead_Qtan(objEntityLead1);
        hiddenQtnTmpltId.Value = dtQtn.Rows[0]["QTN_TMPLT_ID"].ToString();



        LoadDataForSendingMail();
        LeadDetails(hiddenLeadId.Value);

        if (hiddenQtnTmpltId.Value == "1")
        {
            //from Cmpzt_Quotation
            // protected void btnReSendMail_Click(object sender, EventArgs e)

            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

            if (hiddenLeadId.Value != "" && (hiddenQuotationID.Value != "") && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
            {
                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);


                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));

                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;
                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                int intLeadStatus = 0;
                if (dtLeadStatus.Rows.Count > 0)
                {
                    intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
                }
                if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered))
                {
                    Response.Redirect("~/Default.aspx");
                }

                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();


                objEntityLead.LeadId = objEntityQuotation.Lead_Id;

                objEntityLead.User_Id = intUserId;
                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);
                DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
                {

                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "Enquiry - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                    clsEntityCommon objEntityCommon = new clsEntityCommon();
                    objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                    objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                    objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                    DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);

                    string StrMailContent = "Dear " + lblCustName + " ," + Environment.NewLine + Environment.NewLine;

                    if (lblTitle == "")
                    {
                        StrMailContent = StrMailContent + "Please find attached Quotation " + Environment.NewLine + Environment.NewLine;
                    }
                    else
                    {
                        StrMailContent = StrMailContent + "Please find attached Quotation for " + lblTitle + Environment.NewLine + Environment.NewLine;
                    }
                    StrMailContent = StrMailContent + "Quotation Reference Number: " + hiddenRefNo.Value + Environment.NewLine + Environment.NewLine;
                    if (dtMailContent.Rows.Count > 0)
                    {

                        objEntityMail.Email_Content = StrMailContent + dtMailContent.Rows[0]["CMTMPLT_MESSAGE"].ToString() + Environment.NewLine;

                    }
                    else
                    {
                        objEntityMail.Email_Content = StrMailContent + "" + Environment.NewLine;
                    }
                    if (hiddenResendQtnMailType.Value == "TO")
                    {
                        objEntityMail.To_Email_Address = hiddenResendQtnMailID.Value;
                    }
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.User_Id = objEntityLead.User_Id;
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;



                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();


                    int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
                    if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
                    {
                        PdfGeneration();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
                    {
                        PdfAdvancedGeneration();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
                    {
                        PdfCorporateAdvancedGeneration();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
                    {
                        PdfTermsToLastCorporateAdvancedGeneration();
                    }
                    clsCommonLibrary objComm = new clsCommonLibrary();
                    string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                    string strFileName = "Enquiry-" + objEntityQuotation.Lead_Id + "_Quotation.pdf";
                    string strFileLocation = strFilePath + strFileName;
                    if (File.Exists(Server.MapPath(strFileLocation)))
                    {
                        clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();
                        objEntityAttach.Email_Real_Name = strFileName;
                        objEntityAttach.Email_File_Name = strFileName;
                        objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                        objEntityMailAttachList.Add(objEntityAttach);
                    }

                    //for sending additional files
                    int intQid = Convert.ToInt32(hiddenQuotationID.Value);
                    objEntityLead.Quotation_Id = intQid;
                    objEntityLead.QtnFile_Type = 1;
                    DataTable dtQtnAtchmntDtl = new DataTable();
                    dtQtnAtchmntDtl = objBusinessLayerIndividual.ReadQuotationAttchmnt(objEntityLead);
                    string strFilePathAddtn = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                    if (dtQtnAtchmntDtl.Rows.Count > 0)
                    {
                        for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                        {
                            string strFileNameAddtn = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                            string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                            string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                            string MailSndSts = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ATCH_MAIL_STS"].ToString();
                            string strFileLocationAddtnl = strFilePathAddtn + strFileNameAddtn;
                            if (MailSndSts.ToString() == "1")
                            {
                                clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                                objEntityAttach.Email_Real_Name = strActualFileName;
                                objEntityAttach.Email_File_Name = strFileNameAddtn;
                                objEntityAttach.Attch_Path = Server.MapPath(strFileLocationAddtnl);
                                objEntityMailAttachList.Add(objEntityAttach);
                            }
                        }
                    }

                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                    if (hiddenResendQtnMailType.Value == "CC")
                    {
                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        objEntityMailCcBCc.CcMail = hiddenResendQtnMailID.Value;
                        objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                    }
                    else if (hiddenResendQtnMailType.Value == "BCC")
                    {
                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        objEntityMailCcBCc.BCcMail = hiddenResendQtnMailID.Value;
                        objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                    }

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                        objEntityQuotation.MailStatus = 1;
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessMail", "SuccessMail();", true);
                    }
                    catch (Exception ex)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessMail", "UnSuccessMail();", true);
                        objEntityQuotation.MailStatus = 0;
                    }
                }
                else
                {
                    objEntityQuotation.MailStatus = 0;
                }

                if (objEntityQuotation.MailStatus == 0)
                {

                }
                else
                {
                    objBusinessLayerQuotation.ReSendMailQuotation(objEntityQuotation);
                }
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }

        }
        else if (hiddenQtnTmpltId.Value == "2" || hiddenQtnTmpltId.Value == "3")
        {


            clsCommonLibrary objCommon = new clsCommonLibrary();
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

            // if (Request.QueryString["LeadId"] != null && (hiddenQuotationID.Value != "") && Request.QueryString["QTN_TMPLT"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
            if (hiddenLeadId.Value != "" && (hiddenQuotationID.Value != "") && hiddenQtnTmpltId.Value != "" && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
            {
                int intQuotationTemplateTypeId = Convert.ToInt32(hiddenQtnTmpltId.Value);
                //Convert.ToInt32(Request.QueryString["QTN_TMPLT"].ToString());
                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);


                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));


                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;

                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                int intLeadStatus = 0;
                if (dtLeadStatus.Rows.Count > 0)
                {
                    intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
                }
                if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered))
                {
                    Response.Redirect("~/Default.aspx");
                }


                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();


                objEntityLead.LeadId = objEntityQuotation.Lead_Id;



                objEntityLead.User_Id = intUserId;


                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);

                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);
                DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
                {

                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "Enquiry - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                    clsEntityCommon objEntityCommon = new clsEntityCommon();
                    objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                    objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                    objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                    DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);

                    string StrMailContent = "Dear " + lblCustName + " ," + Environment.NewLine + Environment.NewLine;

                    if (lblTitle == "")
                    {
                        StrMailContent = StrMailContent + "Please find attached Quotation " + Environment.NewLine + Environment.NewLine;
                    }
                    else
                    {
                        StrMailContent = StrMailContent + "Please find attached Quotation for " + lblTitle + Environment.NewLine + Environment.NewLine;
                    }
                    StrMailContent = StrMailContent + "Quotation Reference Number: " + hiddenRefNo.Value + Environment.NewLine + Environment.NewLine;
                    if (dtMailContent.Rows.Count > 0)
                    {

                        objEntityMail.Email_Content = StrMailContent + dtMailContent.Rows[0]["CMTMPLT_MESSAGE"].ToString() + Environment.NewLine;

                    }
                    else
                    {
                        objEntityMail.Email_Content = StrMailContent + "" + Environment.NewLine;
                    }
                    if (hiddenResendQtnMailType.Value == "TO")
                    {
                        //objEntityMail.To_Email_Address = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();
                        objEntityMail.To_Email_Address = hiddenResendQtnMailID.Value;
                    }
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.User_Id = objEntityLead.User_Id;
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;



                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();

                    int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
                    if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
                    {
                        PdfGeneration2();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
                    {
                        PdfAdvancedGeneration2();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
                    {
                        PdfCorporateAdvancedGeneration2();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
                    {
                        PdfTermsToLastCorporateAdvancedGeneration2();
                    }

                    clsCommonLibrary objComm = new clsCommonLibrary();
                    string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                    string strFileName = "Enquiry-" + objEntityQuotation.Lead_Id + "_Quotation.pdf";
                    string strFileLocation = strFilePath + strFileName;
                    if (File.Exists(Server.MapPath(strFileLocation)))
                    {
                        clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                        objEntityAttach.Email_Real_Name = strFileName;
                        objEntityAttach.Email_File_Name = strFileName;
                        objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                        objEntityMailAttachList.Add(objEntityAttach);
                    }
                    if (hiddenQtnTmpltId.Value != "")
                    {


                        int intQuotationTemplateType = Convert.ToInt32(hiddenQtnTmpltId.Value);
                        if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                        {
                            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                            clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                            objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                            objEntityLeadCre.QtnFile_Type = 3;
                            DataTable dtQtnAttchmnt = new DataTable();
                            dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);

                            for (int intAtchCount = 0; intAtchCount < dtQtnAttchmnt.Rows.Count; intAtchCount++)
                            {
                                clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();
                                string strFilePathAttach = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                                string strFileNameAttach = dtQtnAttchmnt.Rows[intAtchCount]["QTFLS_FILENAME"].ToString();
                                string strRealFileNameAttach = dtQtnAttchmnt.Rows[intAtchCount]["QTFLS_FLNM_ACT"].ToString();
                                string strFileLocationAttach = strFilePathAttach + strFileNameAttach;
                                if (File.Exists(Server.MapPath(strFileLocationAttach)))
                                {
                                    objEntityAttach.Email_Real_Name = strRealFileNameAttach;
                                    objEntityAttach.Email_File_Name = strFileNameAttach;
                                    objEntityAttach.Attch_Path = Server.MapPath(strFileLocationAttach);
                                    objEntityMailAttachList.Add(objEntityAttach);
                                }

                            }


                        }
                    }


                    //for sending additional files
                    int intQid = Convert.ToInt32(hiddenQuotationID.Value);
                    objEntityLead.Quotation_Id = intQid;
                    objEntityLead.QtnFile_Type = 1;
                    DataTable dtQtnAtchmntDtl = new DataTable();
                    dtQtnAtchmntDtl = objBusinessLayerIndividual.ReadQuotationAttchmnt(objEntityLead);
                    string strFilePathAddtn = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                    if (dtQtnAtchmntDtl.Rows.Count > 0)
                    {
                        for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                        {
                            string strFileNameAddtn = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                            string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                            string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                            string MailSndSts = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ATCH_MAIL_STS"].ToString();
                            string strFileLocationAddtnl = strFilePathAddtn + strFileNameAddtn;
                            if (MailSndSts.ToString() == "1")
                            {
                                clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                                objEntityAttach.Email_Real_Name = strActualFileName;
                                objEntityAttach.Email_File_Name = strFileNameAddtn;
                                objEntityAttach.Attch_Path = Server.MapPath(strFileLocationAddtnl);
                                objEntityMailAttachList.Add(objEntityAttach);
                            }
                        }
                    }
                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();
                    //EVM0012 Fix no countcheck

                    if (hiddenResendQtnMailType.Value == "To")
                    {

                    }
                    else if (hiddenResendQtnMailType.Value == "CC")
                    {

                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        objEntityMailCcBCc.CcMail = hiddenResendQtnMailID.Value;
                        objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                    }
                    else if (hiddenResendQtnMailType.Value == "BCC")
                    {
                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        objEntityMailCcBCc.BCcMail = hiddenResendQtnMailID.Value;
                        objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                    }

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessMail", "SuccessMail();", true);
                        objEntityQuotation.MailStatus = 1;
                    }
                    catch
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessMail", "UnSuccessMail();", true);
                        objEntityQuotation.MailStatus = 0;
                    }
                }
                else
                {

                    objEntityQuotation.MailStatus = 0;
                }


            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }
        }
    }
    protected void btnReSendMailQtn_BackUp_Click(object sender, EventArgs e)
    {

        clsBusinessLayerLeadIndividual objBusinessLeadIndvl1 = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead1 = new clsEntityLeadCreation();
        objEntityLead1.LeadId = Convert.ToInt32(hiddenLeadId.Value);
        objEntityLead1.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
        DataTable dtQtn = objBusinessLeadIndvl1.Read_Indvidual_Lead_Qtan(objEntityLead1);
        hiddenQtnTmpltId.Value = dtQtn.Rows[0]["QTN_TMPLT_ID"].ToString();


        DataTable dtQuotationMailBckup = new DataTable();
        DataTable dtQuotationMailAttchmntBckup = new DataTable();

        if (hiddenResendQtnMailID.Value != "" && hiddenResendQtnMailType.Value != "" && hiddenQtnBackupID.Value != "")
        {
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();

            objEntityQuotation.BckupId = Convert.ToInt32(hiddenQtnBackupID.Value);
            dtQuotationMailBckup = objBusinessLayerQuotation.ReadQuotationMailBckup(objEntityQuotation);
            dtQuotationMailAttchmntBckup = objBusinessLayerQuotation.ReadQuotationMailAttachmntBckup(objEntityQuotation);
        }
        if (dtQuotationMailBckup.Rows.Count > 0)
        {
            LoadDataForSendingMail();
            LeadDetails(hiddenLeadId.Value);

            if (hiddenQtnTmpltId.Value == "1")
            {
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

                if (hiddenLeadId.Value != "" && (hiddenQuotationID.Value != "") && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
                {
                    objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);


                    objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));

                    int intUserId = 0;
                    if (hiddenCorporateId.Value == "")
                    {
                        if (Session["CORPOFFICEID"] != null)
                        {
                            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                        }
                        else if (Session["CORPOFFICEID"] == null)
                        {
                            Response.Redirect("~/Default.aspx");
                        }
                    }
                    else
                    {

                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                    }
                    if (hiddenOrganisationId.Value == "")
                    {
                        if (Session["ORGID"] != null)
                        {
                            objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                        }
                        else if (Session["ORGID"] == null)
                        {
                            Response.Redirect("/Default.aspx");
                        }
                    }
                    else
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                    }
                    if (Session["USERID"] != null)
                    {
                        intUserId = Convert.ToInt32(Session["USERID"]);

                    }
                    else if (Session["USERID"] == null)
                    {
                        Response.Redirect("/Default.aspx");
                    }
                    objEntityQuotation.User_Id = intUserId;
                    objEntityQuotation.D_Date = System.DateTime.Now;
                    string strId = hiddenLeadId.Value;
                    objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                    clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                    objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                    clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                    DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                    int intLeadStatus = 0;
                    if (dtLeadStatus.Rows.Count > 0)
                    {
                        intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
                    }
                    clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                    clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();


                    objEntityLead.LeadId = objEntityQuotation.Lead_Id;

                    objEntityLead.User_Id = intUserId;
                    objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                    DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                    DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);
                    DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                    if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
                    {

                        clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                        objEntityMail.Email_Subject = "Enquiry - ";
                        objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                        clsEntityCommon objEntityCommon = new clsEntityCommon();
                        objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                        objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                        objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                        DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);


                        if (hiddenResendQtnMailType.Value == "TO")
                        {
                            //objEntityMail.To_Email_Address = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();
                            objEntityMail.To_Email_Address = hiddenResendQtnMailID.Value;
                        }
                        objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                        objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                        objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                        objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                        objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                        objEntityMail.User_Id = objEntityLead.User_Id;
                        objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                        objEntityMail.Email_Content = dtQuotationMailBckup.Rows[0]["QUOT_ML_BKP_CONTENT"].ToString() + objEntityMail.Signature;

                        objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                        objEntityMail.D_Date = System.DateTime.Now;

                        List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();


                        if (dtQuotationMailAttchmntBckup.Rows.Count > 0)
                        {
                            foreach (DataRow Dr in dtQuotationMailAttchmntBckup.Rows)
                            {
                                clsCommonLibrary objComm = new clsCommonLibrary();
                                string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_MAIL_ATTCH_BKP);
                                string strRealFileName = Dr["LDMAILATT_FLNM_ACT"].ToString();
                                string strFileName = Dr["LDMAILATT_FILENAME"].ToString();

                                string strFileLocation = strFilePath + strFileName;
                                if (File.Exists(Server.MapPath(strFileLocation)))
                                {
                                    clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                                    objEntityAttach.Email_Real_Name = strRealFileName;
                                    objEntityAttach.Email_File_Name = strFileName;
                                    objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                                    objEntityMailAttachList.Add(objEntityAttach);
                                }
                            }
                        }
                        List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                        List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                        if (hiddenResendQtnMailType.Value == "To")
                        {
                            classEntityToMailAddress objEntityToMailAddress = new classEntityToMailAddress();
                            objEntityToMailAddress.ToAddress = hiddenResendQtnMailID.Value;
                        }
                        else if (hiddenResendQtnMailType.Value == "CC")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.CcMail = hiddenResendQtnMailID.Value;
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }
                        else if (hiddenResendQtnMailType.Value == "BCC")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.BCcMail = hiddenResendQtnMailID.Value;
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }

                        try
                        {
                            MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                            objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessMail", "SuccessMail();", true);
                        }
                        catch
                        {

                            ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessMail", "UnSuccessMail();", true);
                            objEntityQuotation.MailStatus = 0;
                        }
                    }

                }
                else
                {

                    Response.Redirect("~/Default.aspx");

                }

            }
            else if (hiddenQtnTmpltId.Value == "2" || hiddenQtnTmpltId.Value == "3")
            {


                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                if (hiddenLeadId.Value != "" && (hiddenQuotationID.Value != "") && hiddenQtnTmpltId.Value != "" && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
                {
                    int intQuotationTemplateTypeId = Convert.ToInt32(hiddenQtnTmpltId.Value);
                    objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);
                    objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));
                    int intUserId = 0;
                    if (hiddenCorporateId.Value == "")
                    {
                        if (Session["CORPOFFICEID"] != null)
                        {
                            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                        }
                        else if (Session["CORPOFFICEID"] == null)
                        {
                            Response.Redirect("~/Default.aspx");
                        }
                    }
                    else
                    {

                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                    }
                    if (hiddenOrganisationId.Value == "")
                    {
                        if (Session["ORGID"] != null)
                        {
                            objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                        }
                        else if (Session["ORGID"] == null)
                        {
                            Response.Redirect("~/Default.aspx");
                        }
                    }
                    else
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                    }
                    if (Session["USERID"] != null)
                    {
                        intUserId = Convert.ToInt32(Session["USERID"]);

                    }
                    else if (Session["USERID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                    objEntityQuotation.User_Id = intUserId;
                    objEntityQuotation.D_Date = System.DateTime.Now;
                    string strId = hiddenLeadId.Value;
                    objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                    clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                    objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                    clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                    DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                    int intLeadStatus = 0;
                    if (dtLeadStatus.Rows.Count > 0)
                    {
                        intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
                    }

                    clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                    clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
                    objEntityLead.LeadId = objEntityQuotation.Lead_Id;
                    objEntityLead.User_Id = intUserId;
                    objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);

                    DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                    DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);
                    DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                    if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
                    {

                        clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                        objEntityMail.Email_Subject = "Enquiry - ";
                        objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                        clsEntityCommon objEntityCommon = new clsEntityCommon();
                        objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                        objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                        objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                        DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);
                        if (hiddenResendQtnMailType.Value == "TO")
                        {
                            objEntityMail.To_Email_Address = hiddenResendQtnMailID.Value;
                        }
                        objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                        objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                        objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                        objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                        objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                        objEntityMail.User_Id = objEntityLead.User_Id;
                        objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                        objEntityMail.Email_Content = dtQuotationMailBckup.Rows[0]["QUOT_ML_BKP_CONTENT"].ToString() + objEntityMail.Signature;

                        objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                        objEntityMail.D_Date = System.DateTime.Now;
                        List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();

                        int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
                        if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
                        {
                            PdfGeneration2();
                        }
                        else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
                        {
                            PdfAdvancedGeneration2();
                        }
                        else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
                        {
                            PdfCorporateAdvancedGeneration2();
                        }
                        else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
                        {
                            PdfTermsToLastCorporateAdvancedGeneration2();
                        }



                        if (dtQuotationMailAttchmntBckup.Rows.Count > 0)
                        {
                            foreach (DataRow Dr in dtQuotationMailAttchmntBckup.Rows)
                            {
                                clsCommonLibrary objComm = new clsCommonLibrary();
                                string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_MAIL_ATTCH_BKP);
                                string strRealFileName = Dr["LDMAILATT_FLNM_ACT"].ToString();
                                string strFileName = Dr["LDMAILATT_FILENAME"].ToString();

                                string strFileLocation = strFilePath + strFileName;
                                if (File.Exists(Server.MapPath(strFileLocation)))
                                {
                                    clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                                    objEntityAttach.Email_Real_Name = strRealFileName;
                                    objEntityAttach.Email_File_Name = strFileName;
                                    objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                                    objEntityMailAttachList.Add(objEntityAttach);
                                }
                            }
                        }


                        List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                        List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                        if (hiddenResendQtnMailType.Value == "To")
                        {

                        }
                        else if (hiddenResendQtnMailType.Value == "CC")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.CcMail = hiddenResendQtnMailID.Value;
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }
                        else if (hiddenResendQtnMailType.Value == "BCC")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.BCcMail = hiddenResendQtnMailID.Value;
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }

                        try
                        {
                            MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                            objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                            objEntityQuotation.MailStatus = 1;
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessMail", "SuccessMail();", true);
                        }
                        catch
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessMail", "UnSuccessMail();", true);
                            objEntityQuotation.MailStatus = 0;
                        }
                    }

                }
                else
                {

                    Response.Redirect("~/Default.aspx");

                }
            }

        }



    }
    public void LoadDataForSendingMail()
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

        clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
        clsCommonLibrary objCommon = new clsCommonLibrary();
        int intCorpId = 0;
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                intCorpId = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            intCorpId = Convert.ToInt32(hiddenCorporateId.Value);
        }
        //clsEntityCommon objEntityCommon = new clsEntityCommon();
        objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
        DataTable dtLead = new DataTable();
        dtLead = objBusinessLayerQuotation.ReadLeadDtlForDisplay(objEntityQuotation);
        if (dtLead.Rows.Count > 0)
        {
            hiddenCorporateDivId.Value = dtLead.Rows[0]["CPRDIV_ID"].ToString();
        }
        clsCommonLibrary.CORP_GLOBAL[] arrEnumer = {  clsCommonLibrary.CORP_GLOBAL.CNCL_REASN_MUST,
                                                               clsCommonLibrary.CORP_GLOBAL.CMN_PERCENT_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.TAX_PERC_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_MNEY_DECIMAL_CNT,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_UNIT_DECIMAL_CNT,
                                                                clsCommonLibrary.CORP_GLOBAL.DEFLT_CURNCY_MST_ID,
                                                                  clsCommonLibrary.CORP_GLOBAL.GN_TAX_ENABLED,
                                                                    clsCommonLibrary.CORP_GLOBAL.DFLT_QTNFRMT_ID,
                                                                     clsCommonLibrary.CORP_GLOBAL.DFLT_CURNCY_DISPLAY
                                                              };
        DataTable dtCorpDetail = new DataTable();
        dtCorpDetail = objBusinessLayer.LoadGlobalDetail(arrEnumer, intCorpId);
        if (dtCorpDetail.Rows.Count > 0)
        {

            hiddenFloatingValueMoney.Value = dtCorpDetail.Rows[0]["GN_MNEY_DECIMAL_CNT"].ToString();
            hiddenFloatingValueTaxPercentage.Value = dtCorpDetail.Rows[0]["TAX_PERC_DECIMAL"].ToString();
            hiddenFloatingValueUnit.Value = dtCorpDetail.Rows[0]["GN_UNIT_DECIMAL_CNT"].ToString(); ;
            hiddenTaxEnabled.Value = dtCorpDetail.Rows[0]["GN_TAX_ENABLED"].ToString();
            hiddenFloatingValueCommonPercentage.Value = dtCorpDetail.Rows[0]["CMN_PERCENT_DECIMAL"].ToString();
            hiddenDfltCurrencyMstrId.Value = dtCorpDetail.Rows[0]["DEFLT_CURNCY_MST_ID"].ToString();
            hiddenDfltQuotationFormatId.Value = dtCorpDetail.Rows[0]["DFLT_QTNFRMT_ID"].ToString();
            hiddenDfltCurrencyDisplay.Value = dtCorpDetail.Rows[0]["DFLT_CURNCY_DISPLAY"].ToString();
        }

        clsEntityCommon objEntityCommon = new clsEntityCommon();
        // cliebt side number format
        objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
        DataTable dtCurrencyDetail = new DataTable();
        dtCurrencyDetail = objBusinessLayer.ReadCurrencyDetails(objEntityCommon);
        if (dtCurrencyDetail.Rows.Count > 0)
        {
            hiddenCurrencyModeId.Value = dtCurrencyDetail.Rows[0]["CRNCYMD_ID"].ToString();
            hiddenCurrencySymbol.Value = dtCurrencyDetail.Rows[0]["CRNCMST_SYMBOL"].ToString();
            hiddenCurrencyCode.Value = dtCurrencyDetail.Rows[0]["CRNCMST_ABBRV"].ToString();
        }
    }
    public void LeadDetails(string strLeadId)
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (strLeadId != "" && strLeadId != null)
        {
            objEntityQuotation.Lead_Id = Convert.ToInt32(strLeadId);
        }
        DataTable dtLead = new DataTable();
        dtLead = objBusinessLayerQuotation.ReadLeadDtlForDisplay(objEntityQuotation);
        int intLeadStatus = 0;
        // for RE-OPEN PROVISION TO BE ALLOCATED FOR TEAM HEAD
        int intTeamHeadId = 0;
        if (dtLead.Rows.Count > 0)
        {
            if (dtLead.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
            {
                //  lblCustomerName.Text = dtLead.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtLead.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }
            else
            {
                //lblCustomerName.Text = dtLead.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }

            intLeadStatus = Convert.ToInt32(dtLead.Rows[0]["LDSTS_ID"].ToString());

            intTeamHeadId = Convert.ToInt32(dtLead.Rows[0]["TEAM_LEAD_EMP_ID"].ToString());

            hiddenDivisionCode.Value = dtLead.Rows[0]["CPRDIV_CODE"].ToString();
            hiddenUserCode.Value = dtLead.Rows[0]["USR_CODE"].ToString();
            hiddenQtnRevisionVersn.Value = dtLead.Rows[0]["LDQUOT_RVSN"].ToString();

            //lblDate.Text = dtLead.Rows[0]["LEADS_DATE"].ToString();
            //lblTitle.Text = dtLead.Rows[0]["LEADS_TITLE"].ToString();
            //lblDivision.Text = dtLead.Rows[0]["CPRDIV_NAME"].ToString();
            //CKEditorDescription.Text = dtLead.Rows[0]["LEADS_DESCRIPTION"].ToString();
            hiddenQuotationID.Value = dtLead.Rows[0]["LDQUOT_ID"].ToString();
            hiddenQtnRefSerialId.Value = dtLead.Rows[0]["LDQUOT_REF_SLN_ID"].ToString();
            //hiddenQuotationStatus.Value = dtLead.Rows[0]["LDQUOT_STS"].ToString();
            //hiddenLeadActiveUser.Value = dtLead.Rows[0]["LEADS_ACTIVE_USR_ID"].ToString();

        }
        DataTable dtMonthYear = new DataTable();
        dtMonthYear = objBusinessLayerQuotation.ReadMnthYearForRefNum(objEntityQuotation);
        if (dtMonthYear.Rows.Count > 0)
        {

            hiddenMonthMM.Value = dtMonthYear.Rows[0]["MONTH"].ToString();
            hiddenYearYYYY.Value = dtMonthYear.Rows[0]["YEAR"].ToString();
        }

    }
    private void PdfGeneration()
    {
        try
        {
            if (hiddenLeadId.Value != "")
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);


                string strRandomMixedId = hiddenLeadId.Value.ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = hiddenLeadId.Value.ToString();
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                //00088 


                string StrComments = "";



                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 10, XFontStyle.Regular);


                //00088
                XFont fontEntryAmntInWords = null;
                fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);


                //  tf.Alignment = XParagraphAlignment.Center;
                //  tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, 170, 555, pdfPage.Height.Point), XStringFormats.TopLeft);

                graph.DrawString("CUSTOMER QUOTATION", font, XBrushes.Black, new XRect(0, 170, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopCenter);

                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "corporate-logo.jpg";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 450, 60);
                    xImg.Dispose();
                }
                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();


                    //00088
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();


                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }


                int intCorpYindex = 70;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;

                if (strCorpZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCorpZipCode, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCorpYindex = intCorpYindex + 15;
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpCountry, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;







                int intCstmrYindex = 225;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 360, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REFERENCE NUMBER", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 16;


                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontTermsDtl, 280);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr2);
                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr3);
                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }

                    intCstmrYindex = intCstmrYindex + 15;
                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCstmrYindex = intCstmrYindex + 15;
                }



                //start
                yPoint = yPoint + 370;
                yLine = yLine + 365;
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                {
                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                    graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                    xImgCurrencySymbl.Dispose();
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNetAmountWithComma + " (As Per List Attached)", fontTermsDtl, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 21;
                yLine = yLine + 21;


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);



                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }
                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                string strActUserDtl = "";
                string strActMobDtl = " (Mob. " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    strActUserDtl = strActUserName + strActMobDtl;
                }
                else
                {
                    strActUserDtl = strActUserName;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(162, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 378, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 21 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 21 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 50;
                yLine = yLine + 50;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString(dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString(), fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 10;
                yLine = yLine + 10;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["DSGN_NAME"].ToString() + " ( " + dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString() + " Division )";
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "You can view the Bill of Materials in the Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Note : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint + 1, 380, pdfPage.Height.Point), XStringFormats.TopLeft);



                //stop
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;


                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("BILL OF MATERIALS", fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 253, yPoint - 18.5, 341.5, yPoint - 18.5);
                if (hiddenTaxEnabled.Value == "1")
                {
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                //column line7
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                //intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                            {
                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                            }
                            else
                            {

                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                            }
                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                            if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                            {
                                strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                            }
                            else
                            {
                                strTaxName = "";
                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                //////
                                strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                            }
                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point
                            yPoint = yPoint + 22;

                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }

                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }


                    //for toatal amount section OF TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    //00088

                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);


                }
                else
                {
                    //NO TAX

                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                    //     tf.Alignment = XParagraphAlignment.Right;
                    //    tf.DrawString("Tax", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);



                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                //intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                            {
                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                            }
                            else
                            {

                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                            }

                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                            //      tf.Alignment = XParagraphAlignment.Right;
                            //     tf.DrawString(strTaxAmount, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point
                            yPoint = yPoint + 22;


                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }

                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }
                    //for toatal amount section OF NO TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    //00088

                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }



                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";




                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                //     Process[] _proceses = null;
                //     _proceses = Process.GetProcesses();

                //foreach (Process proces in _proceses)
                //{
                //    if (proces.MainWindowTitle == pdfFilename + " - Adobe Reader")
                //    {
                //        proces.Kill();
                //        
                //    }
                //}

                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
                //  Process.Start(Server.MapPath(strImagePath) + pdfFilename);


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfAdvancedGeneration()
    {// in PdfAdvancedGeneration only choice for Currency code & currency symbol is done
        try
        {
            if (hiddenLeadId.Value  != null && hiddenLeadId.Value !="")
            {

                string lblCustName = "", lblTitle = "";
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl12 = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead12 = new clsEntityLeadCreation();
                objEntityLead12.LeadId = Convert.ToInt32(hiddenLeadId.Value);
                DataTable dtReadList = new DataTable();
                dtReadList = objBusinessLeadIndvl12.Read_Indvidual_Lead_List(objEntityLead12);
                lblTitle = dtReadList.Rows[0]["LEADS_TITLE"].ToString();



                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                DataTable dtProjectDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

              
                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);
                dtProjectDtl = objBusinessLayerQuotation.ReadProjectDtlForPDF(objEntityQuotation);

                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);

                string strProductSts = "";
                double dItmDesc = 0;
                string strItemDescription = "";
                int Printneed = 0;
                string StrComments = "";

                string strPartNumber = "";
                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strCustmrPhone = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strProject = "";
                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);

                XFont fontEntry = null;
                XFont fontEntryNetAmnt = null;
                XFont fontEntryAmntInWords = null;
                XFont fontEntryHeading = null;

                if (hiddenTaxEnabled.Value == "1")
                {
                    fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                }
                else
                {
                    fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 10, XFontStyle.Bold);

                }

                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDearSir = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 11, XFontStyle.Underline);
                XFont fontWithRef = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontProjectHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 11, XFontStyle.Regular);

                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtProjectDtl.Rows.Count > 0)
                {
                    if (dtProjectDtl.Rows[0]["PROJECT_ID"].ToString() == "")
                    {
                        strProject = dtProjectDtl.Rows[0]["LEADS_PROJECT_NAME"].ToString();

                    }
                    else
                    {
                        strProject = dtProjectDtl.Rows[0]["PROJECT_NAME"].ToString();
                    }

                }
                if (dtQtn.Rows.Count > 0)
                {
                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                    strCustmrPhone = dtCustmrDtl.Rows[0]["LEADS_MOBILE"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 180;
                yLine = yLine + 175;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REF    : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontCustmrDtl, 480);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                yPoint = yPoint + Convert.ToInt32(dCustAddr1);
                yLine = yLine + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr2);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr2);

                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr3);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr3);

                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    yPoint = yPoint + 13;
                    yLine = yLine + 13;

                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                if (strCustmrPhone != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PHONE : " + strCustmrPhone + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                yPoint = yPoint + 8;
                yLine = yLine + 8;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Dear Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 17;
                yLine = yLine + 17;

                string strSubjContent = "QUOTATION";
                if (lblTitle != "")
                {

                    strSubjContent = strSubjContent + " FOR " + lblTitle.ToUpper();

                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("SUBJECT", fontSubject, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontSubject, XBrushes.Black, new XRect(85, yPoint, 10, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                XRect xrt = new XRect(100, yPoint, 470, pdfPage.Height.Point);

                tf.DrawString(strSubjContent, fontSubject, XBrushes.Black, xrt, XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("PROJECT", fontProjectHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontSubject, XBrushes.Black, new XRect(85, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strProject, fontProjectHeading, XBrushes.Black, new XRect(100, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontWithRef, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 32;
                yLine = yLine + 32;

                //START
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;



                if (strProject != "")
                {

                    double dProject = MeasureHeight(graph, strProject, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dProject) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }



                }

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                if (dtQtnDtlGroup.Rows.Count > 0)
                {
                    foreach (DataRow dT in dtQtnDtlGroup.Rows)
                    {
                        string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                        StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                        string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();
                        tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                        if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                        {
                            if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                            {
                                XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                                xImgCurrencySymbl.Dispose();
                            }
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(StrGrpNetAmount + " (As Per  " + strAttchdBy + "  List)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }
                        else
                        { //display code
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(hiddenCurrencyCode.Value + " " + StrGrpNetAmount + " (As Per  " + strAttchdBy + " List )", fontOffer, XBrushes.Black, new XRect(160, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }

                        yPoint = yPoint + 18;
                        yLine = yLine + 18;
                    }
                }
                else
                {
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                    {
                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                            xImgCurrencySymbl.Dispose();
                        }
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmountWithComma + " (As Per List Attached)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    { //display code
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(hiddenCurrencyCode.Value + " " + strNetAmountWithComma + " (As Per List Attached)", fontOffer, XBrushes.Black, new XRect(160, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                }

                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }
                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dPayment);
                    yLine = yLine + 4 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dValidity);
                    yLine = yLine + 4 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 4 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 4 + Convert.ToInt32(dWarranty);
                }


                bool blnShrinkFormat = false;
                if (yPoint <= 570)
                {
                    blnShrinkFormat = true;
                }

                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 40;
                    yLine = yLine + 40;
                }
                //----------------footer//////////////////
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "( EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + " )";
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(171, yPoint + Convert.ToInt32(dFooterMsg) - 12.5, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 9 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 9 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strDivName = dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString();

                yPoint = yPoint + 11;
                yLine = yLine + 11;

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint + .5, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 45;
                yLine = yLine + 45;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ( " + strDivName + " Division )";
                double dTeamDtl = MeasureHeight(graph, strTeamDtl, fontNote, 380);
                if (yPoint + Convert.ToInt32(dTeamDtl) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString();
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 9;
                yLine = yLine + 9;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("MANAGER, " + strDivName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 640, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE

                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }
                else
                {
                    yPoint = yPoint + 11;
                    yLine = yLine + 11;
                }
                string strNote = "Please view the Bill Of Quantities with price in next page. As per our standard terms of sales.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(73, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;

                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();
                }
                //STOP
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                    xImgCmpnyNameBOQHeader.Dispose();
                }

                int COUNT = 0;

                if (dtQtnDtlGroup.Rows.Count > 0)
                {
                    foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                    {
                        COUNT++;

                        //for calculate total for group
                        strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                        strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                        strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                        strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                        strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                        strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                        strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);



                        if (COUNT > 1)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }

                            //NEW PAGE
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                            {
                                XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                                graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                                xImgCmpnyNameBOQHeader.Dispose();
                            }


                        }

                        string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                        tf.Alignment = XParagraphAlignment.Center;
                        tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 25, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                        graph.DrawLine(XPens.Black, 251, yPoint - 12, 344, yPoint - 12);


                        if (hiddenTaxEnabled.Value == "1")
                        {
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(280, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);


                            //column line0
                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 22);

                            //column line1
                            graph.DrawLine(XPens.Black, 190, yLine, 190, yLine + 22);

                            //column line2
                            graph.DrawLine(XPens.Black, 260, yLine, 260, yLine + 22);

                            //column line3
                            graph.DrawLine(XPens.Black, 310, yLine, 310, yLine + 22);

                            //column line4
                            graph.DrawLine(XPens.Black, 380, yLine, 380, yLine + 22);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, yLine, 435, yLine + 22);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 22);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);



                            yPoint = yPoint + 22;

                            yLine = yLine + 22;

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {

                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);


                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);

                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;


                                        }
                                        else
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22 + Convert.ToInt32(CatHeight));

                                            yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                            yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                        }



                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;


                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;
                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);
                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);
                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);
                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);
                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);
                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);




                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();

                                                        }
                                                        //intCounter++;
                                                        //row line
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 22);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, yLine, 190, yLine + 22);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, yLine, 260, yLine + 22);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, yLine, 310, yLine + 22);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, yLine, 380, yLine + 22);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, yLine, 435, yLine + 22);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 22);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);

                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        CatLineStart = yLine;
                                                    }

                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;


                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                    if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                    {
                                                        strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    else
                                                    {
                                                        strTaxName = "";
                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        //////
                                                        strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    double dItmName = 0;

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;

                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmName), 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);




                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                        }


                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine + 18);
                                        graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine + 18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;
                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);
                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);
                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);
                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);
                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);
                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();

                                                        }
                                                        //intCounter++;
                                                        //row line
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;


                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                    if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                    {
                                                        strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    else
                                                    {
                                                        strTaxName = "";
                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        //////
                                                        strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    double dItmName = 0;

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;

                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmName), 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);




                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                                        }
                                    }
                                }
                            }

                            //for toatal amount section OF TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);



                            yPoint = yPoint + 22;
                            yLine = yLine + 22;

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                            if (yPoint >= 700)
                            { //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(350, yPoint, 127, pdfPage.Height.Point), XStringFormats.TopLeft);


                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }


                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;

                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);



                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            else
                            { //display code

                                tf.Alignment = XParagraphAlignment.Right;


                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);


                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }


                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {//FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);

                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                        }
                        else
                        {
                            //NO TAX

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                            //column line1
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                            //column line2
                            graph.DrawLine(XPens.Black, 125, 65, 125, yLine + 22);

                            //column line3
                            graph.DrawLine(XPens.Black, 305, 65, 305, yLine + 22);

                            //column line4
                            graph.DrawLine(XPens.Black, 385, 65, 385, yLine + 22);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                            //column line6
                            graph.DrawLine(XPens.Black, 505, 65, 505, yLine + 22);

                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);

                            yPoint = yPoint + 22;

                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {
                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);


                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);
                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;
                                        }
                                        else
                                        { //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22 + Convert.ToInt32(CatHeight));

                                            yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                            yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                        }



                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;

                                        if (dtQtnDtl.Rows.Count > 0)
                                        {
                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;


                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 125, CatLineStart, 125, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 305, CatLineStart, 305, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 385, CatLineStart, 385, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 505, CatLineStart, 505, yLine);

                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }
                                                        // intCounter++;

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 125, 65, 125, yLine + 22);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 305, 65, 305, yLine + 22);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 385, 65, 385, yLine + 22);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 505, 65, 505, yLine + 22);

                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);

                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        CatLineStart = yLine;
                                                    }

                                                    strPartNumber = dtQtnDtl.Rows[intcnt]["PRDT_CODE"].ToString();
                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }


                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    double dItmName = MeasureHeight(graph, strItemName, fontEntry, 147);

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (strPartNumber.Length > 12)
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(0, 12), fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(12), fontEntry, XBrushes.Black, new XRect(45, yPoint + 10, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    else
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber, fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    // pdfPage.Width.Point
                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);



                                                }
                                            }
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line1
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 125, CatLineStart, 125, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 305, CatLineStart, 305, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 385, CatLineStart, 385, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 505, CatLineStart, 505, yLine);

                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);

                                        }

                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        //column line6
                                        graph.DrawLine(XPens.Black, 505, CatLineStart, 505, yLine + 18);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine + 18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {
                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;


                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }
                                                        // intCounter++;

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    strPartNumber = dtQtnDtl.Rows[intcnt]["PRDT_CODE"].ToString();
                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }


                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    double dItmName = MeasureHeight(graph, strItemName, fontEntry, 147);

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (strPartNumber.Length > 12)
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(0, 12), fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(12), fontEntry, XBrushes.Black, new XRect(45, yPoint + 10, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    else
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber, fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line1
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);



                                        }
                                    }
                                }
                            }
                            //for toatal amount section OF NO TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(365, yPoint, 130, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(320, yPoint, 175, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            else
                            { //display code
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(508, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }

                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                        }

                        yPoint = yPoint + 30;
                        yLine = yLine + 30;

                    }
                }
                else
                {
                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(280, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        if (dtQtnDtl.Rows.Count > 0)
                        {
                            for (int intcnt = 0, intSl = 1; intcnt < dtQtnDtl.Rows.Count; intcnt++, intSl++)
                            {


                                if (yPoint >= 700)
                                {
                                    //FOOTER
                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                    {
                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                        graph.DrawImage(xImgFoot, 40, 775);
                                        xImgFoot.Dispose();
                                    }
                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                    //column line1
                                    graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                    //column line2
                                    graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                    //column line3
                                    graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                    //column line4
                                    graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                    //column line5
                                    graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                    //column line6
                                    graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, 65, 575, yLine);




                                    pdfPage = pdf.AddPage();
                                    /////
                                    pdfPage.Orientation = PageOrientation.Portrait;

                                    pdfPage.Width = size.Width;
                                    pdfPage.Height = size.Height;
                                    pdfPage.TrimMargins.Top = 5;
                                    pdfPage.TrimMargins.Right = 5;
                                    pdfPage.TrimMargins.Bottom = 5;
                                    pdfPage.TrimMargins.Left = 5;

                                    ////
                                    graph.Dispose();
                                    graph = XGraphics.FromPdfPage(pdfPage);
                                    tf = new XTextFormatter(graph);
                                    yPoint = 0;
                                    yLine = 0;
                                    yPoint = yPoint + 70;
                                    yLine = yLine + 65;

                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    //COMPANY NAME
                                    intPageCount = intPageCount + 1;
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                    {
                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                        graph.DrawImage(xImgCmpnyName, 40, 25);
                                        xImgCmpnyName.Dispose();

                                    }
                                    //intCounter++;
                                    //row line
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    yPoint = yPoint + 22;

                                    yLine = yLine + 22;
                                    //row line
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                {
                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                }
                                else
                                {

                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDCT NAME"].ToString();
                                }

                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                dItmDesc = 0;


                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                {
                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                }
                                else
                                {
                                    strTaxName = "";
                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                    //////
                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                }
                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                if (strItemDescription != "")
                                {
                                    int intItemDescLength = strItemDescription.Length;

                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                MaxDescTax:
                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                    {

                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                        intItemDescLength = strItemDescription.Length;
                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                        goto MaxDescTax;


                                    }

                                }
                                double dItmName = 0;

                                tf.Alignment = XParagraphAlignment.Center;
                                tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Left;

                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmName), 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                double dItmsts = 0;
                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                if (strProductSts != "" && strProductSts != "")
                                {
                                    strProductSts = "( " + strProductSts + " )";
                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                }
                                if (Printneed == 1)
                                {
                                    if (strItemDescription != "")
                                    {
                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    }

                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                if (Printneed == 1)
                                {

                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                }
                                else
                                {
                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                }

                                //row line
                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            }
                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                            //column line1
                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                            //column line2
                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                            //column line3
                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                        }

                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;

                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);



                        yPoint = yPoint + 22;
                        yLine = yLine + 22;

                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                        if (yPoint >= 700)
                        { //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;

                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(350, yPoint, 127, pdfPage.Height.Point), XStringFormats.TopLeft);


                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line4
                        //    graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }


                        if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                        {
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);



                            if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                            {
                                XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                                xImgCurrencySymbl.Dispose();
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }
                        else
                        { //display code

                            tf.Alignment = XParagraphAlignment.Right;


                            tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);


                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }


                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                    }
                    else
                    {
                        //NO TAX
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        if (dtQtnDtl.Rows.Count > 0)
                        {
                            for (int intcnt = 0, intSl = 1; intcnt < dtQtnDtl.Rows.Count; intcnt++, intSl++)
                            {


                                if (yPoint >= 700)
                                {
                                    //FOOTER
                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                    {
                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                        graph.DrawImage(xImgFoot, 40, 775);
                                        xImgFoot.Dispose();
                                    }
                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                    //column line1
                                    graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                    //column line2
                                    graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                                    //column line3
                                    graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                                    //column line4
                                    graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                                    //column line5
                                    graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                    //column line6
                                    graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                                    pdfPage = pdf.AddPage();
                                    /////
                                    pdfPage.Orientation = PageOrientation.Portrait;

                                    pdfPage.Width = size.Width;
                                    pdfPage.Height = size.Height;
                                    pdfPage.TrimMargins.Top = 5;
                                    pdfPage.TrimMargins.Right = 5;
                                    pdfPage.TrimMargins.Bottom = 5;
                                    pdfPage.TrimMargins.Left = 5;

                                    ////
                                    graph.Dispose();
                                    graph = XGraphics.FromPdfPage(pdfPage);
                                    tf = new XTextFormatter(graph);
                                    yPoint = 0;
                                    yLine = 0;
                                    yPoint = yPoint + 70;
                                    yLine = yLine + 65;

                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    //COMPANY NAME
                                    intPageCount = intPageCount + 1;
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                    {
                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                        graph.DrawImage(xImgCmpnyName, 40, 25);
                                        xImgCmpnyName.Dispose();
                                    }

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    yPoint = yPoint + 22;

                                    yLine = yLine + 22;
                                    //row line
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }

                                strPartNumber = dtQtnDtl.Rows[intcnt]["PRDT_CODE"].ToString();
                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                {
                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                }
                                else
                                {

                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDCT NAME"].ToString();
                                }


                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                dItmDesc = 0;

                                double dItmName = MeasureHeight(graph, strItemName, fontEntry, 147);

                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                if (strItemDescription != "")
                                {
                                    int intItemDescLength = strItemDescription.Length;

                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                MaxDescTax:
                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                    {
                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                        intItemDescLength = strItemDescription.Length;
                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                        goto MaxDescTax;

                                    }

                                }

                                tf.Alignment = XParagraphAlignment.Center;
                                tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (strPartNumber.Length > 12)
                                {
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strPartNumber.Substring(0, 12), fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strPartNumber.Substring(12), fontEntry, XBrushes.Black, new XRect(45, yPoint + 10, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                }
                                else
                                {
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strPartNumber, fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                }
                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);

                                double dItmsts = 0;
                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                if (strProductSts != "" && strProductSts != "")
                                {
                                    strProductSts = "( " + strProductSts + " )";
                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                }
                                if (Printneed == 1)
                                {
                                    if (strItemDescription != "")
                                    {
                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    }

                                }
                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (Printneed == 1)
                                {

                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                }
                                else
                                {
                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                }

                                //row line
                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            }
                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                            //column line1
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                            //column line2
                            graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                            //column line3
                            graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                        }

                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(365, yPoint, 130, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(320, yPoint, 175, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                        {
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                            {
                                XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                                xImgCurrencySymbl.Dispose();
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }
                        else
                        { //display code
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(508, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }

                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                    }
                }

                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }
                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }

                }

                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    // graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";

                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);

                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();


            }
        }
        catch (Exception ex)
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfCorporateAdvancedGeneration()
    {
        try
        {
            if (hiddenLeadId.Value != null && hiddenLeadId.Value!="")
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

             
                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);

                int Printneed = 0;
                string strProductSts = "";
                string strItemDescription = "";
                double dItmDesc = 0;

                string StrComments = "";


                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);

                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {
                    if ((strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }
                }

                if (strCustmrCountry != "")
                {
                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";
                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {

                    if (yPoint >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);

                        xImgCurrencySymbl.Dispose();
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;
                }

                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }





                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "Please view the Bill Of Quantities with Price in Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;

                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();
                }
                //STOP



                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }


                int COUNT = 0;
                foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                {
                    COUNT++;
                    //for calculate total for group
                    strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);

                    if (COUNT > 1)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }

                        //NEW PAGE
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                        {
                            XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                            graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                            xImgCmpnyNameBOQHeader.Dispose();
                        }


                    }

                    string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                    tf.Alignment = XParagraphAlignment.Center;
                    tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 251, yPoint - 17.5, 344, yPoint - 17.5);
                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                        //column line0
                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);

                        //column line1
                        graph.DrawLine(XPens.Black, 190, 145, 190, yLine + 22);

                        //column line2
                        graph.DrawLine(XPens.Black, 260, 145, 260, yLine + 22);

                        //column line3
                        graph.DrawLine(XPens.Black, 310, 145, 310, yLine + 22);

                        //column line4
                        graph.DrawLine(XPens.Black, 380, 145, 380, yLine + 22);

                        //column line5
                        graph.DrawLine(XPens.Black, 435, 145, 435, yLine + 22);

                        //column line6
                        graph.DrawLine(XPens.Black, 495, 145, 495, yLine + 22);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            decimal decAmount = 0;
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint + 1.5, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));

                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }



                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);




                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    //row line
                                                    //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    CatLineStart = yLine;
                                                }


                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }

                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        //strItemDescription = "( " + strItemDescription + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);




                                    }

                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                    graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                            {

                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                }


                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }

                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                            }
                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);

                                    }
                                }

                            }
                        }

                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                        if (yPoint >= 758)
                        { //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);

                    }
                    else
                    {
                        //NO TAX
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //column line0
                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            decimal decAmount = 0;
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint + 1.5, 300, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }




                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                    int CatLineStart = yLine;

                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    // intCounter++;
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                    //row line

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    CatLineStart = yLine;
                                                }

                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }

                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                // yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);

                                                // yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                    graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                            {

                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    // intCounter++;
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                }

                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }

                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                    }
                                }
                            }
                        }
                        //for toatal amount section OF NO TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);


                    }

                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }


                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    // graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";




                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);

                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfTermsToLastCorporateAdvancedGeneration()
    {
        try
        {
            if (hiddenLeadId.Value != null && hiddenLeadId.Value!="")
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

              
                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);


                string strItemName = "";
                string strProductSts = "";
                string StrComments = "";
                int Printneed = 0;

                string strItemDescription = "";
                double dItmDesc = 0;
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxPerc = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);

                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();
                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {

                    if ((strCustmrCountry != ""))
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }


                }

                if (strCustmrCountry != "")
                {

                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";

                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);



                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);

                yPoint = yPoint + 12;
                yLine = yLine + 12;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                int COUNT = 0;
                foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                {
                    COUNT++;
                    //for calculate total for group
                    strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    if (COUNT > 1)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;
                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }

                    }

                    string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                    tf.Alignment = XParagraphAlignment.Center;
                    tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 13;
                    graph.DrawLine(XPens.Black, 251, yPoint, 344, yPoint);
                    yLine = yLine + 22;
                    int yLineStart = yPoint + 3;
                    yPoint = yPoint + 9;

                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;

                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                        //column line8
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22);
                                        yPoint = yPoint + 22;
                                        yLine = yLine + 22;
                                    }
                                    else
                                    {//column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);
                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }


                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxPerc = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    yLineStart = 145;

                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    //row line
                                                    //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    graph.DrawLine(XPens.Black, 20, 145, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, 145, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, 145, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, 145, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, 145, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, 145, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, 145, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, 145, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, 145, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                                    CatLineStart = yLine;
                                                }


                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {

                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxPerc = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;
                                                    yLineStart = 145;
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    //row line
                                                    //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    graph.DrawLine(XPens.Black, 20, 145, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, 145, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, 145, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, 145, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, 145, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, 145, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, 145, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, 145, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, 145, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                }


                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    }
                                }
                            }
                        }


                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 758)
                        { //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 517, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;


                        ///////////////////
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 550, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                    }
                    else
                    {
                        //NO TAX

                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;

                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22);
                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());

                                                dItmDesc = 0;

                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                                    yLineStart = 145;


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    CatLineStart = yLine;
                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }

                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());

                                                dItmDesc = 0;

                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                                    yLineStart = 145;


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }

                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    }
                                }
                            }
                        }
                        //for toatal amount section OF NO TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                    }
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }

                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }
                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);
                //FOOTER
                string strImageFooterLocBottomBOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottomBOQ)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottomBOQ));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();

                }
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 18, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }



                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {
                    if (yPoint >= 755)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);

                        xImgCurrencySymbl.Dispose();
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;
                }


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }





                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 65;
                yLine = yLine + 65;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    // graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomEOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomEOQ)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomEOQ));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";


                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();

            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfGeneration2()
    {
        try
        {
            if (hiddenLeadId.Value != "" && hiddenQtnTmpltId.Value != "")
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(hiddenQtnTmpltId.Value.ToString());
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);


                //string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                //string strLenghtofId = strRandomMixedId.Substring(0, 2);
                //int intLenghtofId = Convert.ToInt16(strLenghtofId);
                //string strId = strRandomMixedId.Substring(2, intLenghtofId);
                string strId = hiddenLeadId.Value;

                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                //00088 


                string StrComments = "";



                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);

                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 9, XFontStyle.Regular);


                //00088
                XFont fontEntryAmntInWords = null;
                fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                //  tf.Alignment = XParagraphAlignment.Center;
                //  tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, 170, 555, pdfPage.Height.Point), XStringFormats.TopLeft);

                graph.DrawString("CUSTOMER QUOTATION", font, XBrushes.Black, new XRect(0, 170, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopCenter);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "corporate-logo.jpg";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 450, 60);
                    xImg.Dispose();
                }

                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();

                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();



                    //00088
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();
                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }


                int intCorpYindex = 70;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;

                if (strCorpZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCorpZipCode, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCorpYindex = intCorpYindex + 15;
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpCountry, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;







                int intCstmrYindex = 225;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 360, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REFERENCE NUMBER", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 16;


                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontTermsDtl, 280);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr2);
                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr3);
                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }

                    intCstmrYindex = intCstmrYindex + 15;
                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCstmrYindex = intCstmrYindex + 15;
                }


                //START
                yPoint = yPoint + 370;
                yLine = yLine + 365;
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                {
                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                    graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                    xImgCurrencySymbl.Dispose();
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNetAmountWithComma + " (As Per List Attached)", fontTermsDtl, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 21;
                yLine = yLine + 21;


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                string strActUserDtl = "";
                string strActMobDtl = " (Mob. " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    strActUserDtl = strActUserName + strActMobDtl;
                }
                else
                {
                    strActUserDtl = strActUserName;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(162, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 378, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 21 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 21 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 50;
                yLine = yLine + 50;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString(dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString(), fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 10;
                yLine = yLine + 10;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["DSGN_NAME"].ToString() + " ( " + dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString() + " Division )";
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "You can view the Bill of Materials in the Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Note : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint + 1, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;
                if (hiddenQtnTmpltId.Value != "")
                {


                    int intQuotationTemplateType = Convert.ToInt32(hiddenQtnTmpltId.Value.ToString());
                    if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {
                        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                        clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                        objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                        objEntityLeadCre.QtnFile_Type = 3;
                        DataTable dtQtnAttchmnt = new DataTable();
                        dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);
                        if (dtQtnAttchmnt.Rows.Count > 0)
                        {
                            string strDocAttch = "* Supporting Documents Attached.";

                            double dDocAttch = MeasureHeight(graph, strDocAttch, fontDocAttchd, 380);
                            if (yPoint + Convert.ToInt32(dNote) >= 795)
                            {
                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;
                            }


                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strDocAttch, fontDocAttchd, XBrushes.Black, new XRect(40, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                        }

                    }
                }

                //STOP
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;



                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("BILL OF MATERIALS", fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 253, yPoint - 18.5, 341.5, yPoint - 18.5);
                if (hiddenTaxEnabled.Value == "1")
                {
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                //column line7
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                //intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                            strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                            strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                            //////
                            //strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");


                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point
                            yPoint = yPoint + 22;

                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }


                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }


                    //for toatal amount section OF TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;



                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                    //00088

                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);


                }
                else
                {
                    //NO TAX

                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                    //     tf.Alignment = XParagraphAlignment.Right;
                    //    tf.DrawString("Tax", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);



                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                // intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                            //      tf.Alignment = XParagraphAlignment.Right;
                            //     tf.DrawString(strTaxAmount, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point
                            yPoint = yPoint + 22;


                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }


                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }
                    //for toatal amount section OF NO TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }


                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                    //00088

                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }



                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";




                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);


                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
                //  Process.Start(Server.MapPath(strImagePath) + pdfFilename);


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfAdvancedGeneration2()
    {// in PdfAdvancedGeneration only choice for Currency code & currency symbol is done
        try
        {
            if (hiddenLeadId.Value != null && hiddenLeadId.Value != "" && hiddenQtnTmpltId.Value != null && hiddenQtnTmpltId.Value!="")
            {

                string lblCustName = "", lblTitle = "";
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl12 = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead12 = new clsEntityLeadCreation();
                objEntityLead12.LeadId = Convert.ToInt32(hiddenLeadId.Value);
                DataTable dtReadList = new DataTable();
                dtReadList = objBusinessLeadIndvl12.Read_Indvidual_Lead_List(objEntityLead12);
                lblTitle = dtReadList.Rows[0]["LEADS_TITLE"].ToString();



                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                DataTable dtProjectDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(hiddenQtnTmpltId.Value);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

             
                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);
                dtProjectDtl = objBusinessLayerQuotation.ReadProjectDtlForPDF(objEntityQuotation);

                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);

                string strProductSts = "";
                double dItmDesc = 0;
                string strItemDescription = "";
                int Printneed = 0;

                string StrComments = "";

                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strCustmrPhone = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strProject = "";
                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);

                XFont fontEntry = null;
                XFont fontEntryNetAmnt = null;
                XFont fontEntryAmntInWords = null;
                XFont fontEntryHeading = null;

                if (hiddenTaxEnabled.Value == "1")
                {
                    fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                }
                else
                {
                    fontEntry = new XFont("Calibri", 11, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 11, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 11, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                }

                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDearSir = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 11, XFontStyle.Underline);
                XFont fontWithRef = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontProjectHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 11, XFontStyle.Regular);

                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtProjectDtl.Rows.Count > 0)
                {
                    if (dtProjectDtl.Rows[0]["PROJECT_ID"].ToString() == "")
                    {
                        strProject = dtProjectDtl.Rows[0]["LEADS_PROJECT_NAME"].ToString();

                    }
                    else
                    {
                        strProject = dtProjectDtl.Rows[0]["PROJECT_NAME"].ToString();
                    }

                }
                if (dtQtn.Rows.Count > 0)
                {
                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();

                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();
                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }
                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                    strCustmrPhone = dtCustmrDtl.Rows[0]["LEADS_MOBILE"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 180;
                yLine = yLine + 175;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REF    : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;





                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontCustmrDtl, 480);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                yPoint = yPoint + Convert.ToInt32(dCustAddr1);
                yLine = yLine + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr2);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr2);

                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr3);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr3);

                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    yPoint = yPoint + 13;
                    yLine = yLine + 13;

                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                if (strCustmrPhone != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PHONE : " + strCustmrPhone + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                yPoint = yPoint + 12;
                yLine = yLine + 12;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Dear Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 17;
                yLine = yLine + 17;

                string strSubjContent = "QUOTATION";
                if (lblTitle != "")
                {

                    strSubjContent = strSubjContent + " FOR " + lblTitle.ToUpper();

                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("SUBJECT", fontSubject, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontProjectHeading, XBrushes.Black, new XRect(85, yPoint, 10, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strSubjContent, fontSubject, XBrushes.Black, new XRect(100, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("PROJECT", fontProjectHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontProjectHeading, XBrushes.Black, new XRect(85, yPoint, 10, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strProject, fontProjectHeading, XBrushes.Black, new XRect(100, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontWithRef, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 32;
                yLine = yLine + 32;

                //START
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;



                if (strProject != "")
                {

                    double dProject = MeasureHeight(graph, strProject, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dProject) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }
                }

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {
                    if (yPoint >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                    {

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                            xImgCurrencySymbl.Dispose();
                        }
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);


                    }
                    else
                    { //display code

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(hiddenCurrencyCode.Value + " " + StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(160, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    yPoint = yPoint + 18;
                    yLine = yLine + 18;
                }

                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {
                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dPayment);
                    yLine = yLine + 4 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dValidity);
                    yLine = yLine + 4 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 4 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 4 + Convert.ToInt32(dWarranty);
                }



                bool blnShrinkFormat = false;
                if (yPoint <= 570)
                {
                    blnShrinkFormat = true;
                }

                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 40;
                    yLine = yLine + 40;
                }

                //----------------footer//////////////////
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "( EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + " )";
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(171, yPoint + Convert.ToInt32(dFooterMsg) - 12.5, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 9 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 9 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strDivName = dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString();
                yPoint = yPoint + 11;
                yLine = yLine + 11;

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint + .5, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ( " + strDivName + " Division )";
                double dTeamDtl = MeasureHeight(graph, strTeamDtl, fontNote, 380);
                if (yPoint + Convert.ToInt32(dTeamDtl) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString();
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 9;
                yLine = yLine + 9;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("MANAGER, " + strDivName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 640, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }
                else
                {
                    yPoint = yPoint + 11;
                    yLine = yLine + 11;
                }

                string strNote = "Please view the Bill Of Quantities with price in next page. As per our standard terms of sales.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(73, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;
                if (hiddenQtnTmpltId.Value != null && hiddenQtnTmpltId.Value!="")
                {

                    int intQuotationTemplateType = Convert.ToInt32(hiddenQtnTmpltId.Value);
                    if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {
                        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                        clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                        objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                        objEntityLeadCre.QtnFile_Type = 3;
                        DataTable dtQtnAttchmnt = new DataTable();
                        dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);
                        if (dtQtnAttchmnt.Rows.Count > 0)
                        {
                            string strDocAttch = "* Supporting Documents Attached.";

                            double dDocAttch = MeasureHeight(graph, strDocAttch, fontDocAttchd, 380);
                            if (yPoint + Convert.ToInt32(dNote) >= 775)
                            {   //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }


                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strDocAttch, fontDocAttchd, XBrushes.Black, new XRect(40, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                        }

                    }
                }
                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();

                }
                //STOP
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                    xImgCmpnyNameBOQHeader.Dispose();
                }
                int COUNT = 0;
                if (dtQtnDtlGroup.Rows.Count > 0)
                {
                    foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                    {
                        COUNT++;
                        //for calculate total for group
                        strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                        strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                        strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                        strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                        strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                        strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                        strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);

                        if (COUNT > 1)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }

                            //NEW PAGE
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                            {
                                XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                                graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                                xImgCmpnyNameBOQHeader.Dispose();
                            }


                        }

                        string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();
                        tf.Alignment = XParagraphAlignment.Center;
                        tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 25, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                        graph.DrawLine(XPens.Black, 251, yPoint - 12, 344, yPoint - 12);

                        if (hiddenTaxEnabled.Value == "1")
                        {
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                            //column line1
                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine + 22);

                            //column line2
                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine + 22);

                            //column line3
                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine + 22);

                            //column line4
                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine + 22);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine + 22);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);

                            yPoint = yPoint + 22;

                            yLine = yLine + 22;

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {
                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);


                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);
                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;
                                        }
                                        else
                                        {

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22 + Convert.ToInt32(CatHeight));

                                            yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                            yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                        }



                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;

                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);




                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(308, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine + 22);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine + 22);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine + 22);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine + 22);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine + 22);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);


                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                        CatLineStart = yLine;
                                                    }

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                                                    double dItmName = 0;
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;
                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 120);
                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;

                                                        }
                                                    }
                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            //strItemDescription = "( " + strItemDescription + " )";
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);




                                        }



                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine + 18);
                                        graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine + 18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;

                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);




                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(308, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                                                    double dItmName = 0;
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;
                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 120);
                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;

                                                        }
                                                    }
                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            //strItemDescription = "( " + strItemDescription + " )";
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }



                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                                        }
                                    }
                                }
                            }

                            //for toatal amount section OF TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(335, yPoint, 137, pdfPage.Height.Point), XStringFormats.TopLeft);


                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(320, yPoint, 150, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            string DiscAmountGrp = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();

                            tf.DrawString(DiscAmountGrp, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {//FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(350, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                            }
                            else
                            { //display code

                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);

                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }


                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {//FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                        }
                        else
                        {

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(291, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                            yPoint = yPoint + 22;

                            yLine = yLine + 22;
                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                            //column line1
                            graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                            //column line2
                            graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                            //column line3
                            graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                            //column line5
                            graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {
                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);

                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;
                                        }
                                        else
                                        {//column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22 + Convert.ToInt32(CatHeight));

                                            yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                            yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                        }



                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;
                                        if (dtQtnDtl.Rows.Count > 0)
                                        { //row line

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;
                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);



                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }

                                                        //row line
                                                        //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(291, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;

                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                                        CatLineStart = yLine;
                                                    }

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                                                    double dItmName = 0;
                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 170);

                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;

                                                        }
                                                    }
                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            //strItemDescription = "( " + strItemDescription + " )";
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                        }

                                                    }

                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);




                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                        }
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);
                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine + 18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {
                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;

                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);



                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }

                                                        //row line
                                                        //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(291, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                                                    double dItmName = 0;
                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 170);

                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;

                                                        }
                                                    }

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {

                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);

                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        }
                                                    }

                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);



                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                                        }
                                    }
                                }
                            }
                            //for toatal amount section OF NO TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }



                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(305, yPoint, 173, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            string DiscAmountGrp = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                            tf.DrawString(DiscAmountGrp, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            else
                            { //display code
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(483, yPoint, 89, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }

                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);






                        }

                        yPoint = yPoint + 30;
                        yLine = yLine + 30;
                    }
                }
                else
                {
                }

                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }

                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                //XRect rect = new XRect(40, 775, 510, 60);
                //graph.DrawImage(xImgFootBootomNotax, rect);
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";


                //  PageSize[] pageSizes = (PageSize[])Enum.GetValues(typeof(PageSize));

                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);


                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
                //  Process.Start(Server.MapPath(strImagePath) + pdfFilename);


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfCorporateAdvancedGeneration2()
    {
        try
        {
            if (hiddenLeadId.Value != null && hiddenLeadId.Value != "" && hiddenQtnTmpltId.Value != null && hiddenQtnTmpltId.Value!="")
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(hiddenQtnTmpltId.Value);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

           
                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);

                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);


                int Printneed = 0;
                string strProductSts = "";
                string strItemDescription = "";
                double dItmDesc = 0;

                string StrComments = "";


                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 13, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }

                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {

                    if ((strCustmrCountry != ""))
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }


                }

                if (strCustmrCountry != "")
                {

                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";

                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {
                    if (yPoint >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;

                }
                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);
                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;

                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "Please view the Bill Of Quantities with Price in Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;
                if (hiddenQtnTmpltId.Value != null && hiddenQtnTmpltId.Value!="")
                {


                    int intQuotationTemplateType = Convert.ToInt32(hiddenQtnTmpltId.Value);
                    if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {
                        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                        clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                        objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                        objEntityLeadCre.QtnFile_Type = 3;
                        DataTable dtQtnAttchmnt = new DataTable();
                        dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);
                        if (dtQtnAttchmnt.Rows.Count > 0)
                        {
                            string strDocAttch = "* Supporting Documents Attached.";

                            double dDocAttch = MeasureHeight(graph, strDocAttch, fontDocAttchd, 380);
                            if (yPoint + Convert.ToInt32(dDocAttch) >= 758)
                            {   //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 150;
                                yLine = yLine + 145;

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 0, 30);
                                    xImgCmpnyName.Dispose();
                                }
                            }


                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strDocAttch, fontDocAttchd, XBrushes.Black, new XRect(40, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                        }

                    }
                }
                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();

                }
                //STOP
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 18, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }

                int COUNT = 0;
                foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                {
                    COUNT++;
                    //for calculate total for group
                    strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);

                    if (COUNT > 1)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }

                        //NEW PAGE
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                        {
                            XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                            graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                            xImgCmpnyNameBOQHeader.Dispose();
                        }


                    }

                    string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();


                    tf.Alignment = XParagraphAlignment.Center;
                    tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 251, yPoint - 17.5, 344, yPoint - 17.5);
                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        //column line0
                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);

                        //column line1
                        graph.DrawLine(XPens.Black, 190, 145, 190, yLine + 22);

                        //column line2
                        graph.DrawLine(XPens.Black, 260, 145, 260, yLine + 22);

                        //column line3
                        graph.DrawLine(XPens.Black, 310, 145, 310, yLine + 22);

                        //column line4
                        graph.DrawLine(XPens.Black, 380, 145, 380, yLine + 22);

                        //column line5
                        graph.DrawLine(XPens.Black, 435, 145, 435, yLine + 22);

                        //column line6
                        graph.DrawLine(XPens.Black, 495, 145, 495, yLine + 22);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            decimal decAmount = 0;
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint + 1.5, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));

                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }



                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);




                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //intCounter++;



                                                    //row line
                                                    //   graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    CatLineStart = yLine;
                                                }


                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        //strItemDescription = "( " + strItemDescription + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);

                                    }


                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                    graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {

                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);




                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //intCounter++;



                                                    //row line
                                                    //   graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                }


                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        //strItemDescription = "( " + strItemDescription + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);

                                    }
                                }
                            }
                        }


                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();

                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                        if (yPoint >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);


                    }
                    else
                    {
                        //NO TAX

                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //column line0
                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            decimal decAmount = 0;
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);
                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    {//column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }





                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                    int CatLineStart = yLine;

                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                    //row line

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    CatLineStart = yLine;
                                                }

                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;


                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);


                                    }

                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                    graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                            {

                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                }

                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;


                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                    }
                                }
                            }
                        }
                        //for toatal amount section OF NO TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }


                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);


                    }

                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }
                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }
                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                //XRect rect = new XRect(40, 775, 510, 60);
                //graph.DrawImage(xImgFootBootomNotax, rect);
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";


                //  PageSize[] pageSizes = (PageSize[])Enum.GetValues(typeof(PageSize));

                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);


                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
                //  Process.Start(Server.MapPath(strImagePath) + pdfFilename);


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfTermsToLastCorporateAdvancedGeneration2()
    {
        try
        {
            if (hiddenLeadId.Value != null && hiddenLeadId.Value != "" && hiddenQtnTmpltId.Value != null && hiddenQtnTmpltId.Value!="")
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(hiddenQtnTmpltId.Value);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

              
                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);

                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);


                string strItemName = "";
                string StrComments = "";
                int Printneed = 0;
                string strProductSts = "";

                string strItemDescription = "";
                double dItmDesc = 0;
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxPerc = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }

                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {

                    if ((strCustmrCountry != ""))
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }


                }

                if (strCustmrCountry != "")
                {

                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";

                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                int COUNT = 0;
                foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                {
                    COUNT++;
                    //for calculate total for group
                    strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    if (COUNT > 1)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;
                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }

                    }

                    string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                    tf.Alignment = XParagraphAlignment.Center;
                    tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 13;
                    graph.DrawLine(XPens.Black, 251, yPoint, 344, yPoint);
                    yLine = yLine + 22;
                    int yLineStart = yPoint + 3;
                    yPoint = yPoint + 9;
                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                        //column line8
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22);
                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }


                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {

                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);

                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;




                                                    }


                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 755)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                                    yLineStart = 145;

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    //graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    graph.DrawLine(XPens.Black, 20, 145, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, 145, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, 145, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, 145, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, 145, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, 145, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, 145, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, 145, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, 145, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    CatLineStart = yLine;
                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                // pdfPage.Width.Point
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);



                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {



                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;




                                                    }


                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                                    yLineStart = 145;

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    //graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                // pdfPage.Width.Point
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);



                                    }
                                }
                            }
                        }

                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();

                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 517, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 550, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                    }
                    else
                    {
                        //NO TAX

                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);
                                    if (CatHeight < 22)
                                    {//column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22);
                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    {//column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }




                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);

                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }

                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);

                                                    yLineStart = 145;

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    CatLineStart = yLine;
                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }

                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);

                                                    yLineStart = 145;

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    }
                                }
                            }
                        }
                        //for toatal amount section OF NO TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }


                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                    }
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;




                }
                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }
                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);
                //FOOTER
                string strImageFooterLocBottomBOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottomBOQ)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottomBOQ));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();

                }


                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 18, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }

                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {
                    if (yPoint >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);

                        xImgCurrencySymbl.Dispose();
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;
                }


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);
                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;

                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);


                if (hiddenQtnTmpltId.Value != null && hiddenQtnTmpltId.Value!="")
                {


                    int intQuotationTemplateType = Convert.ToInt32(hiddenQtnTmpltId.Value);
                    if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {
                        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                        clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                        objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                        objEntityLeadCre.QtnFile_Type = 3;
                        DataTable dtQtnAttchmnt = new DataTable();
                        dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);
                        if (dtQtnAttchmnt.Rows.Count > 0)
                        {
                            yPoint = yPoint + 30;
                            yLine = yLine + 30;
                            string strDocAttch = "* Supporting Documents Attached.";

                            double dDocAttch = MeasureHeight(graph, strDocAttch, fontDocAttchd, 380);
                            if (yPoint + Convert.ToInt32(dDocAttch) >= 758)
                            {   //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 150;
                                yLine = yLine + 145;

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 0, 30);
                                    xImgCmpnyName.Dispose();
                                }
                            }


                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strDocAttch, fontDocAttchd, XBrushes.Black, new XRect(40, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                        }

                    }
                }


                //NOTE
                yPoint = yPoint + 50;
                yLine = yLine + 50;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 65;
                yLine = yLine + 65;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomEOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomEOQ)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomEOQ));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                //XRect rect = new XRect(40, 775, 510, 60);
                //graph.DrawImage(xImgFootBootomNotax, rect);
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";


                //  PageSize[] pageSizes = (PageSize[])Enum.GetValues(typeof(PageSize));

                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);


                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();

            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    public double MeasureHeight(PdfSharp.Drawing.XGraphics gfx, string text, PdfSharp.Drawing.XFont font, int width)
    {
        var nlines = text.Split('\n');
        var rlines = text.Split('\r');
        int intNline = nlines.Length;
        int intRline = rlines.Length;

        double totalHeight = 0;
        if (intRline > intNline)
        {
            foreach (string line in rlines)
            {
                var size = gfx.MeasureString(line, font);
                double height = size.Height + (size.Height * Math.Floor(size.Width / width));
                if (height == 0)
                {
                    height = Convert.ToDouble(font.Height.ToString());
                }

                totalHeight += height;
            }
        }
        else
        {
            foreach (string line in nlines)
            {
                var size = gfx.MeasureString(line, font);
                double height = size.Height + (size.Height * Math.Floor(size.Width / width));
                if (height == 0)
                {
                    height = Convert.ToDouble(font.Height.ToString());
                }
                totalHeight += height;
            }
        }
        return totalHeight;
    }

    public string ConvertCurrencyToWords(string NetAmount)
    {
        clsEntityCommon ObjClsentityCommon = new clsEntityCommon();
        clsBusinessLayer ObjClsBussines = new clsBusinessLayer();

        if (hiddenDfltCurrencyMstrId.Value != null && hiddenDfltCurrencyMstrId.Value != "")
        {
            ObjClsentityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
        }
        string NumberToWord = ObjClsBussines.ConvertCurrencyToWords(ObjClsentityCommon, NetAmount);
        return NumberToWord;
    }
    public string RefNumGeneralFormat(int intQtnSerialId)
    {
        clsBusinessLayer objBussiness = new clsBusinessLayer();
        clsEntityCommon objEntity = new clsEntityCommon();

        if (hiddenCorporateId.Value != "")
        {
            objEntity.CorporateID = Convert.ToInt32(hiddenCorporateId.Value);
        }

        if (hiddenOrganisationId.Value != "")
        {
            objEntity.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        if (hiddenCorporateDivId.Value != "")
        {
            objEntity.CorporateDivId = Convert.ToInt32(hiddenCorporateDivId.Value);
        }
        if (hiddenDivisionCode.Value != "")
        {
            objEntity.CorpDivisionCode = hiddenDivisionCode.Value;
        }

        if (hiddenMonthMM.Value != "")
        {
            objEntity.MonthRef = Convert.ToInt32(hiddenMonthMM.Value);
        }
        if (hiddenYearYYYY.Value != "")
        {
            objEntity.YearRef = Convert.ToInt32(hiddenYearYYYY.Value);
        }
        if (hiddenUserCode.Value != "")
        {
            objEntity.UserCodeRef = hiddenUserCode.Value.ToString();
        }

        objEntity.QtnId = Convert.ToInt32(intQtnSerialId);

        if (hiddenQtnRevisionVersn.Value != "")
        {
            objEntity.RvsnVrsnRef = hiddenQtnRevisionVersn.Value.ToString();
        }

        string strRealFormat = objBussiness.strRefFormat(objEntity);

        return strRealFormat;
    }
    protected void btnConfirm_Click(object sender, EventArgs e)
    {
        try
        {
            string strRandomMixedId = hiddenLeadId.Value;
            string id = strRandomMixedId;
            string strLenghtofId = strRandomMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomMixedId.Substring(2, intLenghtofId);
            LeadDetails(strId, 1);

            if (hiddenQuotationIds.Value != "" && hiddenQuotationIds.Value != null && hiddenDfltCurrencyMstrId.Value != "" && hiddenDfltCurrencyMstrId.Value != null && hiddenLeadId.Value != null && hiddenLeadId.Value != "" && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "")
            {

        

                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();


                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                        hiddenCorporateId.Value = Session["CORPOFFICEID"].ToString();
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                        hiddenOrganisationId.Value = Session["ORGID"].ToString();
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);


                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Prepared) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_ReOpened) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Returned) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending))
                {
                    Response.Redirect("~/Default.aspx");
                }
                else
                {
                   
                    objEntityQuotation.MailStatus = Convert.ToInt32(hiddenMailSts.Value);                  
                    objEntityQuotation.User_Id = intUserId;
                    objEntityQuotation.D_Date = System.DateTime.Now;
                    objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);                   
                    objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationIds.Value);
                    objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));                  
                    objBusinessLayerQuotation.ConfirmQuotationList(objEntityQuotation);
                    //start mail sending on conirmation to team head
                    int intMailSendSucessFullSend = 1;//show msg only on unsuccessfull send

                    clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                    clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
                    objEntityLead.LeadId = objEntityQuotation.Lead_Id;
                    objEntityLead.User_Id = intUserId;
                    objEntityQuotation.Lead_Id = Convert.ToInt32(strId);
                    DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                    DataTable dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                    //DataTable dtUserDetails = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                    if (dtFromMail.Rows.Count > 0 && dtTeamHeadDtl.Rows.Count > 0)
                    {
                        clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                        objEntityMail.Email_Subject = " APPROVAL PENDING Enquiry - ";
                        objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                        string StrMailContent = "Dear " + dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                        if (lblTitle.Value == "")
                        {
                            StrMailContent = StrMailContent + " I would like to request Approval for the Approval Pending Quotation " + Environment.NewLine + Environment.NewLine;
                        }
                        else
                        {
                            StrMailContent = StrMailContent + "I would like to request Approval for the Approval Pending Quotation for " + lblTitle.Value + Environment.NewLine + Environment.NewLine;
                        }
                        StrMailContent = StrMailContent + "Quotation Reference Number: " + hiddenRefNo.Value + Environment.NewLine + Environment.NewLine;

                        objEntityMail.Email_Content = StrMailContent + "Thanking you and looking forward for your Approval." + Environment.NewLine;

                        objEntityMail.To_Email_Address = dtTeamHeadDtl.Rows[0]["USR_EMAIL"].ToString();
                        objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                        objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                        objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                        objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                        objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                        objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                        objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;
                        objEntityMail.User_Id = objEntityLead.User_Id;
                        objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                        objEntityMail.D_Date = System.DateTime.Now;
                        List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                        List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                        List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();
                        try
                        {
                            MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                            objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                        }
                        catch
                        {
                            intMailSendSucessFullSend = 2;//eeror while sending
                        }
                    }
                    else
                    {
                        intMailSendSucessFullSend = 3;// no proper mail id
                    }
                    if (intMailSendSucessFullSend != 2 && intMailSendSucessFullSend != 3)
                    {// if mail send successfully
                        objBusinessLayerQuotation.Update_Adtnl_Mail(objEntityQuotation);
                        Response.Redirect("gen_LeadList.aspx?InsUpd=Cnfrm");                      
                    }
                    else
                    {
                        Response.Redirect("gen_LeadList.aspx?InsUpd=Cnfrm");
                    }
                }
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        catch( Exception ex)
        {
            throw ex;
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    protected void btnDelivered_Click(object sender, EventArgs e)
    {
        try
        {
            string strRandomMixedId = hiddenLeadId.Value;
            string id = strRandomMixedId;
            string strLenghtofId = strRandomMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomMixedId.Substring(2, intLenghtofId);
            LeadDetails(strId, 1);

            if (hiddenQuotationIds.Value != "" && hiddenQuotationIds.Value != null && hiddenDfltCurrencyMstrId.Value != "" && hiddenDfltCurrencyMstrId.Value != null && hiddenLeadId.Value != null && hiddenLeadId.Value != "" && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "")
            {
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }

               
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
                {
                    Response.Redirect("~/Default.aspx");
                }

                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;
                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationIds.Value);
                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));
                objBusinessLayerQuotation.DeliverQuotation(objEntityQuotation);
                Response.Redirect("gen_LeadList.aspx?InsUpd=Dlvr");
               
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }

    protected void btnReopenReasonSave_Click(object sender, EventArgs e)
    {
        try
        {
            string strRandomMixedId = hiddenLeadId.Value;
            string id = strRandomMixedId;
            string strLenghtofId = strRandomMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomMixedId.Substring(2, intLenghtofId);
            LeadDetails(strId, 1);

            if (hiddenQuotationIds.Value != "" && hiddenQuotationIds.Value != null && hiddenLeadId.Value != null && hiddenLeadId.Value != "" && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenReopenReasonId.Value != null && hiddenReopenReasonId.Value != "")
            {
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                objEntityQuotation.ReopenRsn_Id = Convert.ToInt32(hiddenReopenReasonId.Value);
                if (txtReopenReasonDescptn.Value.Trim().Length > 999)
                {
                    objEntityQuotation.ReopenRsnDescrptn = txtReopenReasonDescptn.Value.Trim().Substring(0, 999);
                }
                else
                {
                    objEntityQuotation.ReopenRsnDescrptn = txtReopenReasonDescptn.Value.Trim();
                }
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);
                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);
                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;
                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationIds.Value);
                if (hiddenQtnRevisionVersn.Value != "")
                {
                    int intRevsnVrsn = Convert.ToInt32(hiddenQtnRevisionVersn.Value);
                    intRevsnVrsn = intRevsnVrsn + 1;
                    objEntityQuotation.QtnRevisionVersn = intRevsnVrsn;
                    hiddenQtnRevisionVersn.Value = intRevsnVrsn.ToString();
                }
                else
                {
                    objEntityQuotation.QtnRevisionVersn = 1;
                    hiddenQtnRevisionVersn.Value = "1";
                }
                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));
                objBusinessLayerQuotation.ReOpenQuotation(objEntityQuotation);
                Response.Redirect("gen_LeadList.aspx?InsUpd=ReOpn");

            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        catch (Exception EX)
        {
            throw EX;
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    public void LeadDetails(string strLeadId, int intEnableApprove)
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (strLeadId != "" && strLeadId != null)
        {
            objEntityQuotation.Lead_Id = Convert.ToInt32(strLeadId);
        }
        DataTable dtLead = new DataTable();
        dtLead = objBusinessLayerQuotation.ReadLeadDtlForDisplay(objEntityQuotation);
        int intLeadStatus = 0;
        // for RE-OPEN PROVISION TO BE ALLOCATED FOR TEAM HEAD
        int intTeamHeadId = 0;
        if (dtLead.Rows.Count > 0)
        {
            if (dtLead.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
            {
                lblCustomerName.Value = dtLead.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtLead.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }
            else
            {
                lblCustomerName.Value = dtLead.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }
            intLeadStatus = Convert.ToInt32(dtLead.Rows[0]["LDSTS_ID"].ToString());

            intTeamHeadId = Convert.ToInt32(dtLead.Rows[0]["TEAM_LEAD_EMP_ID"].ToString());
            HiddenFieldTeamLeadId.Value = dtLead.Rows[0]["TEAM_LEAD_EMP_ID"].ToString();
            hiddenDivisionCode.Value = dtLead.Rows[0]["CPRDIV_CODE"].ToString();
            hiddenUserCode.Value = dtLead.Rows[0]["USR_CODE"].ToString();
            hiddenQtnRevisionVersn.Value = dtLead.Rows[0]["LDQUOT_RVSN"].ToString();

            lblDate.Value = dtLead.Rows[0]["LEADS_DATE"].ToString();
            lblTitle.Value = dtLead.Rows[0]["LEADS_TITLE"].ToString();
            lblDivision.Value = dtLead.Rows[0]["CPRDIV_NAME"].ToString();
            hiddenQuotationIds.Value = dtLead.Rows[0]["LDQUOT_ID"].ToString();
            hiddenQtnRefSerialId.Value = dtLead.Rows[0]["LDQUOT_REF_SLN_ID"].ToString();
            hiddenQuotationStatus.Value = dtLead.Rows[0]["LDQUOT_STS"].ToString();
            hiddenLeadActiveUser.Value = dtLead.Rows[0]["LEADS_ACTIVE_USR_ID"].ToString();

            if (hiddenQuotationIds.Value != "")
            {
                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationIds.Value);
            }
            else
            {
                objEntityQuotation.QuotationId = 0;
            }
            DataTable dtMonthYear = new DataTable();
            dtMonthYear = objBusinessLayerQuotation.ReadMnthYearForRefNum(objEntityQuotation);
            if (dtMonthYear.Rows.Count > 0)
            {

                hiddenMonthMM.Value = dtMonthYear.Rows[0]["MONTH"].ToString();
                hiddenYearYYYY.Value = dtMonthYear.Rows[0]["YEAR"].ToString();
            }
            if (hiddenQuotationIds.Value != "")
            {
                int intQtnId = Convert.ToInt32(hiddenQuotationIds.Value);
                EditView(intQtnId, 2);
            }
        }
    }
    private void EditView(int intQtnId, int intEditOrView)
    {//when Editing or viewing
        //intEditOrView if 1-Edit,2-View
        clsCommonLibrary objCommon = new clsCommonLibrary();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        objEntityQuotation.QuotationId = intQtnId;
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }

        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        DataTable dtQtn = new DataTable();
        objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
        dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);
        if (dtQtn.Rows.Count > 0)
        {
            hiddenRefNo.Value = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
            hiddenMailSts.Value =dtQtn.Rows[0]["LDQUOT_MAIL_STS"].ToString();
        }
    }


    protected void imgbtnWin_Click1(object sender, EventArgs e)
    {
        if (hiddenLeadId.Value != null && hiddenLeadId.Value !="")
        {

            string strRandomMixedId = hiddenLeadId.Value;
            string id = strRandomMixedId;
            string strLenghtofId = strRandomMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomMixedId.Substring(2, intLenghtofId);
            LeadDetails(strId, 1);


            clsCommonLibrary objCommon = new clsCommonLibrary();
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityLeadCreation.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    hiddenCorporateId.Value = Session["CORPOFFICEID"].ToString();
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityLeadCreation.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            if (hiddenOrganisationId.Value == "")
            {
                if (Session["ORGID"] != null)
                {
                    objEntityLeadCreation.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    hiddenOrganisationId.Value = Session["ORGID"].ToString();
                }
                else if (Session["ORGID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {
                objEntityLeadCreation.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
            }

         
            objEntityLeadCreation.LeadId = Convert.ToInt32(strId);
            objEntityLeadCreation.Quotation_Id = Convert.ToInt32(hiddenQuotationIds.Value);
            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
            if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) ||
                Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
            { }
            else
            {
                Response.Redirect("~/Default.aspx");
            }

            if (Session["USERID"] != null)
            {
                objEntityLeadCreation.User_Id = Convert.ToInt32(Session["USERID"].ToString());
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
            objEntityLeadCreation.InsertDate = System.DateTime.Now;
            clsBusinessLayerLeadCreation objBusinessLead = new clsBusinessLayerLeadCreation();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            objEntityLead.LeadId = objEntityLeadCreation.LeadId;
            DataTable dtLeadMaster = objBusinessLead.Read_Lead_ById(objEntityLead);
            string strCustomerNameCount = "0";
            string strClientNameCount = "0";
            string strContractorNameCount = "0";
            string strConsultantNameCount = "0";
            string strProjectNameCount = "0";
            if (dtLeadMaster.Rows[0]["CSTMR_ID"].ToString() == "")
            {
                if (dtLeadMaster.Rows[0]["LEADS_CSTMR_NAME"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CUSTOMER);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strCustomerNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }
            }
            if (dtLeadMaster.Rows[0]["LEADS_CLIENT_ID"].ToString() == "")
            {
                if (dtLeadMaster.Rows[0]["LEADS_CLIENT"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CLIENT"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CLIENT);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strClientNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }
            }
            if (dtLeadMaster.Rows[0]["LEADS_CONTRACTOR_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CONTRACTOR"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CONTRACTOR"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CONTRACTOR);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strContractorNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CONSULTANT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CONSULTANT"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CONSULTANT"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CONSULTANT);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strConsultantNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }

            if (dtLeadMaster.Rows[0]["PROJECT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_PROJECT_NAME"].ToString() != "")
                {
                    clsEntityProject objEntityProject = new clsEntityProject();
                    objEntityProject.ProjectName = dtLeadMaster.Rows[0]["LEADS_PROJECT_NAME"].ToString();
                    objEntityProject.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityProject.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strProjectNameCount = objBusinessLeadIndvl.CheckProjectName(objEntityProject);
                }


            }
            clsEntityCommon objEntityCommon = new clsEntityCommon();
            objEntityCommon.SectionId = Convert.ToInt32(clsCommonLibrary.Section.PROJECT);
            objEntityCommon.CorporateID = objEntityLeadCreation.Corp_Id;
            objEntityCommon.Organisation_Id = objEntityLeadCreation.Org_Id;
            string strNextId = objBusinessLayer.ReadNextNumberWebForUI(objEntityCommon);
            string year = DateTime.Today.Year.ToString();
            string Ref = "PRJCT/" + year + "/" + strNextId;
            if (strCustomerNameCount == "0" && strClientNameCount == "0" && strContractorNameCount == "0" && strConsultantNameCount == "0" && strProjectNameCount == "0")
            {
                objEntityLeadCreation.ProjectRefNum = Ref;
                if (hiddenProjectStatus.Value == "BIDDING")
                {
                    objEntityLeadCreation.Project_Tender_Id = hiddenRfqId.Value;
                }
                else if (hiddenProjectStatus.Value == "AWARDED")
                {
                    if (hiddenInternalRef.Value != "")
                    {
                        objEntityLeadCreation.InternalRefNum = hiddenInternalRef.Value;
                    }
                    if (hiddenProjectManager.Value != "")
                    {
                        objEntityLeadCreation.ProjectManagerID = Convert.ToInt32(hiddenProjectManager.Value);
                    }
                }




                objEntityLeadCreation.LeadStatus = Convert.ToInt32(clsCommonLibrary.LeadStatus.Success);
                objBusinessLeadIndvl.WinLead(objEntityLeadCreation);
                //for sending mail to the team head
                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                objEntityQuotation.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
                objEntityQuotation.Organisation_Id = objEntityLeadCreation.Org_Id;
                objEntityQuotation.Lead_Id = objEntityLeadCreation.LeadId;
                DataTable dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                objEntityLead.User_Id = objEntityLeadCreation.User_Id;
                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);

                if (dtFromMail.Rows.Count > 0 && dtTeamHeadDtl.Rows.Count > 0)
                {
                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "LEAD WIN - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString();


                    string StrMailContent = "Dear " + dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + " I would like to inform you that the status of the following lead have been changed to WIN status " + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + "Lead Reference Number: " + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString() + Environment.NewLine + Environment.NewLine;

                    objEntityMail.Email_Content = StrMailContent + "Thanking you." + Environment.NewLine;

                    objEntityMail.To_Email_Address = dtTeamHeadDtl.Rows[0]["USR_EMAIL"].ToString();
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;
                    objEntityMail.User_Id = objEntityLead.User_Id;

                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;

                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);


                    }
                    catch (Exception ex)
                    {
                    }

                }
                Response.Redirect("gen_LeadList.aspx?InsUpd=InsWin");

            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
            }

        }
    }
    protected void btnPartialWin_Click(object sender, EventArgs e)
    {
        if (hiddenLeadId.Value != null && hiddenLeadId.Value != "")
        {
            string strRandomMixedId = hiddenLeadId.Value;
            string id = strRandomMixedId;
            string strLenghtofId = strRandomMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomMixedId.Substring(2, intLenghtofId);
            LeadDetails(strId, 1);


            clsCommonLibrary objCommon = new clsCommonLibrary();
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityLeadCreation.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityLeadCreation.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            if (hiddenOrganisationId.Value == "")
            {
                if (Session["ORGID"] != null)
                {
                    objEntityLeadCreation.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                }
                else if (Session["ORGID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {
                objEntityLeadCreation.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
            }

          
            objEntityLeadCreation.LeadId = Convert.ToInt32(strId);

            objEntityLeadCreation.Quotation_Id = Convert.ToInt32(hiddenQuotationIds.Value);



            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
            if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) ||
                Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
            { }
            else
            {
                Response.Redirect("~/Default.aspx");
            }

            if (Session["USERID"] != null)
            {
                objEntityLeadCreation.User_Id = Convert.ToInt32(Session["USERID"].ToString());
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
            objEntityLeadCreation.InsertDate = System.DateTime.Now;


            clsBusinessLayerLeadCreation objBusinessLead = new clsBusinessLayerLeadCreation();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            objEntityLead.LeadId = objEntityLeadCreation.LeadId;
            DataTable dtLeadMaster = objBusinessLead.Read_Lead_ById(objEntityLead);
            string strCustomerNameCount = "0";
            string strClientNameCount = "0";
            string strContractorNameCount = "0";
            string strConsultantNameCount = "0";
            string strProjectNameCount = "0";
            if (dtLeadMaster.Rows[0]["CSTMR_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CSTMR_NAME"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CUSTOMER);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strCustomerNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CLIENT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CLIENT"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CLIENT"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CLIENT);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strClientNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CONTRACTOR_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CONTRACTOR"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CONTRACTOR"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CONTRACTOR);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strContractorNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CONSULTANT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CONSULTANT"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CONSULTANT"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CONSULTANT);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strConsultantNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }

            if (dtLeadMaster.Rows[0]["PROJECT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_PROJECT_NAME"].ToString() != "")
                {
                    clsEntityProject objEntityProject = new clsEntityProject();
                    objEntityProject.ProjectName = dtLeadMaster.Rows[0]["LEADS_PROJECT_NAME"].ToString();
                    objEntityProject.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityProject.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strProjectNameCount = objBusinessLeadIndvl.CheckProjectName(objEntityProject);
                }


            }
            //for sending mail to the team head
            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
            objEntityQuotation.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
            objEntityQuotation.Organisation_Id = objEntityLeadCreation.Org_Id;
            objEntityQuotation.Lead_Id = objEntityLeadCreation.LeadId;
            DataTable dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
            objEntityLead.User_Id = objEntityLeadCreation.User_Id;
            DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);

            clsEntityCommon objEntityCommon = new clsEntityCommon();
            objEntityCommon.SectionId = Convert.ToInt32(clsCommonLibrary.Section.PROJECT);
            objEntityCommon.CorporateID = objEntityLeadCreation.Corp_Id;
            objEntityCommon.Organisation_Id = objEntityLeadCreation.Org_Id;
            string strNextId = objBusinessLayer.ReadNextNumberWebForUI(objEntityCommon);
            string year = DateTime.Today.Year.ToString();

            string Ref = "PRJCT/" + year + "/" + strNextId;


            if (strCustomerNameCount == "0" && strClientNameCount == "0" && strContractorNameCount == "0" && strConsultantNameCount == "0" && strProjectNameCount == "0")
            {
                objEntityLeadCreation.ProjectRefNum = Ref;
                if (hiddenProjectStatus.Value == "BIDDING")
                {
                    objEntityLeadCreation.Project_Tender_Id = hiddenRfqId.Value;
                }
                else if (hiddenProjectStatus.Value == "AWARDED")
                {
                    if (hiddenInternalRef.Value != "")
                    {
                        objEntityLeadCreation.InternalRefNum = hiddenInternalRef.Value;
                    }
                    if (hiddenProjectManager.Value != "")
                    {
                        objEntityLeadCreation.ProjectManagerID = Convert.ToInt32(hiddenProjectManager.Value);
                    }
                }
                objEntityLeadCreation.WinAmount = Convert.ToDecimal(HiddenFieldtxtPartnWinAmount.Value);
                objEntityLeadCreation.LeadStatus = Convert.ToInt32(clsCommonLibrary.LeadStatus.Partial_Win);
                objBusinessLeadIndvl.WinLead(objEntityLeadCreation);

                objBusinessLeadIndvl.InsertLossStsToAllPrdct(objEntityLeadCreation);

                string strTotalProduct = hiddenPartialWinIds.Value;
                if (strTotalProduct != "")
                {
                    string[] strSplitted = strTotalProduct.Split(',');
                    foreach (string strProdId in strSplitted)
                    {
                        if (strProdId != "")
                        {
                            clsEntityLayerQuotation objEntQuot = new clsEntityLayerQuotation();
                            objEntQuot.Product_Id = Convert.ToInt32(strProdId);
                            objBusinessLayerIndividual.InsertPartialWinSts(objEntQuot);
                        }
                    }
                }

                if (dtFromMail.Rows.Count > 0 && dtTeamHeadDtl.Rows.Count > 0)
                {
                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "LEAD PARTIAL WIN - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString();


                    string StrMailContent = "Dear " + dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + " I would like to inform you that the status of the following lead have been changed to PARTIAL WIN status " + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + "Lead Reference Number: " + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString() + Environment.NewLine + Environment.NewLine;

                    objEntityMail.Email_Content = StrMailContent + "Thanking you." + Environment.NewLine;

                    objEntityMail.To_Email_Address = dtTeamHeadDtl.Rows[0]["USR_EMAIL"].ToString();
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;
                    objEntityMail.User_Id = objEntityLead.User_Id;

                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;

                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                    }
                    catch (Exception ex)
                    {
                    }

                }
                Response.Redirect("gen_LeadList.aspx?InsUpd=InsWin");
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
            }

        }
    }
    protected void btnTaskSave_Click(object sender, EventArgs e)
    {
        try
        {
            if (hiddenLeadId.Value != null && hiddenLeadId.Value!="")
            {
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityTask objEntityTask = new clsEntityTask();
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityTask.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityTask.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityTask.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityTask.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (hiddenTaskSubjctId.Value != null && hiddenTaskSubjctId.Value != "")
                {
                    objEntityTask.TaskSubjectId = Convert.ToInt32(hiddenTaskSubjctId.Value);

                }
                string strTaskDate = txtTaskDate.Text;
                string strHour = "", strMinute = "", strAM_PM = "";

                clsCommonLibrary objCommon = new clsCommonLibrary();
                if (strTaskDate != "")
                {
                    strHour = ddlTaskHr.SelectedValue.ToString();
                    strMinute = ddlTaskMin.SelectedValue.ToString();
                    strAM_PM = ddlTask_AM_PM.SelectedValue.ToString();
                    string strDateTime = strTaskDate + "-" + strHour + "-" + strMinute + "-" + strAM_PM;
                    objEntityTask.DueDate = objCommon.textWithTimeToDateTime(strDateTime);
                }
                objEntityTask.Description = txtTaskDescptn.Value.Trim();


                string strRandomLeadMixedId = hiddenLeadId.Value;
                string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
                objEntityTask.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityTask.Lead_Id;

                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    Response.Redirect("~/Default.aspx");
                }

                //Status checkbox checked
                if (cbxTaskStatus.Checked == true)
                {
                    objEntityTask.TaskStatus = 1;
                }
                //Status checkbox not checked
                else
                {
                    objEntityTask.TaskStatus = 0;
                }

                if (Session["USERID"] != null)
                {
                    objEntityTask.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityTask.Date = System.DateTime.Now;
                objEntityTask.CloseStatus = 1;
                objBusinessLeadIndvl.InsertTask(objEntityTask);               
                Response.Redirect("gen_LeadList.aspx?InsUpd=InsTask");
            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    protected void btnTaskUpd_Click(object sender, EventArgs e)
    {
        try
        {
            if (hiddenLeadId.Value != null && hiddenLeadId.Value != "" && hiddenTaskId.Value != "")
            {
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityTask objEntityTask = new clsEntityTask();
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityTask.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityTask.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (hiddenTaskSubjctId.Value != null && hiddenTaskSubjctId.Value != "")
                {
                    objEntityTask.TaskSubjectId = Convert.ToInt32(hiddenTaskSubjctId.Value);

                }
                string strTaskDate = txtTaskDate.Text;
                string strHour = "", strMinute = "", strAM_PM = "";

                clsCommonLibrary objCommon = new clsCommonLibrary();
                if (strTaskDate != "")
                {
                    strHour = ddlTaskHr.SelectedValue.ToString();
                    strMinute = ddlTaskMin.SelectedValue.ToString();
                    strAM_PM = ddlTask_AM_PM.SelectedValue.ToString();
                    string strDateTime = strTaskDate + "-" + strHour + "-" + strMinute + "-" + strAM_PM;
                    objEntityTask.DueDate = objCommon.textWithTimeToDateTime(strDateTime);
                }
                objEntityTask.Description = txtTaskDescptn.Value.Trim();


                string strRandomLeadMixedId = hiddenLeadId.Value;

                //Status checkbox checked
                if (cbxTaskStatus.Checked == true)
                {
                    objEntityTask.TaskStatus = 1;
                }
                //Status checkbox not checked
                else
                {
                    objEntityTask.TaskStatus = 0;
                }

                if (Session["USERID"] != null)
                {
                    objEntityTask.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityTask.Date = System.DateTime.Now;
                objEntityTask.TaskId = Convert.ToInt32(hiddenTaskId.Value);
                objBusinessLeadIndvl.UpdateTask(objEntityTask);
                if(HiddenFieldTaskUpd.Value=="0")
                Response.Redirect("gen_LeadList.aspx?InsUpd=UpdTask");
                else
                Response.Redirect("gen_LeadList.aspx?InsUpd=StsTask");

            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    protected void btnCancelTaskSave_Click(object sender, EventArgs e)
    {
        try
        {

            if (hiddenLeadId.Value != null && hiddenLeadId.Value != "" && hiddenTaskId.Value != "")
            {
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityTask objEntityTask = new clsEntityTask();



                string strTaskClosedDate = txtCCancelTaskDate.Text;
                string strHour = "", strMinute = "", strAM_PM = "";

                clsCommonLibrary objCommon = new clsCommonLibrary();
                if (strTaskClosedDate != "")
                {
                    strHour = ddlCCancelTaskHr.SelectedValue.ToString();
                    strMinute = ddlCCancelTaskMin.SelectedValue.ToString();
                    strAM_PM = ddlCCancel_AM_PM.SelectedValue.ToString();
                    string strDateTime = strTaskClosedDate + "-" + strHour + "-" + strMinute + "-" + strAM_PM;
                    objEntityTask.Date = objCommon.textWithTimeToDateTime(strDateTime);
                }



                string strRandomLeadMixedId = hiddenLeadId.Value;



                if (Session["USERID"] != null)
                {
                    objEntityTask.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }


                objEntityTask.TaskId = Convert.ToInt32(hiddenTaskId.Value);

                objBusinessLeadIndvl.DeleteTask(objEntityTask);

                Response.Redirect("gen_LeadList.aspx?InsUpd=ClsTask");



            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    //It build the Html table by using the datatable provided
    public string ConvertDataTableToHTMLSelectOptions(DataTable dtSelect)
    {

        //add options

        string strOptn = "";
        for (int i = 0; i < dtSelect.Rows.Count; i++)
        {

            strOptn += "<option ";

            for (int j = 0; j < dtSelect.Columns.Count; j++)
            {
                if (j == 0)
                {//id
                    strOptn += "value=\"" + dtSelect.Rows[i][j].ToString() + "\">";
                }
                if (j == 1)
                {//name
                    strOptn += dtSelect.Rows[i][j].ToString();
                }


            }
            strOptn += "</option>";
        }
        string strDynamicOptions = strOptn;
        return strDynamicOptions;

    }
    private void LoadTaskTimeDropDowns()
    {
        ddlPlusWeek.Items.Clear();
        ddlTaskHr.Items.Clear();
        ddlTaskMin.Items.Clear();
        ddlTask_AM_PM.Items.Clear();
        ddlClsTaskHr.Items.Clear();
        ddlClsTaskMin.Items.Clear();
        ddlClsTaskAM_PM.Items.Clear();

        ddlCCancelTaskHr.Items.Clear();

        ddlCCancelTaskMin.Items.Clear();

        ddlCCancel_AM_PM.Items.Clear();
        for (int intHr = 1; intHr <= 12; intHr++)
        {
            string strHour = intHr.ToString("00");

            ddlTaskHr.Items.Add(strHour);

            ddlCCancelTaskHr.Items.Add(strHour);
            ddlClsTaskHr.Items.Add(strHour);
        }
        for (int intMin = 0; intMin <= 59; intMin = intMin + 5)
        {
            string strMinute = intMin.ToString("00");

            ddlTaskMin.Items.Add(strMinute);

            ddlCCancelTaskMin.Items.Add(strMinute);
            ddlClsTaskMin.Items.Add(strMinute);
        }
        ddlTask_AM_PM.Items.Add("AM");
        ddlTask_AM_PM.Items.Add("PM");

        ddlCCancel_AM_PM.Items.Add("AM");
        ddlCCancel_AM_PM.Items.Add("PM");
        ddlClsTaskAM_PM.Items.Add("AM");
        ddlClsTaskAM_PM.Items.Add("PM");

        ddlPlusWeek.Items.Add("--Select Week--");
        ListItem lst4Week = new ListItem("4 Weeks", "4");
        ddlPlusWeek.Items.Insert(1, lst4Week);
        ListItem lst3Week = new ListItem("3 Weeks", "3");
        ddlPlusWeek.Items.Insert(1, lst3Week);
        ListItem lst2Week = new ListItem("2 Weeks", "2");
        ddlPlusWeek.Items.Insert(1, lst2Week);
        ListItem lst1Week = new ListItem("1 Week", "1");
        ddlPlusWeek.Items.Insert(1, lst1Week);




    }

    protected void btnFollowUpSave_Click(object sender, EventArgs e)
    {
        try
        {
            if (hiddenLeadId.Value != null && hiddenLeadId.Value != "")
            {
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityFollowUp objEntityFollowUp = new clsEntityFollowUp();
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityFollowUp.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityFollowUp.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenFollowUpSrcId.Value != null && hiddenFollowUpSrcId.Value != "")
                {
                    objEntityFollowUp.LeadSourceId = Convert.ToInt32(hiddenFollowUpSrcId.Value);

                }
                string strFlUpDate = txtFollowUpDate.Text;
                clsCommonLibrary objCommon = new clsCommonLibrary();
                if (strFlUpDate != "")
                {
                    objEntityFollowUp.FollowUpDate = objCommon.textToDateTime(strFlUpDate);
                }
                objEntityFollowUp.Description = txtFollowUpDescptn.Value.Trim();


                string strRandomLeadMixedId = hiddenLeadId.Value;
                string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
                objEntityFollowUp.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityFollowUp.Lead_Id;

                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    Response.Redirect("~/Default.aspx");
                }

                if (Session["USERID"] != null)
                {
                    objEntityFollowUp.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityFollowUp.Date = System.DateTime.Now;


                objBusinessLeadIndvl.InsertFollowUp(objEntityFollowUp);
                Response.Redirect("gen_LeadList.aspx?InsUpd=InsFollowUp");
            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    [WebMethod]
    public static string ProjectLoad(string strLeadId)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();

        string strRandomMixedId = strLeadId;
        string id = strRandomMixedId;
        string strLenghtofId = strRandomMixedId.Substring(0, 2);
        int intLenghtofId = Convert.ToInt16(strLenghtofId);
        string strId = strRandomMixedId.Substring(2, intLenghtofId);
        objEntityLeadCreation.LeadId = Convert.ToInt32(strId);
        DataTable dtProject = objBusinessLeadIndvl.ProjectLead(objEntityLeadCreation);
        string projectInLead = "";
        if (dtProject.Rows.Count > 0)
        {
            if (dtProject.Rows[0]["PROJECT_ID"] == DBNull.Value && dtProject.Rows[0]["PROJECT_ID"].ToString() == "")
            {
                //evm0012
                //BIDDING :1 AWARDED :2
                projectInLead = "1";
                if (dtProject.Rows[0]["GUARNTMODE_ID"] != DBNull.Value && dtProject.Rows[0]["GUARNTMODE_ID"].ToString() != "")
                {
                    //101	Awarded , 102	Bidding
                    if (dtProject.Rows[0]["GUARNTMODE_ID"].ToString() == "102")
                    {
                        projectInLead = "1";
                    }
                    else if (dtProject.Rows[0]["GUARNTMODE_ID"].ToString() == "101")
                    {
                        projectInLead = "2";
                    }
                }
            }
            else
            {
                projectInLead = "0";
            }
        }
        return projectInLead;

    }
    protected void btnLossReasonSave_Click(object sender, EventArgs e)
    {
        try
        {
            if (hiddenLeadId.Value != null && hiddenLeadId.Value != "")
            {

                string strRandomMixedId = hiddenLeadId.Value;
                string id = strRandomMixedId;
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                LeadDetails(strId, 1);

                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityLeadCreation.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityLeadCreation.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityLeadCreation.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityLeadCreation.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (hiddenLossReasonId.Value != null && hiddenLossReasonId.Value != "")
                {
                    objEntityLeadCreation.LossReasonId = Convert.ToInt32(hiddenLossReasonId.Value);

                }


                clsCommonLibrary objCommon = new clsCommonLibrary();

                objEntityLeadCreation.Description = txtLossReasonDescptn.Value.Trim();


               
                objEntityLeadCreation.LeadId = Convert.ToInt32(strId);
                objEntityLeadCreation.Quotation_Id = Convert.ToInt32(hiddenQuotationIds.Value);
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    Response.Redirect("~/Default.aspx");
                }

                if (Session["USERID"] != null)
                {
                    objEntityLeadCreation.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }

                //for sending mail to the team head
                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                objEntityQuotation.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
                objEntityQuotation.Organisation_Id = objEntityLeadCreation.Org_Id;
                objEntityQuotation.Lead_Id = objEntityLeadCreation.LeadId;
                DataTable dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);

                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLeadCreation);




                objEntityLeadCreation.InsertDate = System.DateTime.Now;

                if (dtFromMail.Rows.Count > 0 && dtTeamHeadDtl.Rows.Count > 0)
                {

                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "LEAD LOSS - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString();


                    string StrMailContent = "Dear " + dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + " I would like to inform you that the status of the following lead have been changed to LOSS status " + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + "Lead Reference Number: " + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString() + Environment.NewLine + Environment.NewLine;

                    objEntityMail.Email_Content = StrMailContent + "Thanking you." + Environment.NewLine;

                    objEntityMail.To_Email_Address = dtTeamHeadDtl.Rows[0]["USR_EMAIL"].ToString();
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;
                    objEntityMail.User_Id = objEntityLeadCreation.User_Id;


                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;




                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);


                    }
                    catch (Exception ex)
                    {
                    }

                }

                objBusinessLeadIndvl.LossLead(objEntityLeadCreation);
                string strRegretMailEnabled = "";
                if (cbxSendRegretMail.Checked == true)
                {
                    strRegretMailEnabled = "&RgrtMail=1";
                }

                Response.Redirect("gen_LeadList.aspx?InsUpd=InsLoss");



            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    [WebMethod]
    public static string QuotanStsLoad(string strLeadId)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
        LeadSts objSts = new LeadSts();
        string strRandomMixedId = strLeadId;
        string id = strRandomMixedId;
        string strLenghtofId = strRandomMixedId.Substring(0, 2);
        int intLenghtofId = Convert.ToInt16(strLenghtofId);
        string strId = strRandomMixedId.Substring(2, intLenghtofId);
        objEntityLeadCreation.LeadId = Convert.ToInt32(strId);
        DataTable dtProject = objBusinessLeadIndvl.QuotationStsLead(objEntityLeadCreation);
        string projectInLead = "", strSts = "";
        if (dtProject.Rows.Count > 0)
        {
            strSts = objSts.ConvertDataTableToHTML(dtProject, strLeadId);
        }
        return strSts;
    }
    public class LeadSts
    {
        public string strtbConvert = "";
        public string ConvertDataTableToHTML(DataTable dt,string strLeadId)
        {
            clsBusinessLayer objBusiness = new clsBusinessLayer();
            clsEntityCommon objEntityCommon = new clsEntityCommon();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            string strRandom = objCommon.Random_Number();
            string strHtml = "";
         
            for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
            {               
                string strNetAmount = dt.Rows[0][2].ToString();
                if (strNetAmount != dt.Rows[intRowBodyCount][0].ToString())
                {
                      strHtml += "<li class=\"\">";
                      strHtml += "<a href=\"#\" id=\"ddlQoutSts" + intRowBodyCount + "_" + strLeadId + "\" onclick=\"return ChangeQuotSts('" + dt.Rows[intRowBodyCount][0].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "','" + strLeadId + "');\" title=\"" + dt.Rows[intRowBodyCount][1].ToString() + "\">";
                      string Sub = dt.Rows[intRowBodyCount][1].ToString().Substring(0,1);
                      strHtml += "<i class=\"opp_ico_img ble opp_acs csz\"><i class=\"\">" + Sub + "</i> </i>" + dt.Rows[intRowBodyCount][1].ToString();
                      strHtml += "</a>";
                      strHtml += "</li>";
                }
                else
                {
                     strHtml += "<li>";
                     strHtml += "<a href=\"#\" id=\"ddlQoutSts" + intRowBodyCount + "_" + strLeadId + "\" onclick=\"return ChangeQuotSts('" + dt.Rows[intRowBodyCount][0].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "','" + strLeadId + "');\" title=\"" + dt.Rows[intRowBodyCount][1].ToString() + "\">";
                     string Sub = dt.Rows[intRowBodyCount][1].ToString().Substring(0, 1);
                     strHtml += " <i class=\"opp_ico_img opp_acs csz1\"><i class=\"\">" + Sub + "</i> </i>" + dt.Rows[intRowBodyCount][1].ToString();
                     strHtml += "</a>";
                     strHtml += "</li>";                   
                }
            }
            return strHtml;
        }
    }
    [WebMethod]
    public static string QuotanStsSave(string strLeadId, string strId, string strName)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
        LeadSts objSts = new LeadSts();
        string strRandomMixedId = strLeadId;
        string id = strRandomMixedId;
        string strLenghtofId = strRandomMixedId.Substring(0, 2);
        int intLenghtofId = Convert.ToInt16(strLenghtofId);
        string strIdw = strRandomMixedId.Substring(2, intLenghtofId);
        objEntityLeadCreation.LeadId = Convert.ToInt32(strIdw);
        objEntityLeadCreation.Status = Convert.ToInt32(strId);
        objBusinessLeadIndvl.InsertQuotationSts(objEntityLeadCreation);
        string strSts = "";
        return strSts;
    }

    [WebMethod]
    public static string[] PartWinProductsLoad(string strOrgId, string strCorpId, string strQtnId, string strTempTyp, string strTaxEnable, string strPrdctGroup)
    {
        string[] strPassing = new string[4];
        clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl1 = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead1 = new clsEntityLeadCreation();
        string strRandomMixedId = strQtnId;
        string id = strRandomMixedId;
        string strLenghtofId = strRandomMixedId.Substring(0, 2);
        int intLenghtofId = Convert.ToInt16(strLenghtofId);
        string strId = strRandomMixedId.Substring(2, intLenghtofId);
        objEntityLead1.LeadId = Convert.ToInt32(strId);
        objEntityLead1.Corp_Id = Convert.ToInt32(strCorpId);
        DataTable dtQtn = objBusinessLeadIndvl1.Read_Indvidual_Lead_Qtan(objEntityLead1);
        if (dtQtn.Rows.Count > 0)
        {
            strTempTyp = dtQtn.Rows[0]["QTN_TMPLT_ID"].ToString();
            strQtnId = dtQtn.Rows[0]["LDQUOT_ID"].ToString();
        }
        clsCommonLibrary.CORP_GLOBAL[] arrEnumer = { 
                                                               clsCommonLibrary.CORP_GLOBAL.CMN_PERCENT_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.TAX_PERC_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_MNEY_DECIMAL_CNT,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_UNIT_DECIMAL_CNT,
                                                               clsCommonLibrary.CORP_GLOBAL.DEFLT_CURNCY_MST_ID,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_TAX_ENABLED,
                                                               clsCommonLibrary.CORP_GLOBAL.ITEM_LISTING_MODE,
                                                               clsCommonLibrary.CORP_GLOBAL.DFLT_CURNCY_DISPLAY                                                                     
                                                              };
        DataTable dtCorpDetail = new DataTable();
        dtCorpDetail = objBusinessLayer.LoadGlobalDetail(arrEnumer, Convert.ToInt32(strCorpId));
        if (dtCorpDetail.Rows.Count > 0)
        {
            strTaxEnable = dtCorpDetail.Rows[0]["GN_TAX_ENABLED"].ToString();
            strPassing[3] = strTaxEnable;
            strPassing[2] = dtCorpDetail.Rows[0]["GN_MNEY_DECIMAL_CNT"].ToString();
        }
        clsCommonLibrary objCommon = new clsCommonLibrary();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
       
        objEntityQuotation.Organisation_Id = Convert.ToInt32(strOrgId);
        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(strCorpId);
        objEntityQuotation.QuotationId = Convert.ToInt32(strQtnId);
        int DetailGroupid = Convert.ToInt32(strPrdctGroup);
        objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(strTempTyp);
        StringBuilder sb = new StringBuilder();
        DataTable dtQtnDtl = new DataTable();
        dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);

        double dbTotalAmount = 0;
        if (dtQtnDtl.Rows.Count > 0)
        {
             sb.Append("<table id=\"ReportTableForPartial\" class=\"display table-bordered tbl_1024\" cellspacing=\"0\" width=\"100%\">");
              sb.Append("<thead class=\"thead1\">");
                sb.Append("<tr>");
                sb.Append(" <th class=\"th_b2 tr_l\" style=\"display: none;\">PRO</th>");
                 sb.Append(" <th class=\"th_b2 tr_l\">PRODUCT / Service</th>");
                 sb.Append(" <th class=\"th_b6 tr_c\">Category</th>");
                 sb.Append(" <th class=\"th_b6 tr_c\">UNIT</th>");
                 sb.Append(" <th class=\"th_b1 tr_c\">QTY</th>");
                 sb.Append(" <th class=\"th_b7 tr_r\">COST PRICE</th>");
                 sb.Append(" <th class=\"th_b6 tr_c\">Selling<br> Price</th>");
                if (strTaxEnable == "1")
                {
                 sb.Append(" <th class=\"th_b7 tr_l\">Tax %</th>");
                  sb.Append("<th class=\"th_b6 tr_c\">Tax Amount</th>");
                 }
                 sb.Append(" <th class=\"th_b7 tr_c\">Discount<br> Amount</th>");
            sb.Append(" <th class=\"th_b6 tr_r\">Total</th>");
             
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("<tbody>");
            if (objEntityQuotation.QuotationTemplateTypeId == 1)
            {
                if (strTaxEnable == "1")
                {
                    foreach (DataRow tableRow in dtQtnDtl.Rows)
                    {
                        if (tableRow["QUOTNDTLGRP_ID"].ToString() == strPrdctGroup || strPrdctGroup == "0")
                        {
                            if (tableRow["QUOTNDTL_WIN_STS_TRCK"].ToString() == "1")
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" class=\"selected\">");
                            }
                            else
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" >");
                            }
                            sb.Append("<td style=\"display: none;\" >" + tableRow[0] + "</td>");
                            sb.Append("<td  class=\"tr_l\">" + tableRow["PRDT NAME"] + "</td>");
                            sb.Append("<td  class=\"tr_l\">" + tableRow["CATGRY_NAME"] + "</td>");
                            sb.Append("<td >" + tableRow["UOM_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_QTY"] + "</td>");
                            sb.Append("<td class=\"tr_r\">" + tableRow["QUOTNDTL_PRICE"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_RATE"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_TAX_PERC"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_TAX_AMNT"] + "</td>");                         
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_DISC_AMNT"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_AMOUNT"] + " " + tableRow["CRNCMST_ABBRV"] + "</td>");

                            sb.Append("</tr  >");

                            dbTotalAmount = dbTotalAmount + Convert.ToDouble(tableRow["QUOTNDTL_AMOUNT"]);
                        }
                    }
                }
                else
                {
                    foreach (DataRow tableRow in dtQtnDtl.Rows)
                    {
                        if (tableRow["QUOTNDTLGRP_ID"].ToString() == strPrdctGroup || strPrdctGroup == "0")
                        {
                            if (tableRow["QUOTNDTL_WIN_STS_TRCK"].ToString() == "1")
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" class=\"selected\">");
                            }
                            else
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" >");
                            }
                            sb.Append("<td style=\"display: none;\" >" + tableRow[0] + "</td>");
                            sb.Append("<td class=\"tr_l\">" + tableRow["PRDT NAME"] + "</td>");
                            sb.Append("<td  class=\"tr_l\">" + tableRow["CATGRY_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["UOM_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_QTY"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_PRICE"] + "</td>");
                            sb.Append("<td class=\"tr_r\">" + tableRow["QUOTNDTL_RATE"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_DISC_AMNT"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_AMOUNT"] + " " + tableRow["CRNCMST_ABBRV"] + "</td>");

                            sb.Append("</tr  >");

                            dbTotalAmount = dbTotalAmount + Convert.ToDouble(tableRow["QUOTNDTL_AMOUNT"]);
                        }
                    }
                }
            }
            else
            {
                if (strTaxEnable == "1")
                {
                    foreach (DataRow tableRow in dtQtnDtl.Rows)
                    {
                        if (tableRow["QUOTNDTLGRP_ID"].ToString() == strPrdctGroup || strPrdctGroup == "0")
                        {
                            if (tableRow["QUOTNDTL_WIN_STS_TRCK"].ToString() == "1")
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" class=\"selected\">");
                            }
                            else
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" >");
                            }
                            sb.Append("<td style=\"display: none;\" >" + tableRow[0] + "</td>");
                            sb.Append("<td  class=\"tr_l\">" + tableRow["PRDT_NAME"] + "</td>");
                            sb.Append("<td class=\"tr_l\" >" + tableRow["CATGRY_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["UOM_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_QTY"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_PRICE"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_RATE"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_TAX_PERC"] + "</td>");
                            sb.Append("<td class=\"tr_r\" >" + tableRow["QUOTNDTL_TAX_AMNT"] + "</td>");

                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_DISC_AMNT"] + "</td>");
                            sb.Append("<td class=\"tr_r\" >" + tableRow["QUOTNDTL_AMOUNT"] + " " + tableRow["CRNCMST_ABBRV"] + "</td>");

                            sb.Append("</tr  >");
                            dbTotalAmount = dbTotalAmount + Convert.ToDouble(tableRow["QUOTNDTL_AMOUNT"]);
                        }
                    }
                }
                else
                {
                    foreach (DataRow tableRow in dtQtnDtl.Rows)
                    {
                        if (tableRow["QUOTNDTLGRP_ID"].ToString() == strPrdctGroup || strPrdctGroup == "0")
                        {
                            if (tableRow["QUOTNDTL_WIN_STS_TRCK"].ToString() == "1")
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" class=\"selected\">");
                            }
                            else
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" >");
                            }
                            sb.Append("<td style=\"display: none;\" >" + tableRow[0] + "</td>");
                            sb.Append("<td  class=\"tr_l\" >" + tableRow["PRDT_NAME"] + "</td>");
                            sb.Append("<td   class=\"tr_l\">" + tableRow["CATGRY_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["UOM_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_QTY"] + "</td>");
                            sb.Append("<td   class=\"tr_r\">" + tableRow["QUOTNDTL_PRICE"] + "</td>");
                            sb.Append("<td  class=\"tr_r\" >" + tableRow["QUOTNDTL_RATE"] + "</td>");
                            sb.Append("<td   class=\"tr_r\">" + tableRow["QUOTNDTL_DISC_AMNT"] + "</td>");
                            sb.Append("<td   class=\"tr_r\">" + tableRow["QUOTNDTL_AMOUNT"] + " " + tableRow["CRNCMST_ABBRV"] + "</td>");

                            sb.Append("</tr  >");
                            dbTotalAmount = dbTotalAmount + Convert.ToDouble(tableRow["QUOTNDTL_AMOUNT"]);
                        }
                    }
                }
            }
            sb.Append("</tbody>");
        }
        strPassing[0] = sb.ToString();
        strPassing[1] = dbTotalAmount.ToString();
        return strPassing;
    }

    [WebMethod]
    public static string BindPrdctGrp(string strLeadId, string strCorpId)
    {
        string strHtml = "";
        string strRandomMixedId = strLeadId;
        string id = strRandomMixedId;
        string strLenghtofId = strRandomMixedId.Substring(0, 2);
        int intLenghtofId = Convert.ToInt16(strLenghtofId);
        string strIdw = strRandomMixedId.Substring(2, intLenghtofId);
        if (strIdw != "")
        {
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl1 = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead1 = new clsEntityLeadCreation();
            objEntityLead1.LeadId = Convert.ToInt32(strIdw);
            objEntityLead1.Corp_Id = Convert.ToInt32(strCorpId);
            DataTable dtQtn = objBusinessLeadIndvl1.Read_Indvidual_Lead_Qtan(objEntityLead1);
            if (dtQtn.Rows.Count > 0)
            {
                objEntityQuotation.QuotationId = Convert.ToInt32(dtQtn.Rows[0]["LDQUOT_ID"].ToString());
            }
            if (strCorpId != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(strCorpId);
            }
            DataTable dtQtnDtlGroup = new DataTable();
            dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
            if (dtQtnDtlGroup.Rows.Count > 0)
            {
                for(int i=0;i<dtQtnDtlGroup.Rows.Count;i++){
                    strHtml +="<option value=\"" + dtQtnDtlGroup.Rows[i]["QUOTNDTLGRP_ID"].ToString() + "\">" + dtQtnDtlGroup.Rows[i]["QTNDTLGRP_NAME"].ToString() + "</option>";
                }
            }
            else
            {
                strHtml += "<option>--SELECT GROUP--</option>";
            }
        }
        return strHtml;
    }
    [WebMethod]
    public static List<string[]> ReadMailAttachment(string strLeadMailId)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
        objEntityLeadCreation.MailBoxId = Convert.ToInt64(strLeadMailId);
        DataTable dtMailAttch = objBusinessLeadIndvl.ReadMailAttch_ById(objEntityLeadCreation);

        List<string[]> StringArrayList = new List<string[]>();
        if (dtMailAttch.Rows.Count != 0)
        {
            for (int intRowCount = 0; intRowCount < dtMailAttch.Rows.Count; intRowCount++)
            {
                string[] strMailAttchArray = new string[4];
                strMailAttchArray[0] = dtMailAttch.Rows[intRowCount]["LDMAILATT_ID"].ToString();
                strMailAttchArray[1] = dtMailAttch.Rows[intRowCount]["LDMAILATT_FILENAME"].ToString();
                strMailAttchArray[2] = dtMailAttch.Rows[intRowCount]["LDMAILATT_FLNM_ACT"].ToString();
                strMailAttchArray[3] = dtMailAttch.Rows[0]["LDMAIL_STS"].ToString();
                StringArrayList.Add(strMailAttchArray);
            }

        }
        return StringArrayList;
    }
    protected void btnRejectMail_Click(object sender, EventArgs e)
    {
        if (hiddenLeadId.Value != null && hiddenLeadId.Value!="")
        {

            string strRandomLeadMixedId = hiddenLeadId.Value;
            string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);

            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            if (hiddenLeadMailId.Value != "")
            {
                objEntityLead.MailBoxId = Convert.ToInt64(hiddenLeadMailId.Value);
            }
            try
            {
                objBusinessLayerIndividual.RejectMail(objEntityLead);
                Response.Redirect("gen_LeadList.aspx?InsUpd=InsMailR");
            }
            catch
            {
            }

        }
    }
    protected void btnReSendMail_Click(object sender, EventArgs e)
    {

        clsCommonLibrary objComm = new clsCommonLibrary();

        if (hiddenLeadId.Value != null && hiddenLeadId.Value != "" && hiddenLeadMailId.Value != "")
        {
            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            if (hiddenLeadId.Value != "")
            {
                string strRandomLeadMixedId = hiddenLeadId.Value;
                string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
                objEntityLead.LeadId = Convert.ToInt32(strId);
            }
            if (Session["USERID"] != null)
            {
                objEntityLead.User_Id = Convert.ToInt32(Session["USERID"]);
            }
            else if (Session["USERID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }

            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLead);
            if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
            {
                Response.Redirect("~/Default.aspx");
            }

            DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
            DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);

            if (dtFromMail.Rows.Count == 0)
            {
                Response.Redirect("~/Default.aspx");
            }
            if (dtToMail.Rows.Count == 0)
            {
                Response.Redirect("~/Default.aspx");
            }
            else
            {
                if (dtToMail.Rows[0]["LEADS_EMAIL"] == DBNull.Value)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }


            clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
            objEntityMail.Email_Subject = txtMailSubject.Text;
            objEntityMail.Email_Content = txtMailContent.Value;
            //objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
            //objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

            objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();

            objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
            objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
            objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
            objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
            objEntityMail.User_Id = objEntityLead.User_Id;
            if (hiddenLeadId.Value != "")
            {
                string strRandomLeadMixedId = hiddenLeadId.Value;
                string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
                objEntityMail.Lead_Id = Convert.ToInt32(strId);
            }

            objEntityMail.D_Date = System.DateTime.Now;
            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityMail.Corporate_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityMail.Corporate_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
            objEntityLead.MailBoxId = Convert.ToInt64(hiddenLeadMailId.Value);
            DataTable dtMailAttch = objBusinessLayerIndividual.ReadMailAttch_ById(objEntityLead);
            for (int intCount = 0; intCount < dtMailAttch.Rows.Count; intCount++)
            {
                clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();
                objEntityAttach.Email_Real_Name = dtMailAttch.Rows[0]["LDMAILATT_FLNM_ACT"].ToString();
                objEntityAttach.Email_File_Name = dtMailAttch.Rows[0]["LDMAILATT_FILENAME"].ToString();
                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.Lead_Mail_Attachment);
                objEntityAttach.Attch_Path = Server.MapPath(strImagePath + objEntityAttach.Email_File_Name);
                objEntityMailAttachList.Add(objEntityAttach);
            }



            List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();
            string strToFullId = txtToAddress.Text;
            if (strToFullId != "" && strToFullId != null)
            {
                string[] strToSplitId = strToFullId.Split(',');
                int intSplitCountTo = strToSplitId.Length;
                objEntityMail.To_Email_Address = strToSplitId[0].ToString();

                for (int intCount = 1; intCount < intSplitCountTo; intCount++)
                {

                    classEntityToMailAddress objEntityToMailAddress = new classEntityToMailAddress();
                    objEntityToMailAddress.ToAddress = strToSplitId[intCount].ToString().Trim();
                    objEntityToMailAddressList.Add(objEntityToMailAddress);

                }
            }


            List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();

            string strCcFullId = txtCccontent.Text;
            if (strCcFullId != "" && strCcFullId != null)
            {
                string[] strCCSplitId = strCcFullId.Split(',');
                int intSplitCountCc = strCCSplitId.Length;

                for (int intCount = 0; intCount < intSplitCountCc; intCount++)
                {
                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                    objEntityMailCcBCc.CcMail = strCCSplitId[intCount].ToString().Trim();

                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                }
            }
            string strBCcFullId = txtBCccontent.Text;
            if (strBCcFullId != "" && strBCcFullId != null)
            {
                string[] strBCCSplitId = strBCcFullId.Split(',');
                int intSplitCountBCc = strBCCSplitId.Length;

                for (int intCount = 0; intCount < intSplitCountBCc; intCount++)
                {
                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                    objEntityMailCcBCc.BCcMail = strBCCSplitId[intCount].ToString().Trim();
                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                }
            }



            int intmail = 1;


            try
            {
                MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                //passing 1 for sucessfull mail send
                objBusinessLayerIndividual.UpdateLeadMail(objEntityMail, 1);
            }
            catch
            {
                intmail = 2;
                //passing 2 for lost mail send
                objBusinessLayerIndividual.UpdateLeadMail(objEntityMail, 2);
            }



            if (intmail == 1)
            {
                Response.Redirect("gen_LeadList.aspx?InsUpd=UpdMailS");
            }
            else
            {
                Response.Redirect("gen_LeadList.aspx?InsUpd=UpdMailU");
            }
        }
    }
}