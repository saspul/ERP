using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using BL_Compzit;
using EL_Compzit;
using CL_Compzit;
using System.Data;
using System.Text;
using System.Web.Services;
using System.Web.Script.Serialization;
using System.IO;
using PdfSharp;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using PdfSharp.Drawing.Layout;

public partial class MasterPage_Default2 : System.Web.UI.Page
{


    protected void Page_Load(object sender, EventArgs e)
    {
        //imgbtnWin.ImageUrl = "/Images/Icons/thumbs-up.png";
        //imgbtnLoss.ImageUrl = "/Images/Icons/thumbs-down.png";
        //imgbtnReOpen.ImageUrl = "/Images/Icons/Reopen.png";
        if (!IsPostBack)
        {
            hiddenRegretMailForLeadID.Value = "";
            ExistingEmployeeLoad();
            CKEditorDescription.config.toolbar = new object[] { };
            CKEditorDescription.config.resize_enabled = false;
            CKEditorDescription.config.removePlugins = "liststyle,tabletools,scayt,menubutton,contextmenu,elementspath";
            CKEditorDescription.config.height = "300";
            CKEditorDescription.config.uiColor = "#0680bd";

            if (Request.QueryString["L_MODE"] != null)
            {
                string strL_MODE = Request.QueryString["L_MODE"].ToString();
                hiddenL_MODE.Value = strL_MODE;
            }
            else
            {
                hiddenL_MODE.Value = "";
            }



            this.Form.Enctype = "multipart/form-data";
            int intUserId = 0, intUsrRolMstrId, intEnableAdd = 0, intEnableModify = 0, intEnableReOpen = 0, intEnableWin = 0, intEnableLoss = 0, intEnableAllocate = 0;

            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsEntityTask objEntityTask = new clsEntityTask();
            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            if (Session["USERID"] != null)
            {
                intUserId = Convert.ToInt32(Session["USERID"]);
            }
            else if (Session["USERID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
            //Allocating child roles
            intUsrRolMstrId = Convert.ToInt32(clsCommonLibrary.USR_ROLE_MSTR.New_Lead);
            DataTable dtChildRol = objBusinessLayer.LoadChildRoleDefnDetail(intUserId, intUsrRolMstrId);

            if (dtChildRol.Rows.Count > 0)
            {
                string strChildRolDeftn = dtChildRol.Rows[0]["USRROL_CHLDRL_DEFN"].ToString();

                string[] strChildDefArrWords = strChildRolDeftn.Split('-');
                foreach (string strC_Role in strChildDefArrWords)
                {
                    if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Add).ToString())
                    {
                        intEnableAdd = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Modify).ToString())
                    {
                        intEnableModify = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Cancel).ToString())
                    {
                        //future

                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Find).ToString())
                    {
                        //future

                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Rate_Updation).ToString())
                    {
                        //future

                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Win).ToString())
                    {
                        intEnableWin = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);


                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Loss).ToString())
                    {
                        intEnableLoss = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);


                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Re_Open).ToString())
                    {
                        intEnableReOpen = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);


                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Allocate).ToString())
                    {
                        intEnableAllocate = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);


                    }

                }

                if (intEnableAllocate == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    btnAllocate.Visible = true;

                }
                else
                {

                    btnAllocate.Visible = false;

                }

                if (intEnableWin == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    imgbtnWin.Visible = true;
                    imgbtnPartialWin.Visible = true;
                }
                else
                {

                    imgbtnWin.Visible = false;
                    imgbtnPartialWin.Visible = false;

                }

                if (intEnableLoss == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    imgbtnLoss.Visible = true;

                }
                else
                {

                    imgbtnLoss.Visible = false;

                }
                if (intEnableReOpen == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    //imgbtnReOpen.Visible = true;

                }
                else
                {

                    //imgbtnReOpen.Visible = false;

                }
                int intCorpId = 0;
                if (Session["CORPOFFICEID"] != null)
                {
                    hiddenCorporateId.Value = Session["CORPOFFICEID"].ToString();
                    intCorpId = Convert.ToInt32(Session["CORPOFFICEID"].ToString());
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("../../Default.aspx");
                }
                if (Session["ORGID"] != null)
                {
                    hiddenOrganisationId.Value = Session["ORGID"].ToString();
                }
                else if (Session["ORGID"] == null)
                {
                    Response.Redirect("../../Default.aspx");
                }

                clsCommonLibrary.CORP_GLOBAL[] arrEnumer = { 
                                                               clsCommonLibrary.CORP_GLOBAL.CMN_PERCENT_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.TAX_PERC_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_MNEY_DECIMAL_CNT,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_UNIT_DECIMAL_CNT,
                                                                clsCommonLibrary.CORP_GLOBAL.DEFLT_CURNCY_MST_ID,
                                                                  clsCommonLibrary.CORP_GLOBAL.GN_TAX_ENABLED,
                                                                    clsCommonLibrary.CORP_GLOBAL.ITEM_LISTING_MODE,
                                                                        clsCommonLibrary.CORP_GLOBAL.DFLT_CURNCY_DISPLAY
                                                                     
                                                              };
                DataTable dtCorpDetail = new DataTable();
                dtCorpDetail = objBusinessLayer.LoadGlobalDetail(arrEnumer, intCorpId);
                if (dtCorpDetail.Rows.Count > 0)
                {

                    hiddenFloatingValueMoney.Value = dtCorpDetail.Rows[0]["GN_MNEY_DECIMAL_CNT"].ToString();
                    hiddenFloatingValueTaxPercentage.Value = dtCorpDetail.Rows[0]["TAX_PERC_DECIMAL"].ToString();
                    hiddenFloatingValueUnit.Value = dtCorpDetail.Rows[0]["GN_UNIT_DECIMAL_CNT"].ToString(); ;
                    hiddenTaxEnabled.Value = dtCorpDetail.Rows[0]["GN_TAX_ENABLED"].ToString();
                    hiddenFloatingValueCommonPercentage.Value = dtCorpDetail.Rows[0]["CMN_PERCENT_DECIMAL"].ToString();
                    hiddenDfltCurrencyMstrId.Value = dtCorpDetail.Rows[0]["DEFLT_CURNCY_MST_ID"].ToString();
                    hiddenDfltCurrencyDisplay.Value = dtCorpDetail.Rows[0]["DFLT_CURNCY_DISPLAY"].ToString();
                }



                hiddenUserId.Value = intUserId.ToString();

                clsBusinessLayer objBusiness = new clsBusinessLayer();
                string strCurrentDate = objBusiness.LoadCurrentDateInString();

                hiddenCurrentDate.Value = strCurrentDate;
                // FOR TASK TIME SELECT
                LoadTaskTimeDropDowns();

                //for Task Subject drop down in Task ddl
                DataTable dtTaskSubjctList = objBusinessLeadIndvl.Read_TaskSubject();
                divOptionsTaskSubject.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtTaskSubjctList);

                //for Loss Reason drop down in loss Reason ddl
                DataTable dtLossReasonList = objBusinessLeadIndvl.Read_LoseRsn();
                divOptionsLossReason.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtLossReasonList);

                //for lead source drop down in follow up ddl
                DataTable dtSourceList = objBusinessLeadIndvl.Read_LeadSource();
                divOptionsLeadSource.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtSourceList);
                if (Request.QueryString["InsUpd"] != null)
                {
                    string strInsUpd = Request.QueryString["InsUpd"].ToString();
                    if (strInsUpd == "InsFollowUp")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessInsertionFollowUp", "SuccessInsertionFollowUp();", true);
                    }
                    else if (strInsUpd == "InsTask")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessInsertionTask", "SuccessInsertionTask();", true);
                    }
                    else if (strInsUpd == "UpdTask")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessUpdationTask", "SuccessUpdationTask();", true);
                    }
                    else if (strInsUpd == "StsTask")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessUpdationTaskSts", "SuccessUpdationTaskSts();", true);
                    }
                    else if (strInsUpd == "InsLoss")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessLoss", "SuccessLoss('" + objCommon.GetMsg(clsCommonLibrary.MSG_SECTION.LEAD_LOST) + "');", true);
                    }
                    else if (strInsUpd == "InsWin")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessWin", "SuccessWin('" + objCommon.GetMsg(clsCommonLibrary.MSG_SECTION.LEAD_WON) + "');", true);
                    }
                    else if (strInsUpd == "InsReOpn")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessReOpen", "SuccessReOpen();", true);
                    }
                    else if (strInsUpd == "InsAlc")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessAllocation", "SuccessAllocation();", true);
                    }
                    else if (strInsUpd == "InsMailS")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessMail", "SuccessMail();", true);
                    }
                    else if (strInsUpd == "InsMailU")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessMail", "UnSuccessMail();", true);
                    }
                    else if (strInsUpd == "UpdMailS")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "UpdateSuccessMail", "UpdateSuccessMail();", true);
                    }
                    else if (strInsUpd == "UpdMailU")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "UpdateUnSuccessMail", "UpdateUnSuccessMail();", true);
                    }
                    else if (strInsUpd == "InsMailR")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "RejectedMail", "RejectedMail();", true);
                    }
                    else if (strInsUpd == "new")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessUpdation", "SuccessUpdation();", true);
                    }
                    else if (strInsUpd == "ClsTask")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessCancelationTask", "SuccessCancelationTask();", true);
                    }
                    else if (strInsUpd == "InsAddAtt")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessInsertAddtnlQtnAttch", "SuccessInsertAddtnlQtnAttch();", true);
                    }
                    else if (strInsUpd == "DelAddAtt")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessDeleteAddtnlQtnAttch", "SuccessDeleteAddtnlQtnAttch();", true);
                    }
                    else if (strInsUpd == "InsAddSupplr")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessInsertSupplierQtnAttch", "SuccessInsertSupplierQtnAttch();", true);
                    }
                    else if (strInsUpd == "DelSuppAtt")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessDeleteSupplierQtnAttch", "SuccessDeleteSupplierQtnAttch();", true);
                    }
                    else if (strInsUpd == "InsTenderAtt")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessInsertTenderQtnAttch", "SuccessInsertTenderQtnAttch();", true);
                    }
                    else if (strInsUpd == "DelTenderAtt")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessDeleteTenderQtnAttch", "SuccessDeleteTenderQtnAttch();", true);
                    }
                    else if (strInsUpd == "ANL")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessAddedNewLead", "SuccessAddedNewLead();", true);
                    }
                    else if (strInsUpd == "StsChange")
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessStatusChange", "SuccessStatusChange();", true);
                    }
                }

                if (Request.QueryString["Id"] != null)
                {
                    string strRandomMixedId = Request.QueryString["Id"].ToString();
                   
                    string strLenghtofId = strRandomMixedId.Substring(0, 2);
                    int intLenghtofId = Convert.ToInt16(strLenghtofId);
                    string strId = strRandomMixedId.Substring(2, intLenghtofId);
                    hiddenLeadId.Value = strId;
                    View(strId, intUserId, intEnableModify);
                    //check for user needs to send mail
                    if (Request.QueryString["RgrtMail"] != null && Request.QueryString["Id"] != null)
                    {
                        string strRgrtMail = Request.QueryString["RgrtMail"].ToString();

                        if (strRgrtMail == "1")
                        {

                            hiddenRegretMailForLeadID.Value = strId;
                            objEntityLead.User_Id = intUserId;
                            objEntityLead.LeadId = Convert.ToInt32(hiddenLeadId.Value);
                            DataTable dtFromMail = objBusinessLeadIndvl.ReadFromMailAddress(objEntityLead);
                            DataTable dtToMail = objBusinessLeadIndvl.ReadToMailAddress(objEntityLead);
                            DataTable dtOtherToAdress = objBusinessLeadIndvl.ReadOtherToMail(objEntityLead);
                            clsBusinessLayerLeadCreation objBusinesLead = new clsBusinessLayerLeadCreation();
                         
                            DataTable dtOtherContacts = objBusinesLead.Read_Contact_ById(objEntityLead);
                            if (dtFromMail.Rows.Count > 0)
                            {
                                if (dtToMail.Rows.Count > 0)
                                {
                                    if (dtToMail.Rows[0]["LEADS_EMAIL"] != DBNull.Value)
                                    {

                                        if (dtOtherToAdress.Rows.Count > 0)
                                        {
                                            string OtherTo = "";
                                            foreach (DataRow RW in dtOtherToAdress.Rows)
                                            {
                                                OtherTo = RW["LDCNT_EMAIL"].ToString() + "," + OtherTo;
                                            }
                                            if (OtherTo != "")
                                            {
                                                hiddenOtherToAddress.Value = OtherTo.Remove(OtherTo.Length - 1); ;
                                            }
                                        }
                                        if (dtOtherContacts.Rows.Count > 0)
                                        {
                                            for (int intRowCount = 0; intRowCount < dtOtherContacts.Rows.Count; intRowCount++)
                                            {
                                                if (hiddenOtherToAddress.Value == "")
                                                {
                                                    hiddenOtherToAddress.Value = dtOtherContacts.Rows[intRowCount]["LDCNT_EMAIL"].ToString();
                                                }
                                                else
                                                {
                                                    hiddenOtherToAddress.Value += "," + dtOtherContacts.Rows[intRowCount]["LDCNT_EMAIL"].ToString();
                                                }
                                            }
                                        }

                                        hiddenMailToAddress.Value = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();
                                        hiddenMailFrom.Value = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                                        hiddenMailSubject.Value = "Enquiry - " + dtToMail.Rows[0]["CORPRT_NAME_SHORT"].ToString() + "/" + dtToMail.Rows[0]["CPRDIV_CODE"].ToString() + "/[" + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + "]";
                                        hiddenMailSignature.Value = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                                        string StrMailContent = "Dear " + lblCustName.Text + " ," + Environment.NewLine + Environment.NewLine;
                                        StrMailContent = StrMailContent + "I am writing this letter to you on behalf of our management and considering your request we had a talk in our meeting and we are sorry to say that according to the norms of our company we cannot take your quotation." + Environment.NewLine + Environment.NewLine;
                                        StrMailContent = StrMailContent + "So we cannot accept your proposal. We know well that your company is the best and we would be grateful to have you as our partner. But, the rules of our company cannot be neglected and hence it was decided in the management meeting that we can’t accept your proposal." + Environment.NewLine + Environment.NewLine;
                                        StrMailContent = StrMailContent + "We apologize for rejecting your proposal and wish you luck for your future endeavours. " + Environment.NewLine + Environment.NewLine;
                                        StrMailContent = StrMailContent + "Thanking You" + Environment.NewLine + Environment.NewLine;
                                        StrMailContent = StrMailContent + "Yours truly," + Environment.NewLine + Environment.NewLine;
                                        hiddenRegretMailContent.Value = StrMailContent;


                                    }
                                    else
                                    {
                                        //invalid case
                                        hiddenLeadId.Value = "";
                                    }
                                }
                                else
                                {
                                    //invalid case
                                    hiddenLeadId.Value = "";
                                }
                            }

                        }
                    }
                }



            }
            else
            {
                btnAllocate.Visible = false;
                //imgbtnReOpen.Visible = false;
                imgbtnLoss.Visible = false;
                imgbtnWin.Visible = false;
                imgbtnPartialWin.Visible = false;
            }

            hiddenAdditnFileSize.Value = Convert.ToInt32(clsCommonLibrary.IMAGE_SIZE.QTN_ADDITIONAL).ToString();

            //for partial win purpose
            if (imgbtnPartialWin.Visible == true)
            {
                if (hiddenQuotationID.Value != "")
                {
                    clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                    clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                    objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"].ToString());
                    }
                    DataTable dtQtnDtlGroup = new DataTable();
                    dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);

                    if (dtQtnDtlGroup.Rows.Count > 0)
                    {
                        ddlProductGroup.DataSource = dtQtnDtlGroup;
                        ddlProductGroup.DataTextField = "QTNDTLGRP_NAME";
                        ddlProductGroup.DataValueField = "QUOTNDTLGRP_ID";
                        ddlProductGroup.DataBind();
                      
                    }
                    else
                    {
                        ddlProductGroup.Items.Insert(0, "--SELECT GROUP--");
                    }
                }
            }

        }
    }

    private void LoadTaskTimeDropDowns()
    {
        ddlPlusWeek.Items.Clear();
        ddlTaskHr.Items.Clear();
        ddlTaskMin.Items.Clear();
        ddlTask_AM_PM.Items.Clear();
        ddlClsTaskHr.Items.Clear();
        ddlClsTaskMin.Items.Clear();
        ddlClsTaskAM_PM.Items.Clear();

        ddlCCancelTaskHr.Items.Clear();

        ddlCCancelTaskMin.Items.Clear();

        ddlCCancel_AM_PM.Items.Clear();
        for (int intHr = 1; intHr <= 12; intHr++)
        {
            string strHour = intHr.ToString("00");

            ddlTaskHr.Items.Add(strHour);

            ddlCCancelTaskHr.Items.Add(strHour);
            ddlClsTaskHr.Items.Add(strHour);
        }
        for (int intMin = 0; intMin <= 59; intMin = intMin + 5)
        {
            string strMinute = intMin.ToString("00");

            ddlTaskMin.Items.Add(strMinute);

            ddlCCancelTaskMin.Items.Add(strMinute);
            ddlClsTaskMin.Items.Add(strMinute);
        }
        ddlTask_AM_PM.Items.Add("AM");
        ddlTask_AM_PM.Items.Add("PM");

        ddlCCancel_AM_PM.Items.Add("AM");
        ddlCCancel_AM_PM.Items.Add("PM");
        ddlClsTaskAM_PM.Items.Add("AM");
        ddlClsTaskAM_PM.Items.Add("PM");

        ddlPlusWeek.Items.Add("--Select Week--");
        ListItem lst4Week = new ListItem("4 Weeks", "4");
        ddlPlusWeek.Items.Insert(1, lst4Week);
        ListItem lst3Week = new ListItem("3 Weeks", "3");
        ddlPlusWeek.Items.Insert(1, lst3Week);
        ListItem lst2Week = new ListItem("2 Weeks", "2");
        ddlPlusWeek.Items.Insert(1, lst2Week);
        ListItem lst1Week = new ListItem("1 Week", "1");
        ddlPlusWeek.Items.Insert(1, lst1Week);




    }

    //It build the Html table by using the datatable provided
    public string ConvertDataTableToHTMLSelectOptions(DataTable dtSelect)
    {

        //add options

        string strOptn = "";
        for (int i = 0; i < dtSelect.Rows.Count; i++)
        {

            strOptn += "<option ";

            for (int j = 0; j < dtSelect.Columns.Count; j++)
            {
                if (j == 0)
                {//id
                    strOptn += "value=\"" + dtSelect.Rows[i][j].ToString() + "\">";
                }
                if (j == 1)
                {//name
                    strOptn += dtSelect.Rows[i][j].ToString();
                }


            }
            strOptn += "</option>";
        }
        string strDynamicOptions = strOptn;
        return strDynamicOptions;

    }



    private void View(string strId, int intUserId, int intEnableModify)
    {

        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
        clsCommonLibrary objCommon = new clsCommonLibrary();
        hiddenMailFilePath.Value = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.Lead_Mail_Attachment);
        if (strId != "")
        {
            objEntityLead.LeadId = Convert.ToInt32(strId);

        }

        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityLead.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityLead.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }
        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityLead.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityLead.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }






        DataTable dtReadList = new DataTable();

        dtReadList = objBusinessLeadIndvl.Read_Indvidual_Lead_List(objEntityLead);






        if (dtReadList.Rows.Count > 0)
        {
            string strStatusName = dtReadList.Rows[0]["LDSTS_NAME"].ToString();
            int intStsId = Convert.ToInt32(dtReadList.Rows[0]["LDSTS_ID"].ToString());
            int intWinLoss = 0;
            int intIsActiveUser = 0;
            string strActiveUserId = dtReadList.Rows[0]["LEADS_ACTIVE_USR_ID"].ToString();
            hiddenActiveUserId.Value = strActiveUserId;
            int intActiveUserId = Convert.ToInt32(strActiveUserId);


            objEntityLead.User_Id = intUserId;
            objEntityLead.Active_UserId = intActiveUserId;
            //for Users drop down in Allocate ddl
            DataTable dtAllocateUsersList = objBusinessLeadIndvl.Read_UserForAllocate(objEntityLead);
            divOptionsAllocateEmp.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtAllocateUsersList);




            if (strActiveUserId == hiddenUserId.Value)
            {
                intIsActiveUser = 1;

                if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success))
                {
                    intWinLoss = 1;
                    imgbtnWin.Visible = false;
                    imgbtnPartialWin.Visible = false;
                    imgbtnLoss.Visible = false;
                    divImgEditLead.InnerHtml = "";
                    divlnkMailEdit.InnerHtml = "";
                    divlnkFolpEdit.InnerHtml = ""; ;
                    divlnkTaskEdit.InnerHtml = "";
                    btnAllocate.Visible = false;

                }
                else if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    intWinLoss = 1;
                    imgbtnWin.Visible = false;
                    imgbtnPartialWin.Visible = false;
                    imgbtnLoss.Visible = false;
                    divImgEditLead.InnerHtml = "";
                    divlnkMailEdit.InnerHtml = "";
                    divlnkFolpEdit.InnerHtml = ""; ;
                    divlnkTaskEdit.InnerHtml = "";
                    btnAllocate.Visible = false;
                }
                else
                {
              
                    //imgbtnReOpen.Visible = false;

                    intWinLoss = 0;
                    string QryStrAtchId = "";
                    if (Request.QueryString["Id"] != null)
                    {
                        QryStrAtchId = Request.QueryString["Id"];
                    }
                    // for Lead Info Attachment link

                    if (intEnableModify == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                    {
                        string strHtmlAtch;
                        if (Request.QueryString["L_MODE"] != null)
                        {
                            string strL_MODE = Request.QueryString["L_MODE"].ToString();

                            strHtmlAtch = " <a  href=\"gen_Lead.aspx?Id=" + QryStrAtchId + "&Prev=Indvl&L_MODE=" + strL_MODE + "\"  type='button' id='aEditLeadInfo' class=\"edt_btz\" title=\"Edit Opportunity Information\"><i class=\"fa fa-edit\"></i></a>";

                           // strHtmlAtch = "<a id='aEditLeadInfo' href=\"gen_Lead.aspx?Id=" + QryStrAtchId + "&Prev=Indvl&L_MODE=" + strL_MODE + "\">" + "<span  style=\"margin-left: 1%; font-size: medium; color: green;cursor: pointer;\">" + "Edit Lead Info" + "</span><img  style=\"margin-left:0.5%;\" src='../../Images/Icons/edit.png' /> " + "</a>";
                        }
                        else
                        {
                              strHtmlAtch =" <a  href=\"gen_Lead.aspx?Id=" + QryStrAtchId + "&Prev=Indvl\"  type='button' id='aEditLeadInfo' class=\"edt_btz\" title=\"Edit Opportunity Information\"><i class=\"fa fa-edit\"></i></a>";
                           // strHtmlAtch = "<a id='aEditLeadInfo' href=\"gen_Lead.aspx?Id=" + QryStrAtchId + "&Prev=Indvl\">" + "<span  style=\"margin-left: 1%; font-size: medium; color: green;cursor: pointer;\">" + "Edit Lead Info" + "</span><img  style=\"margin-left:0.5%;\" src='../../Images/Icons/edit.png' /> " + "</a>";
                        }

                      

                        divImgEditLead.InnerHtml = strHtmlAtch;
                    }


                    //in the case of mail first check the there mail detsils provided
                    if (Session["USERID"] != null)
                    {
                        objEntityLead.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                    }
                    else
                    {
                        Response.Redirect("~/Default.aspx");
                    }

                    objEntityLead.LeadId = Convert.ToInt32(hiddenLeadId.Value);
                    DataTable dtFromMail = objBusinessLeadIndvl.ReadFromMailAddress(objEntityLead);
                    DataTable dtToMail = objBusinessLeadIndvl.ReadToMailAddress(objEntityLead);
                    DataTable dtOtherToAdress = objBusinessLeadIndvl.ReadOtherToMail(objEntityLead);
                    if (dtFromMail.Rows.Count > 0)
                    {
                        if (dtToMail.Rows.Count > 0)
                        {
                            if (dtToMail.Rows[0]["LEADS_EMAIL"] != DBNull.Value)
                            {
                                if (dtOtherToAdress.Rows.Count > 0)
                                {
                                    string OtherTo = "";
                                    foreach (DataRow RW in dtOtherToAdress.Rows)
                                    {
                                        OtherTo = RW["LDCNT_EMAIL"].ToString() + "," + OtherTo;
                                    }
                                    if (OtherTo != "")
                                    {
                                        hiddenOtherToAddress.Value = OtherTo.Remove(OtherTo.Length - 1); ;
                                    }
                                }

                                hiddenMailToAddress.Value = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();
                                hiddenMailFrom.Value = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                                hiddenMailSubject.Value = "Enquiry - " + dtToMail.Rows[0]["CORPRT_NAME_SHORT"].ToString() + "/" + dtToMail.Rows[0]["CPRDIV_CODE"].ToString() + "/[" + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + "]";
                                hiddenMailSignature.Value = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();

                                //for mail link
                                string strHtmlMail;
                                strHtmlMail = "<span id='SpanAddMail' onclick=\"OpenModalMail('SpanAddMail',event);\" style=\"margin-left: 1%;cursor: pointer; font-size: medium; color: green\">" + "Send Mail" + "</span>";
                                divlnkMailEdit.InnerHtml = strHtmlMail;
                            }
                            else
                            {
                                //for mail link
                                string strHtmlMail;
                                strHtmlMail = "<span id='SpanAddMail' style=\"margin-left: 1%; font-size: medium; color: red\">" + "Please Review Your Mail Settings For Sending Mails. ( Employee,Division And Customer Mail Address )" + "</span>";
                                divlnkMailEdit.InnerHtml = strHtmlMail;
                                //evm0012
                              //  cbxSendRegretMail.Enabled = false;
                              //  lblRegretMailError.Visible = true;
                            }
                        }
                        else
                        {
                            //for mail link
                            string strHtmlMail;
                            strHtmlMail = "<span id='SpanAddMail' style=\"margin-left: 1%; font-size: medium; color: red\">" + "Please Review Your Mail Settings For Sending Mails. ( Employee,Division And Customer Mail Address )" + "</span>";
                            divlnkMailEdit.InnerHtml = strHtmlMail;
                            //evm0012
                          //  cbxSendRegretMail.Enabled = false;
                           // lblRegretMailError.Visible = true;
                        }
                    }
                    else
                    {
                        //for mail link
                        string strHtmlMail;
                        strHtmlMail = "<span id='SpanAddMail' style=\"margin-left: 1%; font-size: medium; color: red\">" + "Please Review Your Mail Settings ( Employee,Division And Customer Mail Address )" + "</span>";
                        divlnkMailEdit.InnerHtml = strHtmlMail;
                        //evm0012
                      //  cbxSendRegretMail.Enabled = false;
                      //  lblRegretMailError.Visible = true;
                    }


                    //for follow up link
                    string strHtmlFolowp="";
                    //strHtmlFolowp = "<span id='SpanAddFollowUp' onclick=\"return OpenModalFollowUp('SpanAddFollowUp',event);\" style=\"margin-left: 1%;cursor: pointer; font-size: medium; color: green\">" + "Add New Notes" + "</span>";
                   // strHtmlFolowp = " <a id='SpanAddFollowUp' href=\"javascript:;\" data-toggle=\"modal\" data-target=\"#myModalFollowUp\"   onclick=\"return OpenModalFollowUp('SpanAddFollowUp',event);\"> <img  class='opp_ico_img' src='../images/icons/opp/quot.notes.png' /> </a>";
                    //0041

                   strHtmlFolowp += "  <button class=\"btn act_btn bn8 bt_e\" data-toggle=\"modal\" data-target=\"#myModalFollowUp\" title=\"Add Notes\"   id=\"SpanAddFollowUp\" onclick=\"return OpenModalFollowUp('SpanAddFollowUp',event);\">";
           strHtmlFolowp += " <i class=\"opp_ico_img\"><img src=\"/Images/opp/quot.notes.png\"></i>";
           strHtmlFolowp += "  </button>";


                    divlnkFolpEdit.InnerHtml = strHtmlFolowp;


                    
                    //for task link
                    string strHtmlTask;
                   // strHtmlTask = "<span id='SpanAddTask' onclick=\"return OpenModalTask('SpanAddTask',event);\" style=\"margin-left: 1%;cursor: pointer; font-size: medium; color: green\"></span>";
                   

                    strHtmlTask = " <a id='SpanAddTask' href=\"javascript:;\" data-toggle=\"modal\" data-target=\"#myModalTask\" class=\"btn act_btn bn8 bt_e\"  onclick=\"return OpenModalTask('SpanAddTask',event);\"> <i class=\"fa fa-book\"></i> </a>";
                    
                    divlnkTaskEdit.InnerHtml = strHtmlTask;
                
                }
            }
            else
            {
                intIsActiveUser = 0;
                if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    intWinLoss = 1;
                    btnAllocate.Visible = false;
                }
                else
                {
                    intWinLoss = 0;
                    //imgbtnReOpen.Visible = false;
                }
                //  intWinLoss = 1;
                imgbtnWin.Visible = false;
                imgbtnPartialWin.Visible = false;
                imgbtnLoss.Visible = false;
                divImgEditLead.InnerHtml = "";
                divlnkMailEdit.InnerHtml = "";
                divlnkFolpEdit.InnerHtml = ""; ;
                divlnkTaskEdit.InnerHtml = "";
                // btnAllocate.Visible = false;

            }

            if (intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.New)
               || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Open) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved)
                || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Prepared) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_ReOpened) || intStsId == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Returned))
            {

                imgbtnWin.Visible = false;
                imgbtnPartialWin.Visible = false;
            }




            DataTable dtAtch, dtQtn, dtMail, dtFolup, dtTask, dtStsTrack = new DataTable();
            dtAtch = objBusinessLeadIndvl.Read_Indvidual_Lead_Atch(objEntityLead);
            dtQtn = objBusinessLeadIndvl.Read_Indvidual_Lead_Qtan(objEntityLead);
            dtMail = objBusinessLeadIndvl.ReadMailList(objEntityLead);
            dtFolup = objBusinessLeadIndvl.Read_Indvidual_Lead_Followup(objEntityLead);
            dtTask = objBusinessLeadIndvl.Read_Indvidual_Lead_Task(objEntityLead);
            dtStsTrack = objBusinessLeadIndvl.Read_Lead_Sts_Track(objEntityLead);
            string strHtmAtch = ConvertDataTableToHTMLatch(dtAtch);
            string strHtmQtn = ConvertDataTableToHTMLQtn(dtQtn, intWinLoss, intIsActiveUser);
            string strHtmMail = ConvertDataTableToHTMLMail(dtMail);
            string strHtmFolup = ConvertDataTableToHTMLNote(dtFolup);
            string strHtmTask = ConvertDataTableToHTMLTask(dtTask, intWinLoss, intIsActiveUser);
            string strRefNumQtn = "";
            if (dtQtn.Rows.Count > 0)
            {
                strRefNumQtn = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
            }
            divAttachment.InnerHtml = strHtmAtch;
            //divQuotation.InnerHtml = strHtmQtn;
            divMail.InnerHtml = strHtmMail;
            divFolup.InnerHtml = strHtmFolup;
            divTask.InnerHtml = strHtmTask;
            int intLeadStatus = 0;
            if (dtQtn.Rows.Count > 0)
            {
                intLeadStatus = Convert.ToInt32(dtQtn.Rows[0]["LDSTS_ID"]);
            }
  
            int intCurrentSts = 0;
            if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
            {

                intCurrentSts = 1;
            }
            else
            {
                intCurrentSts = 0;
            }
            DataTable dtReSendMailList = new DataTable();
            dtReSendMailList = objBusinessLeadIndvl.Read_ResendMailList(objEntityLead);
            objEntityLead.LeadId = Convert.ToInt32(hiddenLeadId.Value);
            DataTable dtFromMail2 = objBusinessLeadIndvl.ReadFromMailAddress(objEntityLead);
            //QCLD4 EVM0012
            DataTable dtToMail2 = objBusinessLeadIndvl.ReadToMailAddress(objEntityLead);
            string strFromMail = "";
            if (dtFromMail2.Rows.Count > 0)
            {
                strFromMail = dtFromMail2.Rows[0]["MLCNFG_EMAIL"].ToString();
            }
            string strToMail = "";
            if (dtToMail2.Rows.Count > 0)
            {
                strToMail = dtToMail2.Rows[0]["LEADS_EMAIL"].ToString();
            }
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
            objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
            DataTable dtRvsdQtnList = objBusinessLayerQuotation.ReadRvsdQuotation(objEntityQuotation);
            string strHtml = ConvertDataTableToHTML_ResendMailList(dtToMail2,dtReSendMailList, strFromMail, strToMail, dtRvsdQtnList, intCurrentSts, strRefNumQtn);
            divReSendMail.InnerHtml = strHtml;

            string StrLastUpdDate = "";

            if (dtStsTrack.Rows.Count > 0)
            {

                StrLastUpdDate = dtStsTrack.Rows[0]["STSTRCK_DATE"].ToString();
            }
            spanLastUpdDate.InnerHtml = StrLastUpdDate;



            string strActiveUserName = dtReadList.Rows[0]["USR_NAME"].ToString();
            string strHtmlUserDtl = "";
            string strHtmlStsDtl = "";
            string strHtmlGoofy = "";

            strHtmlStsDtl = "<span class='fg6_58 li_100_1' >" + strStatusName + "</span>";


            // strHtml += "<td class=\"tdT\" style=\" width:50%;word-break: break-all; word-wrap:break-word;text-align: left;\" >";
            if (dtReadList.Rows[0]["USR_IMAGE"].ToString() != null && dtReadList.Rows[0]["USR_IMAGE"].ToString() != "")
            {
                string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.USER_PROFILEPIC) + dtReadList.Rows[0]["USR_IMAGE"].ToString();
                strHtmlUserDtl = "<span class='fg6_75 li_100_1' >" + strActiveUserName + " </span>";
                strHtmlGoofy += " <div class=\"lightbox-target\" id=\"goofy_User\">";

                strHtmlGoofy += " <img src=\"" + strImagePath + "\"/>";
                strHtmlGoofy += " <a class=\"lightbox-close\" href=\"#\"></a>";
                strHtmlGoofy += "</div>";

            }
            else
            {
                string strImagePath = "/Images/Icons/wlcm.png";// class=\"lightbox\"
                strHtmlUserDtl = "<span class='fg6_75 li_100_1' >" + strActiveUserName + " </span>";
                strHtmlGoofy += " <div class=\"lightbox-target\" id=\"goofy_User\">";

                strHtmlGoofy += " <img src=\"" + strImagePath + "\"/>";
                strHtmlGoofy += " <a class=\"lightbox-close\" href=\"#\"></a>";
                strHtmlGoofy += "</div>";
            }


            divStatus.InnerHtml = strHtmlStsDtl;
            divOwnerDetail.InnerHtml = strHtmlUserDtl;
            divGoofy.InnerHtml = strHtmlGoofy;

            lblDate.Text = dtReadList.Rows[0]["LEADS_DATE"].ToString();
            lblLeadSource.Text = dtReadList.Rows[0]["LDSRCE_NAME"].ToString();
            if (dtReadList.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
            {
                lblCustName.Text = dtReadList.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtReadList.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }
            else
            {
                lblCustName.Text = dtReadList.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }
            lblDivision.Text = dtReadList.Rows[0]["CPRDIV_NAME"].ToString();
            lblTitle.Text = dtReadList.Rows[0]["LEADS_TITLE"].ToString();
            CKEditorDescription.Text = dtReadList.Rows[0]["LEADS_DESCRIPTION"].ToString();
        }

        if (imgbtnPartialWin.Visible == false && imgbtnWin.Visible == false && imgbtnLoss.Visible == false)
        {
            A1.Visible = false;
        }

    }
    [WebMethod]
    public static string TaskDelete(string intTaskId, string UserId, string LeadId)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityTask objEntityTask = new clsEntityTask();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
        objEntityTask.TaskId = Convert.ToInt32(intTaskId);
        objEntityTask.User_Id = Convert.ToInt32(UserId);
        objBusinessLeadIndvl.DeleteTask(objEntityTask);
        objEntityLead.LeadId = Convert.ToInt32(LeadId);
        DataTable dt = new DataTable();
        dt = objBusinessLeadIndvl.Read_Indvidual_Lead_Task(objEntityLead);
        string strHtml = "";
        //ConvertDataTableToHTMLTask(dt);
        return strHtml;

    }

    //if intCurrentSts equal 0 current qtn mail visible
    public string ConvertDataTableToHTML_ResendMailList(DataTable dtToMail2, DataTable dt, string strFromMail, string strToMail, DataTable dtRvsdQtnList, int intCurrentSts,string strCurrRef)
    {
         clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

        StringBuilder sb = new StringBuilder();

       sb.Append("<table id=\"ReportTableResedndMail\" class=\"table table-bordered tbl_480\" >");
        //add header row
         sb.Append( "<thead class=\"thead1\">");
         sb.Append( "<tr>");
         sb.Append("<th class=\"col-md-1\" >Sl#</th>");
         sb.Append("<th class=\"col-md-2 tr_l\" >" + "Ref#" + "</th>");
         sb.Append("<th class=\"col-md-2 tr_c\" >" + "From" + "</th>");
         sb.Append("<th class=\"col-md-2 tr_c\" >" + "To" + "</th>");
         sb.Append("<th class=\"col-md-3 tr_c\" >" + "Send As" + "</th>");
         sb.Append("<th class=\"col-md-2 tr_c\" >Actions</th>");
         sb.Append( "</tr>");
         sb.Append( "</thead>");
        //add rows
        int intCnt = 1;
         sb.Append( "<tbody>");
        if (dt.Rows.Count > 0)
        {
            if (intCurrentSts == 0)
            {
                if (dt.Rows[0]["TO_MAIL"].ToString() != "")
                {
                    string strTOMails = dt.Rows[0]["TO_MAIL"].ToString();
                    string[] strArrayTOMails = strTOMails.Split(',');
                    for (int i = 0; i < strArrayTOMails.Length; i++)
                    {
                         sb.Append( "<tr>");
                         sb.Append( "<td  >" + intCnt + "</td>");
                         sb.Append( "<td class=\"tr_l\" >" + strCurrRef + "</td>");
                         
                         sb.Append( "<td  >" + strFromMail + "</td>");
                         sb.Append("<td  >" + strArrayTOMails[i].ToString() + "</td>");
                         sb.Append( "<td  >TO</td>");
                     //    sb.Append( "<td  ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFun('" + strArrayTOMails[i].ToString() + "','TO');\"/></td>");
                         sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + strArrayTOMails[i].ToString() + "','TO');\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                         sb.Append( "</tr>");
                        intCnt++;
                    }

                }
                if (dt.Rows[0]["CC_MAIL"].ToString() != "")
                {
                    string strCCMails = dt.Rows[0]["CC_MAIL"].ToString();
                    string[] strArrayCCMails = strCCMails.Split(',');
                    for (int i = 0; i < strArrayCCMails.Length; i++)
                    {
                         sb.Append( "<tr>");
                         sb.Append( "<td >" + intCnt + "</td>");
                         sb.Append( "<td class=\"tr_l\" >" + strCurrRef + "</td>");
                         sb.Append("<td  >" + strFromMail + "</td>");

                         sb.Append( "<td  >" + strArrayCCMails[i].ToString() + "</td>");
                       
                         sb.Append( "<td  >CC</td>");
                       //  sb.Append( "<td  ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFun('" + strArrayCCMails[i].ToString() + "','CC');\"/></td>");
                         sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + strArrayCCMails[i].ToString() + "','CC');\"><i class=\"fa fa-paper-plane\"></i></button></td>");

                        sb.Append( "</tr>");
                        intCnt++;
                    }
                }
                if (dt.Rows[0]["BCC_MAIL"].ToString() != "")
                {
                    string strBCCMails = dt.Rows[0]["BCC_MAIL"].ToString();
                    string[] strArrayBCCMails = strBCCMails.Split(',');
                    for (int i = 0; i < strArrayBCCMails.Length; i++)
                    {
                         sb.Append( "<tr>");
                         sb.Append( "<td >" + intCnt + "</td>");
                         sb.Append("<td class=\"tr_l\">" + strCurrRef + "</td>");
                        
                         sb.Append( "<td >" + strFromMail + "</td>");

                         sb.Append("<td >" + strArrayBCCMails[i].ToString() + "</td>");

                         sb.Append( "<td >BCC</td>");
                      //   sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFun('" + strArrayBCCMails[i].ToString() + "','BCC');\"/></td>");
                         sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + strArrayBCCMails[i].ToString() + "','BCC');\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                        
                        sb.Append( "</tr>");
                        intCnt++;
                    }
                }
            }

            //revision
            if (dtRvsdQtnList.Rows.Count > 0)
            {
                for (int intRowCount = 0; intRowCount < dtRvsdQtnList.Rows.Count; intRowCount++)
                {
                    objEntityQuotation.BckupId = Convert.ToInt32(dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"]);
                    DataTable dtAdditnlmail = new DataTable();
                    dtAdditnlmail = objBusinessLayerQuotation.ReadQuotationAddtnMailBckup(objEntityQuotation);
                    if (dtAdditnlmail.Rows.Count > 0)
                    {
                        if (dtAdditnlmail.Rows[0]["BCKTO_MAIL"].ToString() != "")
                        {
                            string strAddTomail = dtAdditnlmail.Rows[0]["BCKTO_MAIL"].ToString();
                            string[] strArrayAddTomail = strAddTomail.Split(',');
                            for (int i = 0; i < strArrayAddTomail.Length; i++)
                            {
                                 sb.Append( "<tr>");
                                 sb.Append( "<td >" + intCnt + "</td>");
                                 sb.Append("<td class=\"tr_l\">" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                 
                                 sb.Append( "<td >" + strFromMail + "</td>");
                                 sb.Append("<td >" + strArrayAddTomail[i].ToString() + "</td>");

                                 sb.Append( "<td >TO</td>");
                                // sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayAddTomail[i].ToString() + "','TO');\"/></td>");

                                 sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayAddTomail[i].ToString() + "','TO');\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                sb.Append( "</tr>");
                                intCnt++;
                            }
                        }

                        if (dtAdditnlmail.Rows[0]["BCKCC_MAIL"].ToString() != "")
                        {
                            string strAddCcmail = dtAdditnlmail.Rows[0]["BCKCC_MAIL"].ToString();
                            string[] strArrayCCMails = strAddCcmail.Split(',');
                            for (int i = 0; i < strArrayCCMails.Length; i++)
                            {
                                 sb.Append( "<tr>");
                                 sb.Append( "<td >" + intCnt + "</td>");
                                 sb.Append("<td class=\"tr_l\" >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                
                                 sb.Append( "<td>" + strFromMail + "</td>");
                                 sb.Append("<td>" + strArrayCCMails[i].ToString() + "</td>");
                                 sb.Append( "<td >CC</td>");
                                // sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayCCMails[i].ToString() + "','CC');\"/></td>");

                                 sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayCCMails[i].ToString() + "','CC');\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                sb.Append( "</tr>");
                                intCnt++;
                            }
                        }

                        if (dtAdditnlmail.Rows[0]["BCKBCC_MAIL"].ToString() != "")
                        {
                            string strAddBccmail = dtAdditnlmail.Rows[0]["BCKBCC_MAIL"].ToString();
                            string[] strArrayBCCMails = strAddBccmail.Split(',');
                            for (int i = 0; i < strArrayBCCMails.Length; i++)
                            {
                                 sb.Append( "<tr>");
                                 sb.Append( "<td >" + intCnt + "</td>");
                                 sb.Append("<td class=\"tr_l\" >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                
                                 sb.Append( "<td >" + strFromMail + "</td>");
                                 sb.Append("<td  >" + strArrayBCCMails[i].ToString() + "</td>");
                                 sb.Append( "<td  >BCC</td>");
                               //  sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayBCCMails[i].ToString() + "','BCC');\"/></td>");
                                 sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayBCCMails[i].ToString() + "','BCC');\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                                sb.Append( "</tr>");
                                intCnt++;
                            }
                        }
                    }
                    else
                    {
                        if (dt.Rows[0]["TO_MAIL"].ToString() != "")
                        {
                             sb.Append( "<tr>");
                             sb.Append( "<td >" + intCnt + "</td>");
                             sb.Append("<td class=\"tr_l\">" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");

                             sb.Append("<td >" + strFromMail + "</td>");

                             sb.Append( "<td >" + dt.Rows[0]["TO_MAIL"].ToString() + "</td>");
                             
                             sb.Append( "<td >To</td>");
                            // sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + dt.Rows[0]["TO_MAIL"].ToString() + "','TO');\"/></td>");
                             sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + dt.Rows[0]["TO_MAIL"].ToString() + "','TO');\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                            sb.Append( "</tr>");
                            intCnt++;

                        }
                    }


                }

            }
        }
        else if (strToMail != "")
        {
            if (intCurrentSts == 0)
            {
                 sb.Append( "<tr>");
                 sb.Append( "<td >" + intCnt + "</td>");
                 sb.Append("<td class=\"tr_l\">" + strCurrRef + "</td>");
                
                 sb.Append( "<td >" + strFromMail + "</td>");
                 sb.Append("<td >" + strToMail + "</td>");
                 sb.Append( "<td >TO</td>");
               //  sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFun('" + strToMail + "','TO');\"/></td>");
                 sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + strToMail + "','TO');\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                sb.Append( "</tr>");
                intCnt++;



                foreach (DataRow row in dtToMail2.Rows)
                {
                    if (row["LDCNT_MAIL_ALWD"].ToString() == "1")
                    {
                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        if (row["LDCNT_EMAIL"].ToString() != "")
                        {
                             sb.Append( "<tr>");
                             sb.Append( "<td >" + intCnt + "</td>");
                             sb.Append("<td class=\"tr_l\" >" + strCurrRef + "</td>");
                          
                             sb.Append( "<td >" + strFromMail + "</td>");
                             sb.Append("<td >" + row["LDCNT_EMAIL"].ToString() + "</td>");
                             sb.Append( "<td >CC</td>");
                            // sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFun('" + row["LDCNT_EMAIL"].ToString() + "','CC');\"/></td>");

                             sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFun('" + row["LDCNT_EMAIL"].ToString() + "','CC');\"><i class=\"fa fa-paper-plane\"></i></button></td>");
                            
                            sb.Append( "</tr>");
                            intCnt++;
                        }

                    }

                }
            }
            if (dtRvsdQtnList.Rows.Count > 0)
            {
                for (int intRowCount = 0; intRowCount < dtRvsdQtnList.Rows.Count; intRowCount++)
                {
                    objEntityQuotation.BckupId = Convert.ToInt32(dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"]);
                    DataTable dtAdditnlmail = new DataTable();
                    dtAdditnlmail = objBusinessLayerQuotation.ReadQuotationAddtnMailBckup(objEntityQuotation);
                    if (dtAdditnlmail.Rows.Count > 0)
                    {
                        if (dtAdditnlmail.Rows[0]["BCKTO_MAIL"].ToString() != "")
                        {
                            string strAddTomail = dtAdditnlmail.Rows[0]["BCKTO_MAIL"].ToString();
                            string[] strArrayAddTomail = strAddTomail.Split(',');
                            for (int i = 0; i < strArrayAddTomail.Length; i++)
                            {
                                if (strArrayAddTomail[i].ToString() != "")
                                {
                                     sb.Append( "<tr>");
                                     sb.Append( "<td  >" + intCnt + "</td>");
                                     sb.Append("<td  class=\"tr_l\">" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                     
                                     sb.Append( "<td >" + strFromMail + "</td>");
                                     sb.Append("<td >" + strArrayAddTomail[i].ToString() + "</td>");
                                     sb.Append( "<td >TO</td>");
                                    // sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayAddTomail[i].ToString() + "','TO');\"/></td>");

                                     sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayAddTomail[i].ToString() + "','TO');\"><i class=\"fa fa-paper-plane\"></i></button></td>");

                                    sb.Append( "</tr>");
                                    intCnt++;
                                }
                            }
                        }

                        if (dtAdditnlmail.Rows[0]["BCKCC_MAIL"].ToString() != "")
                        {
                            string strAddCcmail = dtAdditnlmail.Rows[0]["BCKCC_MAIL"].ToString();
                            string[] strArrayCCMails = strAddCcmail.Split(',');
                            for (int i = 0; i < strArrayCCMails.Length; i++)
                            {
                                if (strArrayCCMails[i].ToString()!="")
                                {
                                 sb.Append( "<tr>");
                                 sb.Append( "<td >" + intCnt + "</td>");
                                 sb.Append("<td class=\"tr_l\" >" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                
                                 sb.Append( "<td >" + strFromMail + "</td>");
                                 sb.Append("<td >" + strArrayCCMails[i].ToString() + "</td>");
                                 sb.Append( "<td >CC</td>");
                               //  sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayCCMails[i].ToString() + "','CC');\"/></td>");

                                 sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayCCMails[i].ToString() + "','CC');\"><i class=\"fa fa-paper-plane\"></i></button></td>");

                                    sb.Append( "</tr>");
                                intCnt++;
                                }
                            }
                        }


                        if (dtAdditnlmail.Rows[0]["BCKBCC_MAIL"].ToString() != "")
                        {
                            string strAddBccmail = dtAdditnlmail.Rows[0]["BCKBCC_MAIL"].ToString();
                            string[] strArrayBCCMails = strAddBccmail.Split(',');
                            for (int i = 0; i < strArrayBCCMails.Length; i++)
                            {
                                if (strArrayBCCMails[i].ToString() != "")
                                {
                                     sb.Append( "<tr>");
                                     sb.Append( "<td >" + intCnt + "</td>");
                                     sb.Append("<td class=\"tr_l\">" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                     
                                     sb.Append( "<td  >" + strFromMail + "</td>");
                                     sb.Append("<td >" + strArrayBCCMails[i].ToString() + "</td>");
                                     sb.Append( "<td  >BCC</td>");
                                  //  sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayBCCMails[i].ToString() + "','BCC');\"/></td>");

                                    sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\" onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + strArrayBCCMails[i].ToString() + "','BCC');\"><i class=\"fa fa-paper-plane\"></i></button></td>");

                                    sb.Append("</tr>");
                                    intCnt++;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["TO_MAIL"].ToString() != "")
                            {
                                 sb.Append( "<tr>");
                                 sb.Append( "<td>" + intCnt + "</td>");
                                 sb.Append("<td  class=\"tr_l\">" + dtRvsdQtnList.Rows[intRowCount]["LDQUOTBKP_REF_NUMBER"].ToString() + "</td>");
                                
                                 sb.Append( "<td >" + strFromMail + "</td>");
                                 sb.Append("<td >" + dt.Rows[0]["TO_MAIL"].ToString() + "</td>");
                                 sb.Append( "<td >To</td>");
                                // sb.Append( "<td ><input style=\"color: #055c8c;border: 1px solid #045a05;\" type='button' value='Send Mail' onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + dt.Rows[0]["TO_MAIL"].ToString() + "','TO');\"/></td>");
                                 sb.Append("<td><button class=\"btn tab_but1 butn05\" title=\"Send mail\"  onclick=\"PostbackFunForRevQutn('" + dtRvsdQtnList.Rows[intRowCount]["LDQTBKP_ID"].ToString() + "','" + dt.Rows[0]["TO_MAIL"].ToString() + "','TO');\"><i class=\"fa fa-paper-plane\"></i></button></td>");

                                
                                sb.Append( "</tr>");
                                intCnt++;

                            }
                        }
                    }


                }
            }
        }
         if (strToMail == "" && dt.Rows.Count == 0)
        {
             sb.Append( "<tr>");
             sb.Append( "<td class=\"tdT\" colspan='6'> <p style=\"text-align: center;font-family: calibri;\">No Data Available</p></td>");
             sb.Append( "</tr>");
        }
         sb.Append( "</tbody>");
         sb.Append( "</table>");
       // sb.Append(strHtml);
        return sb.ToString();
    }
    public string ConvertDataTableToHTMLatch(DataTable dt)
    {
        clsCommonLibrary objCommon = new clsCommonLibrary();
        hiddenLeadFilePath.Value = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.LEAD_ATTACHMENT);
        StringBuilder sb = new StringBuilder();
     

        //sb.Append( " <div class=\"table_box tb_scr\">");
       sb.Append( " <div class=\"r_480\">");
       sb.Append("  <table class=\"table table-bordered tbl_480\"  id=\"ReportTableAttach\" >");
         sb.Append( "   <thead class=\"thead1\">");
            sb.Append( " <tr>");
               sb.Append( "  <th class=\"col-md-1\">Sl#</th>");
                sb.Append( "<th class=\"col-md-7 tr_l\">Attachments </th>");
               sb.Append( "  <th class=\"col-md-4\">Date and Time</th>");
             sb.Append( " </tr>");
             sb.Append("</thead>");



        //add rows
         sb.Append( "<tbody>");
        if (dt.Rows.Count == 0)
        {
            sb.Append("<tr >");

            sb.Append("<td class=\"tr_c\" colspan='3'>No Data Available</td>");
            
             sb.Append( "</tr>");

        }
        else
        {
            for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
            {


                if (intRowBodyCount % 2 == 1)
                {
                    sb.Append("<tr class='tr1' >");
                }
                else {


                    sb.Append("<tr>");
                }
                int intCnt = intRowBodyCount + 1;
                 sb.Append( "<td >" + intCnt + "</td>");

                 sb.Append( "<td class=' tr_l'><a class='AnchorAttachmntEdit' target='_blank' href='" + hiddenLeadFilePath.Value + dt.Rows[intRowBodyCount]["LDATCH_FILENAME"].ToString() + "' >" + dt.Rows[intRowBodyCount]["LDATCH_FLNAME_ACT"].ToString() + "</a></td>");

                 sb.Append( "<td class='tr_c'  >" + dt.Rows[intRowBodyCount]["LDATCH_INS_DATE"].ToString() + "</td>");

                 sb.Append( "</tr>");
            }
        }

         sb.Append( "</tbody>");
         sb.Append( "</table>");
      //   sb.Append("</div>");
      //  sb.Append(strHtml);
        return sb.ToString();
    }
    public string ConvertDataTableToHTMLQtn(DataTable dt, int intWinLoss, int intIsActiveUser)
    {
        btnadd_files.Visible = false;
        divTenFiles.Visible = false;
        clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
        int intEnableApprove = 0;
        int intUserId = 0;
        if (hiddenUserId.Value != "")
        {
            intUserId = Convert.ToInt32(hiddenUserId.Value);

        }
        int intUsrRolMstrId = Convert.ToInt32(clsCommonLibrary.USR_ROLE_MSTR.Quotation);
        DataTable dtChildRol = objBusinessLayer.LoadChildRoleDefnDetail(intUserId, intUsrRolMstrId);

        string Currency = "";
        if (dtChildRol.Rows.Count > 0)
        {
            string strChildRolDeftn = dtChildRol.Rows[0]["USRROL_CHLDRL_DEFN"].ToString();
          
            string[] strChildDefArrWords = strChildRolDeftn.Split('-');
            foreach (string strC_Role in strChildDefArrWords)
            {

                if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Approve).ToString())
                {
                    intEnableApprove = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);


                }


            }
        }


        string QryStrAtchId = "";
        if (Request.QueryString["Id"] != null)
        {
            QryStrAtchId = Request.QueryString["Id"];
        }
        if (dt.Rows.Count == 0)
        {
            if (intIsActiveUser == 1)//is active use
            {
                if (intWinLoss == 0)
                {
                    DataTable dtQtnTmplt = objBusinessLayer.ReadQuotationTempalate();


                    string strHtmlQtn = "";
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();


                        for (int intTmpltCnt = 0; intTmpltCnt < dtQtnTmplt.Rows.Count; intTmpltCnt++)
                        {
                            int intTemplateId = Convert.ToInt32(dtQtnTmplt.Rows[intTmpltCnt]["QTN_TMPLT_ID"].ToString());
                            if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard))
                            {
                                strHtmlQtn += "<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl&L_MODE=" + strL_MODE + "\" title=\"Standard Template\" class=\"t1_a\">";
                                strHtmlQtn += " <li><i class=\"fa fa-list-alt\"></i> Standard Template</li> </a>";

                            }
                            else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
                            {
                                strHtmlQtn += "<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl&L_MODE=" + strL_MODE + "&QTN_TMPLT=" + intTemplateId + "\" title=\"Project Template\" class=\"t1_d_grn\">";
                                strHtmlQtn += "<li><i class=\"fa fa-list-alt\"></i> Project Template</li></a>";
                            }
                            else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                            {

                                strHtmlQtn += "<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl&L_MODE=" + strL_MODE + "&QTN_TMPLT=" + intTemplateId + "\" title=\"Tender Template\" class=\"t1_c_vio\">";
                                strHtmlQtn += "<li><i class=\"fa fa-list-alt\"></i> Tender Template</li></a>";

                            }
                        }

                    }
                    else
                    {

                        for (int intTmpltCnt = 0; intTmpltCnt < dtQtnTmplt.Rows.Count; intTmpltCnt++)
                        {
                            int intTemplateId = Convert.ToInt32(dtQtnTmplt.Rows[intTmpltCnt]["QTN_TMPLT_ID"].ToString());
                            if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard))
                            {
                                strHtmlQtn += "<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl\" title=\"Standard Template\" class=\"t1_a\">";
                                strHtmlQtn += "<li><i class=\"fa fa-list-alt\"></i> Standard Template</li> </a>";


                            }
                            else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
                            {
                                strHtmlQtn += "<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl&QTN_TMPLT=" + intTemplateId + "\" title=\"Project Template\" class=\"t1_d_grn\">";
                                strHtmlQtn += "<li><i class=\"fa fa-list-alt\"></i> Project Template</li></a>";


                            }
                            else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                            {

                                strHtmlQtn += "<a href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl&QTN_TMPLT=" + intTemplateId + "\" title=\"Tender Template\" class=\"t1_c_vio\">";
                                strHtmlQtn += "<li><i class=\"fa fa-list-alt\"></i> Tender Template</li></a>";

                            }
                        }

                    }

                    divlnkQtnEdit.InnerHtml = strHtmlQtn;
                }
                else
                {
                    divlnkQtnEdit.InnerHtml = "";

                }
            }
            else//not active user
            {
                divlnkQtnEdit.InnerHtml = "";

            }
            HiddenFieldQuotIcon.Value = "0";
        }
        else
        {// WHEN dt row is not zero ,that is it has quotation

            //005 start
            Currency = dt.Rows[0]["CRNCMST_ABBRV"].ToString();
            

            hiddenQuotationID.Value = dt.Rows[0]["LDQUOT_ID"].ToString();



            string strQuotationSts = dt.Rows[0]["LDQUOT_STS"].ToString();

            int intTemplateId = Convert.ToInt32(dt.Rows[0]["QTN_TMPLT_ID"].ToString());
            if (intIsActiveUser == 1)//is active use
            {
                if (intWinLoss == 0)
                {



                    string strHtmlQtn = "";



                  

                    if (strQuotationSts == "NOT CONFIRMED" || strQuotationSts == "CONFIRMED" || strQuotationSts == "RE-OPENED" || strQuotationSts == "RETURNED")
                    {
                        if (strQuotationSts == "CONFIRMED" && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.Active)))
                        {
                            if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
                            {
                                strHtmlQtn = "<span id='SpanAddFiles'onclick=\"OpenQtnAtchmntAdditional();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">Additional Files</span>" +

                                 "<span id='SpanAddQuotes' onclick=\"OpenQtnAtchmntSupplierQuote();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">Supplier Quotes</button></span>";

                                HiddenFieldAttachEditMode.Value = "1";
                                btnadd_files.Visible = true;
                            }
                            else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                            {

                                strHtmlQtn = "<span id='SpanAddFiles'onclick=\"OpenQtnAtchmntAdditional();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">Additional Files</span>" +
                                    "<span id='SpanAddQuotes' onclick=\"OpenQtnAtchmntSupplierQuote();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">Supplier Quotes</span>" +
                                     "<span id='SpanAddTender' onclick=\"OpenQtnAtchmntTender();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white; padding-left: 16px; padding-right: 16px;\">Tender Files</span>";
                                HiddenFieldAttachEditMode.Value = "1";
                                btnadd_files.Visible = true;
                                divTenFiles.Visible = true;

                            }
                        }
                        else if (strQuotationSts == "CONFIRMED" && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.InActive)))
                        {//view
                            if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
                            {
                                strHtmlQtn = "<span id='SpanViewFiles'onclick=\"OpenQtnAtchmntAdditionalfileView();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">View Additional Files</span>" +

                                 "<span id='SpanViewQuotes' onclick=\"OpenQtnAtchmntSupplierQuoteView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">View Supplier Quotes</button></span>";

                                HiddenFieldAttachEditMode.Value = "0";
                                btnadd_files.Visible = true;
                            }
                            else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                            {

                                strHtmlQtn = "<span id='SpanViewFiles'onclick=\"OpenQtnAtchmntAdditionalfileView();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">View Additional Files</span>" +

                                     "<span id='SpanViewQuotes' onclick=\"OpenQtnAtchmntSupplierQuoteView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">View Supplier Quotes</span>" +
                                     "<span id='SpanViewTender' onclick=\"OpenQtnAtchmntTenderView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white;padding-left: 8px; padding-right: 8px;\">View Tender Files</span>";
                                HiddenFieldAttachEditMode.Value = "0";
                                btnadd_files.Visible = true;
                                divTenFiles.Visible = true;
                            }

                        }
                        else
                        {

                            if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
                            {
                                strHtmlQtn = "<span id='SpanAddFiles'onclick=\"OpenQtnAtchmntAdditional();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">Additional Files</span>" +

                                 "<span id='SpanAddQuotes' onclick=\"OpenQtnAtchmntSupplierQuote();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">Supplier Quotes</button></span>";

                                HiddenFieldAttachEditMode.Value = "1";
                                btnadd_files.Visible = true;
                            }
                            else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                            {

                                strHtmlQtn = "<span id='SpanAddFiles'onclick=\"OpenQtnAtchmntAdditional();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">Additional Files</span>" +
                                    "<span id='SpanAddQuotes' onclick=\"OpenQtnAtchmntSupplierQuote();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">Supplier Quotes</span>" +
                                     "<span id='SpanAddTender' onclick=\"OpenQtnAtchmntTender();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white; padding-left: 16px; padding-right: 16px;\">Tender Files</span>";
                                HiddenFieldAttachEditMode.Value = "1";
                                btnadd_files.Visible = true;
                                divTenFiles.Visible = true;
                            }


                        }
                    }
                    else
                    {
                        //qtnstatus APPROVED,DELIVERED
                        if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
                        {
                            strHtmlQtn = "<span id='SpanViewFiles'onclick=\"OpenQtnAtchmntAdditionalfileView();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">View Additional Files</span>" +

                             "<span id='SpanViewQuotes' onclick=\"OpenQtnAtchmntSupplierQuoteView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">View Supplier Quotes</button></span>";
                            HiddenFieldAttachEditMode.Value = "0";
                            btnadd_files.Visible = true;


                        }
                        else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                        {

                            strHtmlQtn = "<span id='SpanViewFiles'onclick=\"OpenQtnAtchmntAdditionalfileView();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">View Additional Files</span>" +

                                 "<span id='SpanViewQuotes' onclick=\"OpenQtnAtchmntSupplierQuoteView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">View Supplier Quotes</span>" +
                                 "<span id='SpanViewTender' onclick=\"OpenQtnAtchmntTenderView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white;padding-left: 8px; padding-right: 8px;\">View Tender Files</span>";
                            HiddenFieldAttachEditMode.Value = "0";
                            btnadd_files.Visible = true;
                            divTenFiles.Visible = true;
                        }
                    }

                    //divlnkQtnEdit.InnerHtml = strHtmlQtn;

                }
                else
                {
                    //when win or loss
                    string strHtmlQtn = "";
                    if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
                    {
                        strHtmlQtn = "<span id='SpanViewFiles'onclick=\"OpenQtnAtchmntAdditionalfileView();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">View Additional Files</span>" +
                         "<span id='SpanViewQuotes' onclick=\"OpenQtnAtchmntSupplierQuoteView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">View Supplier Quotes</button></span>";
                        HiddenFieldAttachEditMode.Value = "0";
                        btnadd_files.Visible = true;
                    }
                    else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {

                        strHtmlQtn = "<span id='SpanViewFiles'onclick=\"OpenQtnAtchmntAdditionalfileView();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">View Additional Files</span>" +
                             "<span id='SpanViewQuotes' onclick=\"OpenQtnAtchmntSupplierQuoteView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">View Supplier Quotes</span>" +
                             "<span id='SpanViewTender' onclick=\"OpenQtnAtchmntTenderView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white;padding-left: 8px; padding-right: 8px;\">View Tender Files</span>";
                        HiddenFieldAttachEditMode.Value = "0";
                        btnadd_files.Visible = true;
                        divTenFiles.Visible = true;
                    }
                    //divlnkQtnEdit.InnerHtml = strHtmlQtn;
                }
            }
            else
            {
                string strHtmlQtn = "";
                //not active user

                if (strQuotationSts == "CONFIRMED" && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.Active)))
                {
                    if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
                    {
                        strHtmlQtn = "<span id='SpanAddFiles'onclick=\"OpenQtnAtchmntAdditional();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">Additional Files</span>" +

                         "<span id='SpanAddQuotes' onclick=\"OpenQtnAtchmntSupplierQuote();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">Supplier Quotes</button></span>";

                        HiddenFieldAttachEditMode.Value = "1";
                        btnadd_files.Visible = true;

                    }
                    else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {

                        strHtmlQtn = "<span id='SpanAddFiles'onclick=\"OpenQtnAtchmntAdditional();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">Additional Files</span>" +
                            "<span id='SpanAddQuotes' onclick=\"OpenQtnAtchmntSupplierQuote();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">Supplier Quotes</span>" +
                             "<span id='SpanAddTender' onclick=\"OpenQtnAtchmntTender();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white; padding-left: 16px; padding-right: 16px;\">Tender Files</span>";
                        HiddenFieldAttachEditMode.Value = "1";
                        btnadd_files.Visible = true;
                        divTenFiles.Visible = true;
                    }
                }
                else
                {

                    if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
                    {
                        strHtmlQtn = "<span id='SpanViewFiles'onclick=\"OpenQtnAtchmntAdditionalfileView();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">View Additional Files</span>" +

                         "<span id='SpanViewQuotes' onclick=\"OpenQtnAtchmntSupplierQuoteView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">View Supplier Quotes</button></span>";

                        HiddenFieldAttachEditMode.Value = "0";
                        btnadd_files.Visible = true;

                    }
                    else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {

                        strHtmlQtn = "<span id='SpanViewFiles'onclick=\"OpenQtnAtchmntAdditionalfileView();\"class=\"linkbutton\" style=\"margin-left: 3%;cursor: pointer; font-size: small; color: white\">View Additional Files</span>" +

                             "<span id='SpanViewQuotes' onclick=\"OpenQtnAtchmntSupplierQuoteView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white\">View Supplier Quotes</span>" +
                             "<span id='SpanViewTender' onclick=\"OpenQtnAtchmntTenderView();\"class=\"linkbutton\" style=\"margin-left: 1%;cursor: pointer; font-size: small; color: white;padding-left: 8px; padding-right: 8px;\">View Tender Files</span>";
                        HiddenFieldAttachEditMode.Value = "0";
                        btnadd_files.Visible = true;
                        divTenFiles.Visible = true;
                    }
                }

            }
            DisplayAtchmntDtl();
            DisplaySupplierQuoteDtl();
            DisplayTenderDtl();
        }
        StringBuilder sb = new StringBuilder();
      
        if (dt.Rows.Count == 0)
        {
            

        }
        else
        {
            clsEntityReports ObjLeadReport = new clsEntityReports();
            clsBusinessLayerReports ObjBussinessReports = new clsBusinessLayerReports();
            if (Session["CORPOFFICEID"] != null)
            {
                ObjLeadReport.Corporate_Id = Convert.ToInt32(Session["CORPOFFICEID"].ToString());
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
            if (dt.Rows[0]["LDQUOT_ID"].ToString() != "")
            {
                ObjLeadReport.LdQtnId = Convert.ToInt32(dt.Rows[0]["LDQUOT_ID"].ToString());
            }
            DataTable dtGrp = ObjBussinessReports.ReadGroupAmount(ObjLeadReport);

            int intQtnTmpltId = Convert.ToInt32(dt.Rows[0]["QTN_TMPLT_ID"].ToString());
            //EVM0012
            hiddenQtnTmpltId.Value = dt.Rows[0]["QTN_TMPLT_ID"].ToString();
            hiddenRefNo.Value = dt.Rows[0]["LDQUOT_REF_NUMBER"].ToString();



            if (Request.QueryString["L_MODE"] != null)
            {
                string strL_MODE = Request.QueryString["L_MODE"].ToString();
                if (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard))
                {

                    A2.HRef = "/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl&L_MODE=" + strL_MODE;
                }
                else if ((intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project)) || (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender)))
                {

                    A2.HRef = "/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl&L_MODE=" + strL_MODE + "&QTN_TMPLT=" + intQtnTmpltId;
                }
            }
            else
            {
                if (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard))
                {
                    A2.HRef = "/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl";
                }
                else if ((intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project)) || (intQtnTmpltId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender)))
                {

                    A2.HRef = "/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + QryStrAtchId + "&Prev=Indvl&QTN_TMPLT=" + intQtnTmpltId;
                }
            }
            HiddenFieldQuotIcon.Value = "1";
        }

        
        return sb.ToString();
    }
    public string ConvertDataTableToHTMLMail(DataTable dt)
    {
        clsCommonLibrary objCommon = new clsCommonLibrary();
        StringBuilder sb = new StringBuilder();
        sb.Append("<table id=\"ReportTableMail\" class=\"table table-bordered tbl_480\"  >");
        //add header row
        sb.Append("<thead class='thead1'>");
         sb.Append( "<tr>");
         sb.Append( "<th class=\"col-md-1\" > " + "SL #" + " </th>");
         sb.Append("<th class=\"col-md-2 tr_l\" >" + "FROM" + "</th>");

         sb.Append( "<th class=\"col-md-2 tr_l\" >" + "TO" + "</th>");
        
         sb.Append( "<th class=\"col-md-3 tr_l\" >" + "SEND/RECEIVED BY" + "</th>");
         sb.Append( "<th class=\"col-md-2 tr_c\" >" + "DATE & TIME" + "</th>");
         sb.Append( "<th class=\"col-md-1\" >" + "IN/OUT" + "</th>");
         sb.Append( "<th class=\"col-md-1\" >Actions</th>");
         sb.Append( "</tr>");
         sb.Append( "</thead>");

        //add rows
         sb.Append( "<tbody >");
        if (dt.Rows.Count == 0)
        {
             sb.Append( "<tr>");
             sb.Append( "<td class=\"tdT\" colspan='7'><p style=\"text-align:center; font-family: calibri;\">No Data Available</p></td>");
             sb.Append( "</tr>");
        }
        else
        {

            for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
            {
                string strSucessSts = "";
                string sttrh = "";
                if (dt.Rows[intRowBodyCount]["LDMAIL_SUCESS_STS"].ToString() == "2")
                {
                    sttrh+="<div class=\"bo_not1 mrl_bon flt_l fol_2_ico fx_width\" title=\"Time-Out Mail\"><i class=\"fa fa-envelope\" style=\"visibility: hidden;\">&nbsp;</i></div>";
                    strSucessSts = "2";//lost mail failure
                }
                else
                {
                    sttrh += "";
                    strSucessSts = "1";//mail success
                }

                if (intRowBodyCount % 2 == 1)
                {

                    sb.Append("<tr class='tr1'>");

                }
                else {

                    sb.Append("<tr>");
                
                }
                //   ;


                int intCnt = intRowBodyCount + 1;
                 sb.Append( "<td  >"+sttrh +" "+ intCnt + "</td>");
                 sb.Append("<td class=\"tr_l\"  >" + dt.Rows[intRowBodyCount]["LDMAIL_FRM_ADD"].ToString() + "</td>");

                 sb.Append("<td class=\"tr_l\"  >" + dt.Rows[intRowBodyCount]["LDMAIL_TO_ADD"].ToString() + "</td>");

                 sb.Append("<td class=\"tr_l\">" + dt.Rows[intRowBodyCount]["USR_NAME"].ToString() + "</td>");

                 sb.Append( "<td   >" + dt.Rows[intRowBodyCount]["LDMAIL_DATE"].ToString() + "</td>");
                 sb.Append( "<td  >" + dt.Rows[intRowBodyCount]["LDMAIL_STS"].ToString() + "</td>");
                string strRandomMixedLeadId = "";
                if (Request.QueryString["Id"] != null)
                {
                    strRandomMixedLeadId = Request.QueryString["Id"].ToString();
                }
                string strLeadMailId = "";
                strLeadMailId = dt.Rows[intRowBodyCount]["LDMAIL_ID"].ToString();
                strLeadMailId = objCommon.ReplaceEscapeSequence_ForJavascript(strLeadMailId);

                string strMailContent = dt.Rows[intRowBodyCount]["LDMAIL_CONTENT"].ToString();
                strMailContent = objCommon.ReplaceEscapeSequence_ForJavascript(strMailContent);

                string strLeadMailSts = dt.Rows[intRowBodyCount]["LDMAIL_STS"].ToString();
                strLeadMailSts = objCommon.ReplaceEscapeSequence_ForJavascript(strLeadMailSts);
                string strFrom = dt.Rows[intRowBodyCount]["LDMAIL_FRM_ADD"].ToString();
                string strTo = dt.Rows[intRowBodyCount]["LDMAIL_TO_ADD"].ToString();
                //005 start
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
                objEntityLead.PrvsCcMailid = Convert.ToInt64(dt.Rows[intRowBodyCount]["LDMAIL_ID"]);
                DataTable dtCc = objBusinessLeadIndvl.ReadMailCcPreviousAddrs(objEntityLead);
                string strCcMailIds = "";
                if (dtCc.Rows.Count > 0)
                {
                    if (dtCc.Rows[0]["LDMAILCC_CC"].ToString() != "")
                    {
                        int intRowCount = dtCc.Rows.Count;
                        for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                        {
                            strCcMailIds += dtCc.Rows[intRcount]["LDMAILCC_CC"].ToString() + ",";

                        }
                        strCcMailIds = strCcMailIds.TrimEnd(strCcMailIds[strCcMailIds.Length - 1]);
                    }
                }


                objEntityLead.PrvsBCcMailid = Convert.ToInt64(dt.Rows[intRowBodyCount]["LDMAIL_ID"]);
                DataTable dtBcc = objBusinessLeadIndvl.ReadMailBCcPreviousAddrs(objEntityLead);
                string strBccMailIds = "";
                if (dtBcc.Rows.Count > 0)
                {
                    if (dtBcc.Rows[0]["LDMAILBCC_BCC"].ToString() != "")
                    {
                        int intRowCount = dtBcc.Rows.Count;
                        for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                        {
                            strBccMailIds += dtBcc.Rows[intRcount]["LDMAILBCC_BCC"].ToString() + ",";

                        }
                        strBccMailIds = strBccMailIds.TrimEnd(strBccMailIds[strBccMailIds.Length - 1]);
                    }
                }


                DataTable dtSubject = objBusinessLeadIndvl.ReadMailSubject(objEntityLead);
                string strSubjects = "";
                if (dtSubject.Rows.Count > 0)
                {
                    if (dtSubject.Rows[0]["LDMAIL_SUBJECT"].ToString() != "")
                    {
                        int intRowCount = dtSubject.Rows.Count;
                        for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                        {
                            strSubjects += dtSubject.Rows[intRcount]["LDMAIL_SUBJECT"].ToString() + ",";

                        }
                        strSubjects = strSubjects.TrimEnd(strSubjects[strSubjects.Length - 1]);
                    }
                }

                DataTable dtMultyTo = objBusinessLeadIndvl.ReadMailMultyTo(objEntityLead);
                string strMultyTo = "";
                if (dtMultyTo.Rows.Count > 0)
                {
                    if (dtMultyTo.Rows[0]["LDMAILMULTY_TO"].ToString() != "")
                    {
                        int intRowCount = dtMultyTo.Rows.Count;
                        for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                        {
                            strMultyTo += dtMultyTo.Rows[intRcount]["LDMAILMULTY_TO"].ToString() + ",";

                        }
                        strMultyTo = strMultyTo.TrimEnd(strMultyTo[strMultyTo.Length - 1]);
                    }
                }


                // sb.Append( "<td >" + " <span  id='SpanEditViewMail" + intRowBodyCount + "' onclick=\" ViewModalMail('SpanEditViewMail" + intRowBodyCount + "',event,'" + strLeadMailId + "','" + strMailContent + "','" + strLeadMailSts + "','" + strCcMailIds + "','" + strBccMailIds + "','" + strSubjects + "','" + strMultyTo + "','" + strFrom + "','" + strTo + "','" + strSucessSts + "');\">" + "<i class=\"fa fa-list-alt\"></i> " + "</span> </td>");
                //    sb.Append( "<td class=\"tdT\" style=\"width:4%;padding-left: 0%; word-wrap:break-word;text-align: center;\">" + " <span  id='SpanEditViewMail" + intRowBodyCount + "' \">" + "</span> </td>");

                 sb.Append("<td><button  id='SpanEditViewMail" + intRowBodyCount + "' onclick=\"return ViewModalMail('SpanEditViewMail" + intRowBodyCount + "',event,'" + strLeadMailId + "','" + strMailContent + "','" + strLeadMailSts + "','" + strCcMailIds + "','" + strBccMailIds + "','" + strSubjects + "','" + strMultyTo + "','" + strFrom + "','" + strTo + "','" + strSucessSts + "');\" class=\"btn act_btn bn4\" data-toggle=\"modal\" data-target=\"#send_mail\" title=\"View\">");
                 sb.Append("<i class=\"fa fa-list-alt\"></i>");
                 sb.Append("</button></td>");    



                 sb.Append( "</tr>");
            }

        }

         sb.Append( "</tbody>");
         sb.Append( "</table>");
       // sb.Append(strHtml);
        return sb.ToString();
    }
    public string ConvertDataTableToHTMLNote(DataTable dt)
    {
        clsCommonLibrary objCommon = new clsCommonLibrary();
        StringBuilder sb = new StringBuilder();
        sb.Append( "<table id=\"ReportTableFollowUp\" class=\"table table-bordered tbl_480\" >");
        //add header row
        sb.Append( " <thead class='thead1'>");
            sb.Append( "  <tr>");
               sb.Append( "  <th class='col-md-1'>Sl#</th>");
                sb.Append( "<th class='col-md-5 tr_l'>Note By</th>");
                sb.Append( "<th class='col-md-2 tr_c'>Date</th>");
                sb.Append( "<th class='col-md-4 tr_c'>Through</th>");
                sb.Append("<th class='col-md-4 tr_c' style=\"width:4%;padding-left: 0%; word-wrap:break-word;text-align: center;cursor:pointer;\"></th>");
                 sb.Append( "</tr>");
            sb.Append( "</thead>");
        //add rows
         sb.Append( "<tbody>");
        if (dt.Rows.Count == 0)
        {
             sb.Append( "<tr>");
            // sb.Append( "<td class=\"tr1\" ><p style=\"text-align: center;font-family: calibri;\">No Data Available</p></td>");

            sb.Append( " <td class=\"tr_c\" colspan=\"5\">No Data Available</td>");

            
             sb.Append( "</tr>");

        }
        else
        {
            for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
            {
                if (intRowBodyCount % 2 == 1)
                {


                    sb.Append("<tr  >");
                }

                else {

                    sb.Append("<tr class='tr1'  >");
                
                }

                int intCnt = intRowBodyCount + 1;
                 sb.Append( "<td >" + intCnt + "</td>");

                 sb.Append( "<td class='tr_l' >" + dt.Rows[intRowBodyCount]["USR_NAME"].ToString() + "</td>");
                 sb.Append( "<td  >" + dt.Rows[intRowBodyCount]["LDFLUP_DATE"].ToString() + "</td>");
                 sb.Append( "<td  >" + dt.Rows[intRowBodyCount]["LDSRCE_NAME"].ToString() + "</td>");
                string strRandomMixedLeadId = "";
                if (Request.QueryString["Id"] != null)
                {
                    strRandomMixedLeadId = Request.QueryString["Id"].ToString();
                }
                string strFollowUpId = "";
                strFollowUpId = dt.Rows[intRowBodyCount]["LDFLUP_ID"].ToString();

                //for replacing special characters
                string strLeadSrcId = dt.Rows[intRowBodyCount]["LDSRCE_ID"].ToString();
                strLeadSrcId = objCommon.ReplaceEscapeSequence_ForJavascript(strLeadSrcId);


                string strLeadSrcName = dt.Rows[intRowBodyCount]["LDSRCE_NAME"].ToString();
                strLeadSrcName = objCommon.ReplaceEscapeSequence_ForJavascript(strLeadSrcName);

                string strFollowUpDate = dt.Rows[intRowBodyCount]["LDFLUP_DATE"].ToString();
                strFollowUpDate = objCommon.ReplaceEscapeSequence_ForJavascript(strFollowUpDate);

                string strDescptn = dt.Rows[intRowBodyCount]["LDFLUP_DESCRIPTION"].ToString();
                strDescptn = objCommon.ReplaceEscapeSequence_ForJavascript(strDescptn);

                sb.Append("<td  style=\"width:4%;padding-left: 0%; word-wrap:break-word;text-align: center;cursor:pointer;\">" + " <span id='SpanEditViewFollowUp" + intRowBodyCount + "'  class='btn act_btn bn4'  data-toggle=\"modal\" data-target=\"#myModalFollowUp\"  onclick=\"ViewModalFollowUp('SpanEditViewFollowUp" + intRowBodyCount + "',event,'" + strLeadSrcId + "','" + strLeadSrcName + "','" + strFollowUpDate + "','" + strDescptn + "');\" " +
                ">" + "<i class=\"fa fa-list-alt\"></i> " + "</span> </td>");



                 sb.Append( "</tr>");
            }
        }
         sb.Append( "</tbody>");
         sb.Append( "</table>");
       // sb.Append(strHtml);
        return sb.ToString();
    }
    public string ConvertDataTableToHTMLTask(DataTable dt, int intWinLoss, int intIsActiveUser)
    {
        clsCommonLibrary objCommon = new clsCommonLibrary();
        StringBuilder sb = new StringBuilder();
        sb.Append("<table id=\"ReportTableTask\" class=\"table table-bordered tbl_480\" >");
        //add header row
         sb.Append( "<thead class='thead1'>");
         sb.Append( "<tr>");
         sb.Append("<th class=\"col-md-1\" > " + "Sl#" + " </th>");
         sb.Append("<th class=\"col-md-3 tr_l\" >" + "Subject" + "</th>");
         sb.Append("<th class=\"col-md-2 tr_c\" >" + "From Date & Time" + "</th>");
         sb.Append("<th class=\"col-md-2 tr_c\" >" + "Due Date & Time" + "</th>");
         sb.Append("<th class=\"col-md-2 tr_c\" >" + "Actions" + "</th>");
        
         sb.Append( "</tr>");
         sb.Append( "</thead>");
        //add rows
         sb.Append( "<tbody>");
        if (dt.Rows.Count == 0)
        {
             sb.Append( "<tr>");
             sb.Append("<td class=\"tr_c\" colspan='5'>No Data Available</td>");
             sb.Append( "</tr>");

        }
        else
        {
            for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
            {


                //for replacing special characters

                string strTaskId = "";
                strTaskId = dt.Rows[intRowBodyCount]["TASK_ID"].ToString();
                strTaskId = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskId);

                string strTaskSbjctId = dt.Rows[intRowBodyCount]["TASKSUBJCT_ID"].ToString();
                strTaskSbjctId = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskSbjctId);


                string strTaskSbjctName = dt.Rows[intRowBodyCount]["TASKSUBJCT_NAME"].ToString();
                strTaskSbjctName = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskSbjctName);

                string strTaskDueDate = dt.Rows[intRowBodyCount]["T_DUE_DATE"].ToString();
                strTaskDueDate = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskDueDate);

                string strTaskDueHr = dt.Rows[intRowBodyCount]["T_DUE_HOUR"].ToString();
                strTaskDueHr = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskDueHr);

                string strTaskDueMin = dt.Rows[intRowBodyCount]["T_DUE_MIN"].ToString();
                strTaskDueMin = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskDueMin);

                string strTaskDueAM_PM = dt.Rows[intRowBodyCount]["T_DUE_AM_PM"].ToString();
                strTaskDueAM_PM = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskDueAM_PM);


                string strTaskInsDate = dt.Rows[intRowBodyCount]["T_INS_DATE"].ToString();
                strTaskInsDate = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskInsDate);

                string strTaskInsHr = dt.Rows[intRowBodyCount]["T_INS_HOUR"].ToString();
                strTaskInsHr = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskInsHr);

                string strTaskInsMin = dt.Rows[intRowBodyCount]["T_INS_MIN"].ToString();
                strTaskInsMin = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskInsMin);

                string strTaskInsAM_PM = dt.Rows[intRowBodyCount]["T_INS_AM_PM"].ToString();
                strTaskInsAM_PM = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskInsAM_PM);


                string strTaskClsDate = dt.Rows[intRowBodyCount]["T_CLS_DATE"].ToString();
                strTaskClsDate = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskClsDate);

                string strTaskClsHr = dt.Rows[intRowBodyCount]["T_CLS_HOUR"].ToString();
                strTaskClsHr = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskClsHr);

                string strTaskClsMin = dt.Rows[intRowBodyCount]["T_CLS_MIN"].ToString();
                strTaskClsMin = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskClsMin);

                string strTaskClsAM_PM = dt.Rows[intRowBodyCount]["T_CLS_AM_PM"].ToString();
                strTaskClsAM_PM = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskClsAM_PM);

                string strTaskCurDate = dt.Rows[intRowBodyCount]["T_CUR_DATE"].ToString();
                strTaskCurDate = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCurDate);

                string strTaskCurHr = dt.Rows[intRowBodyCount]["T_CUR_HOUR"].ToString();
                strTaskCurHr = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCurHr);

                string strTaskCurMin = dt.Rows[intRowBodyCount]["T_CUR_MIN"].ToString();


                if (strTaskCurMin != "")
                {
                    int intCurMin = Convert.ToInt32(strTaskCurMin);
                    if (intCurMin >= 0 && intCurMin < 5)
                    {
                        int intMin = 0;
                        strTaskCurMin = intMin.ToString("00");

                    }
                    else if (intCurMin >= 5 && intCurMin < 10)
                    {
                        int intMin = 5;
                        strTaskCurMin = intMin.ToString("00");

                    }
                    else if (intCurMin >= 10 && intCurMin < 15)
                    {

                        int intMin = 10;
                        strTaskCurMin = intMin.ToString("00");
                    }
                    else if (intCurMin >= 15 && intCurMin < 20)
                    {
                        int intMin = 15;
                        strTaskCurMin = intMin.ToString("00");

                    }
                    else if (intCurMin >= 20 && intCurMin < 25)
                    {
                        int intMin = 20;
                        strTaskCurMin = intMin.ToString("00");

                    }
                    else if (intCurMin >= 25 && intCurMin < 30)
                    {
                        int intMin = 25;
                        strTaskCurMin = intMin.ToString("00");

                    }
                    else if (intCurMin >= 30 && intCurMin < 35)
                    {
                        int intMin = 30;
                        strTaskCurMin = intMin.ToString("00");

                    }
                    else if (intCurMin >= 35 && intCurMin < 40)
                    {
                        int intMin = 35;
                        strTaskCurMin = intMin.ToString("00");

                    }
                    else if (intCurMin >= 40 && intCurMin < 45)
                    {

                        int intMin = 40;
                        strTaskCurMin = intMin.ToString("00");
                    }
                    else if (intCurMin >= 45 && intCurMin < 50)
                    {
                        int intMin = 45;
                        strTaskCurMin = intMin.ToString("00");

                    }
                    else if (intCurMin >= 50 && intCurMin < 55)
                    {
                        int intMin = 50;
                        strTaskCurMin = intMin.ToString("00");

                    }
                    else if (intCurMin >= 55 && intCurMin < 60)
                    {

                        int intMin = 55;
                        strTaskCurMin = intMin.ToString("00");
                    }
                }

                strTaskCurMin = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCurMin);

                string strTaskCurAM_PM = dt.Rows[intRowBodyCount]["T_CUR_AM_PM"].ToString();
                strTaskCurAM_PM = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCurAM_PM);

                string strDescptn = dt.Rows[intRowBodyCount]["TASK_DESCRIPTION"].ToString();
                strDescptn = objCommon.ReplaceEscapeSequence_ForJavascript(strDescptn);

                string strStatus = dt.Rows[intRowBodyCount]["TASK_STATUS"].ToString();
                strStatus = objCommon.ReplaceEscapeSequence_ForJavascript(strStatus);

                string strTaskCloseStatus = dt.Rows[intRowBodyCount]["TASK_CLOSE_STATUS"].ToString();
                strTaskCloseStatus = objCommon.ReplaceEscapeSequence_ForJavascript(strTaskCloseStatus);

                string strhts="";

                if (intRowBodyCount % 2 == 1) {
                    
                    sb.Append("<tr class='tr1' >"); 
                
                }
                else {

                    sb.Append("<tr >"); 
                }


                if (dt.Rows[intRowBodyCount]["TASK_CLOSE_STATUS"].ToString() == "OPEN")
                {



                    string strDueDate = strTaskDueDate + "-" + strTaskDueHr + "-" + strTaskDueMin + "-" + strTaskDueAM_PM;
                    DateTime dtDueDateTime = objCommon.textWithTimeToDateTime(strDueDate);
                    if (dtDueDateTime < System.DateTime.Now)
                    {
                        // sb.Append( "<tr style='background-color:rgb(235, 248, 172);'>");

                         strhts += "<div class=\"bo_not1 mrl_bon flt_l fol_1_ico\" title=\"Breached task / Follow-Up\"> <i class=\"fa fa-book\"></i></div>";


                    }
                    else
                    {
                       //  sb.Append( "<tr style='background-color:rgb(142, 255, 175);'>");
                      strhts +=  "<div class=\"bo_not1 mrl_bon flt_l fol_3_ico\" title=\"Open task / Follow-Up\"> <i class=\"fa fa-book\"></i></div>";
                    }
                }
                else
                {
                    // sb.Append( "<tr  style='background-color:rgb(187, 225, 180);'>");

                     strhts +="<div class=\"bo_not1 mrl_bon flt_l fol_2_ico\" title=\"Closed task / Follow-Up\"> <i class=\"fa fa-book\"></i></div>";

                }


                int intCnt = intRowBodyCount + 1;
                 sb.Append( "<td>"+ strhts +"  "+ intCnt + "</td>");


                 sb.Append("<td class=\"tr_l\">" + dt.Rows[intRowBodyCount]["TASKSUBJCT_NAME"].ToString() + "</td>");
                 sb.Append( "<td >" + dt.Rows[intRowBodyCount]["TASK_INS_DATE"].ToString() + "</td>");
                 sb.Append( "<td>" + dt.Rows[intRowBodyCount]["TASK_DUE_DATE"].ToString() + "</td>");

                 sb.Append("<td>");
                 //sb.Append(  dt.Rows[intRowBodyCount]["TASK_STATUS"].ToString() );
                // sb.Append( dt.Rows[intRowBodyCount]["TASK_CLOSE_STATUS"].ToString());



                string strRandomLeadMixedId = "";
                if (Request.QueryString["Id"] != null)
                {
                    strRandomLeadMixedId = Request.QueryString["Id"].ToString();
                }
                if (intWinLoss == 0 && intIsActiveUser == 1)//if not win or loss and is active user
                {
                    if (dt.Rows[intRowBodyCount]["TASK_CLOSE_STATUS"].ToString() == "OPEN")
                    {

                        if (dt.Rows[intRowBodyCount]["TASK_STATUS"].ToString() == "ACTIVE")
                        {
                            sb.Append("<button class=\"btn tab_but1 butn1 btn_sta\" onclick=\"return StsModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskId + "','" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "');\" title=\"Change Status\">");
                            sb.Append("<i class=\"fa fa-check-circle\"></i>");
                            sb.Append(" </button>");
                        }
                        else
                        {

                            sb.Append("<button class=\"btn tab_but1 butn1 btn_sti\" onclick=\"return StsModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskId + "','" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "');\"  title=\"Change Status\">");
                            sb.Append("<i class=\"fa fa-times-circle\"></i>");
                            sb.Append("</button>");
                        }

                        sb.Append(" <span  id='SpanEditViewTask" + intRowBodyCount + "' class=\"btn act_btn bn1 bt_e\" title=\"Edit\" data-toggle=\"modal\" data-target=\"#myModalTask\" onclick=\"EditModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskId + "','" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "');\" " +
                   ">" + " <i class=\"fa fa-edit\"></i> " + "</span> ");

                         sb.Append(" <span  id='SpanEditViewCancelTask" + intRowBodyCount + "'  class=\"btn act_btn bn1\" title=\"Close this task\"  onclick=\"return OpenModalCancelTask('SpanEditViewCancelTask" + intRowBodyCount + "',event,'" + strTaskId + "','" + strTaskInsDate + "','" + strTaskInsHr + "','" + strTaskInsMin + "','" + strTaskInsAM_PM + "','" + strTaskCurDate + "','" + strTaskCurHr + "','" + strTaskCurMin + "','" + strTaskCurAM_PM + "');\" " +
                ">" + "<i class=\"fa fa-tasks\"></i>" + "</span> ");


                        //  sb.Append( "<td class=\"tdT\" style=\" width:4%;word-break: break-all; word-wrap:break-word;text-align: center;\"  ><a href=\"#\">Edit</a></td>");
                        //  sb.Append( "<td class=\"tdT\" style=\" width:4%;word-break: break-all; word-wrap:break-word;text-align: center;\"  ><a href=\"#\" onclick='return getDetails(" + strId + ");'>Delete</a></td>");
                    }
                    else
                    {


                        if (dt.Rows[intRowBodyCount]["TASK_STATUS"].ToString() == "ACTIVE")
                        {
                            sb.Append("<button disabled class=\"btn tab_but1 butn1 btn_sta\"  title=\"Change Status\">");
                            sb.Append("<i class=\"fa fa-check-circle\"></i>");
                            sb.Append(" </button>");
                        }
                        else
                        {

                            sb.Append("<button disabled class=\"btn tab_but1 butn1 btn_sti\" title=\"Change Status\">");
                            sb.Append("<i class=\"fa fa-times-circle\"></i>");
                            sb.Append("</button>");
                        }

                        sb.Append(" <span  id='SpanEditViewTask" + intRowBodyCount + "' title=\"View\" class=\"btn act_btn bn4\" data-toggle=\"modal\" data-target=\"#myModalTask\"  onclick=\"ViewModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "','" + strTaskClsDate + "','" + strTaskClsHr + "','" + strTaskClsMin + "','" + strTaskClsAM_PM + "','" + strTaskCloseStatus + "');\" " +
                    ">" + "<i class=\"fa fa-list-alt\"></i> "+ "</span> ");

                        // sb.Append( "<td class=\"tdT\" style=\"width:4%; padding-left: 0%; word-wrap:break-word;text-align: center;\"></td>");

                        //   sb.Append( "<td class=\"tdT\" style=\" width:4%;word-break: break-all; word-wrap:break-word;text-align: center;\"></td>");
                        //   sb.Append( "<td class=\"tdT\" style=\" width:4%;word-break: break-all; word-wrap:break-word;text-align: center;\"></td>");
                    }
                }
                else
                {
                    if (dt.Rows[intRowBodyCount]["TASK_STATUS"].ToString() == "ACTIVE")
                    {
                        sb.Append("<button disabled class=\"btn tab_but1 butn1 btn_sta\"  title=\"Change Status\">");
                        sb.Append("<i class=\"fa fa-check-circle\"></i>");
                        sb.Append(" </button>");
                    }
                    else
                    {

                        sb.Append("<button disabled class=\"btn tab_but1 butn1 btn_sti\" title=\"Change Status\">");
                        sb.Append("<i class=\"fa fa-times-circle\"></i>");
                        sb.Append("</button>");
                    }


                    sb.Append(" <span  id='SpanEditViewTask" + intRowBodyCount + "' title=\"View\" class=\"btn act_btn bn4\"  data-toggle=\"modal\" data-target=\"#myModalTask\" onclick=\"ViewModalTask('SpanEditViewTask" + intRowBodyCount + "',event,'" + strTaskSbjctId + "','" + strTaskSbjctName + "','" + strTaskDueDate + "','" + strTaskDueHr + "','" + strTaskDueMin + "','" + strTaskDueAM_PM + "','" + strDescptn + "','" + strStatus + "','" + strTaskClsDate + "','" + strTaskClsHr + "','" + strTaskClsMin + "','" + strTaskClsAM_PM + "','" + strTaskCloseStatus + "');\" " +
                   ">" + "<i class=\"fa fa-list-alt\"></i> " + "</span> </td>");

                   //  sb.Append( "<td class=\"tdT\" style=\"width:4%; padding-left: 0%; word-wrap:break-word;text-align: center;\"></td>");


                }

                sb.Append("</td>");
                 sb.Append( "</tr>");
            }
        }
         sb.Append( "</tbody>");
         sb.Append( "</table>");
       // sb.Append(strHtml);
        return sb.ToString();
    }

    protected void btnRejectMail_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["Id"] != null)
        {

            string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
            string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);

            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            if (hiddenLeadMailId.Value != "")
            {
                objEntityLead.MailBoxId = Convert.ToInt64(hiddenLeadMailId.Value);
            }
            try
            {
                objBusinessLayerIndividual.RejectMail(objEntityLead);
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailR&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailR");
                }

            }
            catch
            {
            }

        }
    }


    protected void btnSendMail_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["Id"] != null)
        {
            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            if (hiddenLeadId.Value != "")
            {
                objEntityLead.LeadId = Convert.ToInt32(hiddenLeadId.Value);
            }
            if (Session["USERID"] != null)
            {
                objEntityLead.User_Id = Convert.ToInt32(Session["USERID"]);
            }
            else if (Session["USERID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }

            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLead);
            if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
            {
                Response.Redirect("~/Default.aspx");
            }

            DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
            DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);

            if (dtFromMail.Rows.Count == 0)
            {
                Response.Redirect("~/Default.aspx");
            }
            if (dtToMail.Rows.Count == 0)
            {
                Response.Redirect("~/Default.aspx");
            }
            else
            {
                if (dtToMail.Rows[0]["LEADS_EMAIL"] == DBNull.Value)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }


            clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
            objEntityMail.Email_Subject = txtMailSubject.Text;
            objEntityMail.Email_Content = txtMailContent.Value;
            //objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
            //objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

            objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();

            objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
            objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
            objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
            objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
            objEntityMail.User_Id = objEntityLead.User_Id;

            string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
            string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
            objEntityMail.Lead_Id = Convert.ToInt32(strId);
            objEntityMail.D_Date = System.DateTime.Now;

            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityMail.Corporate_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityMail.Corporate_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
            //generate next value

            clsEntityCommon objEntityCommon = new clsEntityCommon();
            objEntityCommon.SectionId = Convert.ToInt32(clsCommonLibrary.Section.LEAD_MAIL);
            objEntityCommon.CorporateID = objEntityMail.Corporate_Id;
            string strNextNum = objBusinessLayer.ReadNextNumberWebForUI(objEntityCommon);
            objEntityMail.LeadMailId = Convert.ToInt64(strNextNum);

            int intSlNumbr = 0;
            for (int intCount = 0; intCount < Request.Files.Count; intCount++)
            {
                HttpPostedFile PostedFile = Request.Files[intCount];

                if (PostedFile.ContentLength > 0)
                {
                    clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();
                    string strFileName = System.IO.Path.GetFileName(PostedFile.FileName);
                    // string strFilePath = System.IO.Path.PathSeparator
                    // GetFileName(PostedFile.FileName);                        
                    objEntityAttach.Email_Real_Name = strFileName;
                    string strFileExt;

                    strFileExt = strFileName.Substring(strFileName.LastIndexOf('.') + 1).ToLower();


                    int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.LEAD);
                    int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.Lead_Mail_Attachment);
                    string strImageName = "";
                    strImageName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + objEntityLead.LeadId.ToString() + "_" + objEntityMail.LeadMailId.ToString() + "_" + intSlNumbr + "." + strFileExt;
                    clsCommonLibrary objComm = new clsCommonLibrary();
                    string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.Lead_Mail_Attachment);

                    PostedFile.SaveAs(Server.MapPath(strImagePath) + strImageName);



                    objEntityAttach.Email_File_Name = strImageName;
                    objEntityAttach.Attch_Path = Server.MapPath(strImagePath + strImageName);
                    objEntityMailAttachList.Add(objEntityAttach);
                    intSlNumbr++;
                }

            }


            List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();
            string strToFullId = txtToAddress.Text;
            if (strToFullId != "" && strToFullId != null)
            {
                string[] strToSplitId = strToFullId.Split(',');
                int intSplitCountTo = strToSplitId.Length;
                objEntityMail.To_Email_Address = strToSplitId[0].ToString();

                for (int intCount = 1; intCount < intSplitCountTo; intCount++)
                {

                    classEntityToMailAddress objEntityToMailAddress = new classEntityToMailAddress();
                    objEntityToMailAddress.ToAddress = strToSplitId[intCount].ToString().Trim();
                    objEntityToMailAddressList.Add(objEntityToMailAddress);

                }
            }


            List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();

            string strCcFullId = txtCccontent.Text;
            if (strCcFullId != "" && strCcFullId != null)
            {
                string[] strCCSplitId = strCcFullId.Split(',');
                int intSplitCountCc = strCCSplitId.Length;

                for (int intCount = 0; intCount < intSplitCountCc; intCount++)
                {
                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                    objEntityMailCcBCc.CcMail = strCCSplitId[intCount].ToString().Trim();

                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                }
            }
            string strBCcFullId = txtBCccontent.Text;
            if (strBCcFullId != "" && strBCcFullId != null)
            {
                string[] strBCCSplitId = strBCcFullId.Split(',');
                int intSplitCountBCc = strBCCSplitId.Length;

                for (int intCount = 0; intCount < intSplitCountBCc; intCount++)
                {
                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                    objEntityMailCcBCc.BCcMail = strBCCSplitId[intCount].ToString().Trim();
                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                }
            }


            intSlNumbr = 0;
            int intmail = 1;


            try
            {
                MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                //passing 1 for sucessfull mail send
                objBusinessLayerIndividual.InsertLeadMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList, 1);
            }
            catch
            {
                intmail = 2;
                //passing 2 for lost mail send
                objBusinessLayerIndividual.InsertLeadMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList, 2);
            }



            if (intmail == 1)
            {
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailS&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailS");
                }

            }
            else
            {
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailU&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailU");
                }


            }
        }
    }
    protected void btnReSendMail_Click(object sender, EventArgs e)
    {

        clsCommonLibrary objComm = new clsCommonLibrary();

        if (Request.QueryString["Id"] != null && hiddenLeadMailId.Value != "")
        {
            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            if (hiddenLeadId.Value != "")
            {
                objEntityLead.LeadId = Convert.ToInt32(hiddenLeadId.Value);
            }
            if (Session["USERID"] != null)
            {
                objEntityLead.User_Id = Convert.ToInt32(Session["USERID"]);
            }
            else if (Session["USERID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }

            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLead);
            if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
            {
                Response.Redirect("~/Default.aspx");
            }

            DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
            DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);

            if (dtFromMail.Rows.Count == 0)
            {
                Response.Redirect("~/Default.aspx");
            }
            if (dtToMail.Rows.Count == 0)
            {
                Response.Redirect("~/Default.aspx");
            }
            else
            {
                if (dtToMail.Rows[0]["LEADS_EMAIL"] == DBNull.Value)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }


            clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
            objEntityMail.Email_Subject = txtMailSubject.Text;
          //  objEntityMail.Email_Content = txtMailContent.Text;
            objEntityMail.Email_Content = txtMailContent.Value;
            //objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
            //objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

            objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();

            objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
            objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
            objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
            objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
            objEntityMail.User_Id = objEntityLead.User_Id;

            string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
            string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
            objEntityMail.Lead_Id = Convert.ToInt32(strId);
            objEntityMail.D_Date = System.DateTime.Now;

            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityMail.Corporate_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityMail.Corporate_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();

            objEntityLead.MailBoxId = Convert.ToInt64(hiddenLeadMailId.Value);
            DataTable dtMailAttch = objBusinessLayerIndividual.ReadMailAttch_ById(objEntityLead);
            for (int intCount = 0; intCount < dtMailAttch.Rows.Count; intCount++)
            {
                clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();
                objEntityAttach.Email_Real_Name = dtMailAttch.Rows[0]["LDMAILATT_FLNM_ACT"].ToString();
                objEntityAttach.Email_File_Name = dtMailAttch.Rows[0]["LDMAILATT_FILENAME"].ToString();
                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.Lead_Mail_Attachment);

                objEntityAttach.Attch_Path = Server.MapPath(strImagePath + objEntityAttach.Email_File_Name);

                objEntityMailAttachList.Add(objEntityAttach);
            }



            List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();
            string strToFullId = txtToAddress.Text;
            if (strToFullId != "" && strToFullId != null)
            {
                string[] strToSplitId = strToFullId.Split(',');
                int intSplitCountTo = strToSplitId.Length;
                objEntityMail.To_Email_Address = strToSplitId[0].ToString();

                for (int intCount = 1; intCount < intSplitCountTo; intCount++)
                {

                    classEntityToMailAddress objEntityToMailAddress = new classEntityToMailAddress();
                    objEntityToMailAddress.ToAddress = strToSplitId[intCount].ToString().Trim();
                    objEntityToMailAddressList.Add(objEntityToMailAddress);

                }
            }


            List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();

            string strCcFullId = txtCccontent.Text;
            if (strCcFullId != "" && strCcFullId != null)
            {
                string[] strCCSplitId = strCcFullId.Split(',');
                int intSplitCountCc = strCCSplitId.Length;

                for (int intCount = 0; intCount < intSplitCountCc; intCount++)
                {
                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                    objEntityMailCcBCc.CcMail = strCCSplitId[intCount].ToString().Trim();

                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                }
            }
            string strBCcFullId = txtBCccontent.Text;
            if (strBCcFullId != "" && strBCcFullId != null)
            {
                string[] strBCCSplitId = strBCcFullId.Split(',');
                int intSplitCountBCc = strBCCSplitId.Length;

                for (int intCount = 0; intCount < intSplitCountBCc; intCount++)
                {
                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                    objEntityMailCcBCc.BCcMail = strBCCSplitId[intCount].ToString().Trim();
                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                }
            }



            int intmail = 1;


            try
            {
                MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                //passing 1 for sucessfull mail send
                objBusinessLayerIndividual.UpdateLeadMail(objEntityMail, 1);
            }
            catch
            {
                intmail = 2;
                //passing 2 for lost mail send
                objBusinessLayerIndividual.UpdateLeadMail(objEntityMail, 2);
            }



            if (intmail == 1)
            {
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=UpdMailS&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=UpdMailS");
                }

            }
            else
            {
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=UpdMailU&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=UpdMailU");
                }


            }
        }
    }
    protected void btnFollowUpSave_Click(object sender, EventArgs e)
    {
        try
        {

            if (Request.QueryString["Id"] != null)
            {
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityFollowUp objEntityFollowUp = new clsEntityFollowUp();
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityFollowUp.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityFollowUp.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenFollowUpSrcId.Value != null && hiddenFollowUpSrcId.Value != "")
                {
                    objEntityFollowUp.LeadSourceId = Convert.ToInt32(hiddenFollowUpSrcId.Value);

                }
                string strFlUpDate = txtFollowUpDate.Text;
                clsCommonLibrary objCommon = new clsCommonLibrary();
                if (strFlUpDate != "")
                {
                    objEntityFollowUp.FollowUpDate = objCommon.textToDateTime(strFlUpDate);
                }
                objEntityFollowUp.Description = txtFollowUpDescptn.Text.Trim();


                string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
                string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
                objEntityFollowUp.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityFollowUp.Lead_Id;

                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    Response.Redirect("~/Default.aspx");
                }

                if (Session["USERID"] != null)
                {
                    objEntityFollowUp.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityFollowUp.Date = System.DateTime.Now;


                objBusinessLeadIndvl.InsertFollowUp(objEntityFollowUp);
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsFollowUp&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsFollowUp");
                }




            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }

    }
    protected void btnTaskSave_Click(object sender, EventArgs e)
    {
        try
        {
            if (Request.QueryString["Id"] != null)
            {
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityTask objEntityTask = new clsEntityTask();
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityTask.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityTask.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityTask.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityTask.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (hiddenTaskSubjctId.Value != null && hiddenTaskSubjctId.Value != "")
                {
                    objEntityTask.TaskSubjectId = Convert.ToInt32(hiddenTaskSubjctId.Value);

                }
                string strTaskDate = txtTaskDate.Text;
                string strHour = "", strMinute = "", strAM_PM = "";

                clsCommonLibrary objCommon = new clsCommonLibrary();
                if (strTaskDate != "")
                {
                    strHour = ddlTaskHr.SelectedValue.ToString();
                    strMinute = ddlTaskMin.SelectedValue.ToString();
                    strAM_PM = ddlTask_AM_PM.SelectedValue.ToString();
                    string strDateTime = strTaskDate + "-" + strHour + "-" + strMinute + "-" + strAM_PM;
                    objEntityTask.DueDate = objCommon.textWithTimeToDateTime(strDateTime);
                }
                objEntityTask.Description = txtTaskDescptn.Text.Trim();


                string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
                string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
                objEntityTask.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityTask.Lead_Id;

                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    Response.Redirect("~/Default.aspx");
                }

                //Status checkbox checked
                if (cbxTaskStatus.Checked == true)
                {
                    objEntityTask.TaskStatus = 1;
                }
                //Status checkbox not checked
                else
                {
                    objEntityTask.TaskStatus = 0;
                }

                if (Session["USERID"] != null)
                {
                    objEntityTask.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityTask.Date = System.DateTime.Now;

                objEntityTask.CloseStatus = 1;

                objBusinessLeadIndvl.InsertTask(objEntityTask);
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsTask&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsTask");
                }




            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    protected void btnTaskUpd_Click(object sender, EventArgs e)
    {
        try
        {

            if (Request.QueryString["Id"] != null && hiddenTaskId.Value != "")
            {
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityTask objEntityTask = new clsEntityTask();

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityTask.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityTask.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (hiddenTaskSubjctId.Value != null && hiddenTaskSubjctId.Value != "")
                {
                    objEntityTask.TaskSubjectId = Convert.ToInt32(hiddenTaskSubjctId.Value);

                }
                string strTaskDate = txtTaskDate.Text;
                string strHour = "", strMinute = "", strAM_PM = "";

                clsCommonLibrary objCommon = new clsCommonLibrary();
                if (strTaskDate != "")
                {
                    strHour = ddlTaskHr.SelectedValue.ToString();
                    strMinute = ddlTaskMin.SelectedValue.ToString();
                    strAM_PM = ddlTask_AM_PM.SelectedValue.ToString();
                    string strDateTime = strTaskDate + "-" + strHour + "-" + strMinute + "-" + strAM_PM;
                    objEntityTask.DueDate = objCommon.textWithTimeToDateTime(strDateTime);
                }
                objEntityTask.Description = txtTaskDescptn.Text.Trim();


                string strRandomLeadMixedId = Request.QueryString["Id"].ToString();

                //Status checkbox checked
                if (cbxTaskStatus.Checked == true)
                {
                    objEntityTask.TaskStatus = 1;
                }
                //Status checkbox not checked
                else
                {
                    objEntityTask.TaskStatus = 0;
                }

                if (Session["USERID"] != null)
                {
                    objEntityTask.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityTask.Date = System.DateTime.Now;

                objEntityTask.TaskId = Convert.ToInt32(hiddenTaskId.Value);

                objBusinessLeadIndvl.UpdateTask(objEntityTask);
                if (HiddenFieldTaskUpd.Value == "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=UpdTask&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=UpdTask");
                    }
                }
                else
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=StsTask&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=StsTask");
                    }
                }




            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    protected void btnLossReasonSave_Click(object sender, EventArgs e)
    {
        try
        {
            if (Request.QueryString["Id"] != null)
            {
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityLeadCreation.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityLeadCreation.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityLeadCreation.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityLeadCreation.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (hiddenLossReasonId.Value != null && hiddenLossReasonId.Value != "")
                {
                    objEntityLeadCreation.LossReasonId = Convert.ToInt32(hiddenLossReasonId.Value);

                }


                clsCommonLibrary objCommon = new clsCommonLibrary();

                objEntityLeadCreation.Description = txtLossReasonDescptn.Value;


                string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
                string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
                objEntityLeadCreation.LeadId = Convert.ToInt32(strId);

                objEntityLeadCreation.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    Response.Redirect("~/Default.aspx");
                }

                if (Session["USERID"] != null)
                {
                    objEntityLeadCreation.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }

                //for sending mail to the team head
                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                objEntityQuotation.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
                objEntityQuotation.Organisation_Id = objEntityLeadCreation.Org_Id;
                objEntityQuotation.Lead_Id = objEntityLeadCreation.LeadId;
                DataTable dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);

                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLeadCreation);




                objEntityLeadCreation.InsertDate = System.DateTime.Now;

                if (dtFromMail.Rows.Count > 0 && dtTeamHeadDtl.Rows.Count > 0)
                {

                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "LEAD LOSS - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString();


                    string StrMailContent = "Dear " + dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + " I would like to inform you that the status of the following lead have been changed to LOSS status " + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + "Lead Reference Number: " + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString() + Environment.NewLine + Environment.NewLine;

                    objEntityMail.Email_Content = StrMailContent + "Thanking you." + Environment.NewLine;

                    objEntityMail.To_Email_Address = dtTeamHeadDtl.Rows[0]["USR_EMAIL"].ToString();
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;
                    objEntityMail.User_Id = objEntityLeadCreation.User_Id;


                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;




                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);


                    }
                    catch (Exception ex)
                    {
                    }

                }

                objBusinessLeadIndvl.LossLead(objEntityLeadCreation);
                string strRegretMailEnabled = "";
                if (cbxSendRegretMail.Checked == true)
                {

                    strRegretMailEnabled = "&RgrtMail=1";
                }
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsLoss&L_MODE=" + strL_MODE + "" + strRegretMailEnabled);
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsLoss" + strRegretMailEnabled);
                }


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    protected void imgbtnReOpen_Click(object sender, ImageClickEventArgs e)
    {
        if (Request.QueryString["Id"] != null)
        {
            clsCommonLibrary objCommon = new clsCommonLibrary();
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();

            string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
            string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
            objEntityLeadCreation.LeadId = Convert.ToInt32(strId);


            DataTable dtStsTrack = objBusinessLeadIndvl.Read_Lead_Sts_Track(objEntityLeadCreation);
            int intStsId = 0;
            if (dtStsTrack.Rows.Count > 0)
            {
                intStsId = Convert.ToInt32(dtStsTrack.Rows[1]["LDSTS_ID"].ToString());
            }
            objEntityLeadCreation.Status = intStsId;

            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityLeadCreation.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityLeadCreation.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }


            if (Session["USERID"] != null)
            {
                objEntityLeadCreation.User_Id = Convert.ToInt32(Session["USERID"].ToString());
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
            objEntityLeadCreation.InsertDate = System.DateTime.Now;


            objEntityLeadCreation.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
            objBusinessLeadIndvl.ReOpenLead(objEntityLeadCreation);
            if (Request.QueryString["L_MODE"] != null)
            {
                string strL_MODE = Request.QueryString["L_MODE"].ToString();
                Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsReOpn&L_MODE=" + strL_MODE + "");
            }
            else
            {
                Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsReOpn");
            }




        }

    }
    protected void btnPartialWin_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["Id"] != null)
        {
            clsCommonLibrary objCommon = new clsCommonLibrary();
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();


            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityLeadCreation.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityLeadCreation.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            if (hiddenOrganisationId.Value == "")
            {
                if (Session["ORGID"] != null)
                {
                    objEntityLeadCreation.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                }
                else if (Session["ORGID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {
                objEntityLeadCreation.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
            }

            string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
            string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
            objEntityLeadCreation.LeadId = Convert.ToInt32(strId);


            objEntityLeadCreation.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);



            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
            if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) ||
                Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
            { }
            else
            {
                Response.Redirect("~/Default.aspx");
            }

            if (Session["USERID"] != null)
            {
                objEntityLeadCreation.User_Id = Convert.ToInt32(Session["USERID"].ToString());
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
            objEntityLeadCreation.InsertDate = System.DateTime.Now;


            clsBusinessLayerLeadCreation objBusinessLead = new clsBusinessLayerLeadCreation();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            objEntityLead.LeadId = objEntityLeadCreation.LeadId;
            DataTable dtLeadMaster = objBusinessLead.Read_Lead_ById(objEntityLead);
            string strCustomerNameCount = "0";
            string strClientNameCount = "0";
            string strContractorNameCount = "0";
            string strConsultantNameCount = "0";
            string strProjectNameCount = "0";
            if (dtLeadMaster.Rows[0]["CSTMR_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CSTMR_NAME"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CUSTOMER);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strCustomerNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CLIENT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CLIENT"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CLIENT"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CLIENT);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strClientNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CONTRACTOR_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CONTRACTOR"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CONTRACTOR"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CONTRACTOR);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strContractorNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CONSULTANT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CONSULTANT"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CONSULTANT"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CONSULTANT);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strConsultantNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }

            if (dtLeadMaster.Rows[0]["PROJECT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_PROJECT_NAME"].ToString() != "")
                {
                    clsEntityProject objEntityProject = new clsEntityProject();
                    objEntityProject.ProjectName = dtLeadMaster.Rows[0]["LEADS_PROJECT_NAME"].ToString();
                    objEntityProject.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityProject.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strProjectNameCount = objBusinessLeadIndvl.CheckProjectName(objEntityProject);
                }


            }
            //for sending mail to the team head
            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
            objEntityQuotation.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
            objEntityQuotation.Organisation_Id = objEntityLeadCreation.Org_Id;
            objEntityQuotation.Lead_Id = objEntityLeadCreation.LeadId;
            DataTable dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
            objEntityLead.User_Id = objEntityLeadCreation.User_Id;
            DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);

            clsEntityCommon objEntityCommon = new clsEntityCommon();
            objEntityCommon.SectionId = Convert.ToInt32(clsCommonLibrary.Section.PROJECT);
            objEntityCommon.CorporateID = objEntityLeadCreation.Corp_Id;
            objEntityCommon.Organisation_Id = objEntityLeadCreation.Org_Id;
            string strNextId = objBusinessLayer.ReadNextNumberWebForUI(objEntityCommon);
            string year = DateTime.Today.Year.ToString();

            string Ref = "PRJCT/" + year + "/" + strNextId;


            if (strCustomerNameCount == "0" && strClientNameCount == "0" && strContractorNameCount == "0" && strConsultantNameCount == "0" && strProjectNameCount == "0")
            {
                objEntityLeadCreation.ProjectRefNum = Ref;
                if (hiddenProjectStatus.Value == "BIDDING")
                {
                    objEntityLeadCreation.Project_Tender_Id = hiddenRfqId.Value;
                }
                else if (hiddenProjectStatus.Value == "AWARDED")
                {
                    if (hiddenInternalRef.Value != "")
                    {
                        objEntityLeadCreation.InternalRefNum = hiddenInternalRef.Value;
                    }
                    if (hiddenProjectManager.Value != "")
                    {
                        objEntityLeadCreation.ProjectManagerID = Convert.ToInt32(hiddenProjectManager.Value);
                    }

                }
                objEntityLeadCreation.WinAmount = Convert.ToDecimal(HiddenFieldtxtPartnWinAmount.Value);
                objEntityLeadCreation.LeadStatus = Convert.ToInt32(clsCommonLibrary.LeadStatus.Partial_Win);
                objBusinessLeadIndvl.WinLead(objEntityLeadCreation);

                objBusinessLeadIndvl.InsertLossStsToAllPrdct(objEntityLeadCreation);

                string strTotalProduct = hiddenPartialWinIds.Value;
                if (strTotalProduct != "")
                {
                    string[] strSplitted = strTotalProduct.Split(',');
                    foreach (string strProdId in strSplitted)
                    {
                        if (strProdId != "")
                        {
                            clsEntityLayerQuotation objEntQuot = new clsEntityLayerQuotation();
                            objEntQuot.Product_Id = Convert.ToInt32(strProdId);
                            objBusinessLayerIndividual.InsertPartialWinSts(objEntQuot);
                        }
                    }
                }

                if (dtFromMail.Rows.Count > 0 && dtTeamHeadDtl.Rows.Count > 0)
                {
                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "LEAD PARTIAL WIN - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString();


                    string StrMailContent = "Dear " + dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + " I would like to inform you that the status of the following lead have been changed to PARTIAL WIN status " + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + "Lead Reference Number: " + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString() + Environment.NewLine + Environment.NewLine;

                    objEntityMail.Email_Content = StrMailContent + "Thanking you." + Environment.NewLine;

                    objEntityMail.To_Email_Address = dtTeamHeadDtl.Rows[0]["USR_EMAIL"].ToString();
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;
                    objEntityMail.User_Id = objEntityLead.User_Id;

                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;

                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                    }
                    catch (Exception ex)
                    {
                    }

                }

                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsWin&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsWin");
                }

            }
            else
            {
                if (strCustomerNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cstmr&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cstmr");
                    }

                }
                else if (strProjectNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Prjct&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Prjct");
                    }

                }
                else if (strClientNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Client&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Client");
                    }

                }
                else if (strContractorNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cntrctr&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cntrctr");
                    }

                }
                else if (strConsultantNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cnsultnt&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cnsultnt");
                    }

                }
            }

        }
    }
    protected void imgbtnWin_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["Id"] != null)
        {
            clsCommonLibrary objCommon = new clsCommonLibrary();
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();


            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityLeadCreation.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityLeadCreation.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            if (hiddenOrganisationId.Value == "")
            {
                if (Session["ORGID"] != null)
                {
                    objEntityLeadCreation.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
                }
                else if (Session["ORGID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {
                objEntityLeadCreation.Org_Id = Convert.ToInt32(hiddenOrganisationId.Value);
            }

            string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
            string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
            objEntityLeadCreation.LeadId = Convert.ToInt32(strId);

            objEntityLeadCreation.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);

            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);
            if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) ||
                Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) || Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) == Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
            { }
            else
            {
                Response.Redirect("~/Default.aspx");
            }

            if (Session["USERID"] != null)
            {
                objEntityLeadCreation.User_Id = Convert.ToInt32(Session["USERID"].ToString());
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
            objEntityLeadCreation.InsertDate = System.DateTime.Now;


            clsBusinessLayerLeadCreation objBusinessLead = new clsBusinessLayerLeadCreation();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            objEntityLead.LeadId = objEntityLeadCreation.LeadId;
            DataTable dtLeadMaster = objBusinessLead.Read_Lead_ById(objEntityLead);
            string strCustomerNameCount = "0";
            string strClientNameCount = "0";
            string strContractorNameCount = "0";
            string strConsultantNameCount = "0";
            string strProjectNameCount = "0";
            if (dtLeadMaster.Rows[0]["CSTMR_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CSTMR_NAME"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CUSTOMER);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strCustomerNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CLIENT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CLIENT"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CLIENT"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CLIENT);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strClientNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CONTRACTOR_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CONTRACTOR"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CONTRACTOR"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CONTRACTOR);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strContractorNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }
            if (dtLeadMaster.Rows[0]["LEADS_CONSULTANT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_CONSULTANT"].ToString() != "")
                {
                    clsEntityCustomer objEntityCustomer = new clsEntityCustomer();
                    objEntityCustomer.Customer_Name = dtLeadMaster.Rows[0]["LEADS_CONSULTANT"].ToString();
                    objEntityCustomer.Customer_Type_Id = Convert.ToInt32(clsCommonLibrary.CustomerType.CONSULTANT);
                    objEntityCustomer.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityCustomer.CorpId = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strConsultantNameCount = objBusinessLeadIndvl.CheckCustomerName(objEntityCustomer);
                }


            }

            if (dtLeadMaster.Rows[0]["PROJECT_ID"].ToString() == "")
            {

                if (dtLeadMaster.Rows[0]["LEADS_PROJECT_NAME"].ToString() != "")
                {
                    clsEntityProject objEntityProject = new clsEntityProject();
                    objEntityProject.ProjectName = dtLeadMaster.Rows[0]["LEADS_PROJECT_NAME"].ToString();
                    objEntityProject.Organisation_Id = objEntityLeadCreation.Org_Id;
                    objEntityProject.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
                    //Checking is there table have any name like this
                    strProjectNameCount = objBusinessLeadIndvl.CheckProjectName(objEntityProject);
                }


            }

            clsEntityCommon objEntityCommon = new clsEntityCommon();
            objEntityCommon.SectionId = Convert.ToInt32(clsCommonLibrary.Section.PROJECT);
            objEntityCommon.CorporateID = objEntityLeadCreation.Corp_Id;
            objEntityCommon.Organisation_Id = objEntityLeadCreation.Org_Id;
            string strNextId = objBusinessLayer.ReadNextNumberWebForUI(objEntityCommon);
            string year = DateTime.Today.Year.ToString();

            string Ref = "PRJCT/" + year + "/" + strNextId;


            if (strCustomerNameCount == "0" && strClientNameCount == "0" && strContractorNameCount == "0" && strConsultantNameCount == "0" && strProjectNameCount == "0")
            {
                objEntityLeadCreation.ProjectRefNum = Ref;
                if (hiddenProjectStatus.Value == "BIDDING")
                {
                    objEntityLeadCreation.Project_Tender_Id = hiddenRfqId.Value;
                }
                else if (hiddenProjectStatus.Value == "AWARDED")
                {
                    if (hiddenInternalRef.Value != "")
                    {
                        objEntityLeadCreation.InternalRefNum = hiddenInternalRef.Value;
                    }
                    if (hiddenProjectManager.Value != "")
                    {
                        objEntityLeadCreation.ProjectManagerID = Convert.ToInt32(hiddenProjectManager.Value);
                    }

                }

             objEntityLeadCreation.LeadStatus= Convert.ToInt32(clsCommonLibrary.LeadStatus.Success);

                objBusinessLeadIndvl.WinLead(objEntityLeadCreation);

                //for sending mail to the team head
                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                objEntityQuotation.CorpOffice_Id = objEntityLeadCreation.Corp_Id;
                objEntityQuotation.Organisation_Id = objEntityLeadCreation.Org_Id;
                objEntityQuotation.Lead_Id = objEntityLeadCreation.LeadId;
                DataTable dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                objEntityLead.User_Id = objEntityLeadCreation.User_Id;
                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);

                if (dtFromMail.Rows.Count > 0 && dtTeamHeadDtl.Rows.Count > 0)
                {
                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "LEAD WIN - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString();


                    string StrMailContent = "Dear " + dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + " I would like to inform you that the status of the following lead have been changed to WIN status " + Environment.NewLine + Environment.NewLine;

                    StrMailContent = StrMailContent + "Lead Reference Number: " + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString() + Environment.NewLine + Environment.NewLine;

                    objEntityMail.Email_Content = StrMailContent + "Thanking you." + Environment.NewLine;

                    objEntityMail.To_Email_Address = dtTeamHeadDtl.Rows[0]["USR_EMAIL"].ToString();
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;
                    objEntityMail.User_Id = objEntityLead.User_Id;

                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;

                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);


                    }
                    catch (Exception ex)
                    {
                    }

                }



                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsWin&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsWin");
                }

            }
            else
            {
                if (strCustomerNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cstmr&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cstmr");
                    }

                }
                else if (strProjectNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Prjct&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Prjct");
                    }

                }
                else if (strClientNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Client&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Client");
                    }

                }
                else if (strContractorNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cntrctr&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cntrctr");
                    }

                }
                else if (strConsultantNameCount != "0")
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cnsultnt&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("gen_Lead.aspx?Id=" + strRandomLeadMixedId + "&Prev=Indvl&Dup=Cnsultnt");
                    }

                }
            }

        }
    }

    protected void btnAllocateSave_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["Id"] != null)
        {
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityLeadCreation.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityLeadCreation.Corp_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }

            if (hiddenAllocateEmpId.Value != null && hiddenAllocateEmpId.Value != "")
            {
                objEntityLeadCreation.NewActive_UserId = Convert.ToInt32(hiddenAllocateEmpId.Value);

            }
            if (hiddenActiveUserId.Value != null && hiddenActiveUserId.Value != "")
            {
                objEntityLeadCreation.OldActive_UserId = Convert.ToInt32(hiddenActiveUserId.Value);

            }



            string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
            string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
            objEntityLeadCreation.LeadId = Convert.ToInt32(strId);



            if (Session["USERID"] != null)
            {
                objEntityLeadCreation.User_Id = Convert.ToInt32(Session["USERID"].ToString());
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
            objEntityLeadCreation.InsertDate = System.DateTime.Now;



            objBusinessLeadIndvl.AllocateLead(objEntityLeadCreation);
            if (Request.QueryString["L_MODE"] != null)
            {
                string strL_MODE = Request.QueryString["L_MODE"].ToString();
                Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsAlc&L_MODE=" + strL_MODE + "");
            }
            else
            {
                Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsAlc");
            }




        }
    }

    [WebMethod]
    public static List<string[]> ReadMailAttachment(string strLeadMailId)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
        objEntityLeadCreation.MailBoxId = Convert.ToInt64(strLeadMailId);
        DataTable dtMailAttch = objBusinessLeadIndvl.ReadMailAttch_ById(objEntityLeadCreation);

        List<string[]> StringArrayList = new List<string[]>();
        if (dtMailAttch.Rows.Count != 0)
        {
            for (int intRowCount = 0; intRowCount < dtMailAttch.Rows.Count; intRowCount++)
            {
                string[] strMailAttchArray = new string[4];
                strMailAttchArray[0] = dtMailAttch.Rows[intRowCount]["LDMAILATT_ID"].ToString();
                strMailAttchArray[1] = dtMailAttch.Rows[intRowCount]["LDMAILATT_FILENAME"].ToString();
                strMailAttchArray[2] = dtMailAttch.Rows[intRowCount]["LDMAILATT_FLNM_ACT"].ToString();
                strMailAttchArray[3] = dtMailAttch.Rows[0]["LDMAIL_STS"].ToString();
                StringArrayList.Add(strMailAttchArray);
            }

        }
        return StringArrayList;
    }
    protected void btnCancelTaskSave_Click(object sender, EventArgs e)
    {
        try
        {

            if (Request.QueryString["Id"] != null && hiddenTaskId.Value != "")
            {
                clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                clsEntityTask objEntityTask = new clsEntityTask();



                string strTaskClosedDate = txtCCancelTaskDate.Text;
                string strHour = "", strMinute = "", strAM_PM = "";

                clsCommonLibrary objCommon = new clsCommonLibrary();
                if (strTaskClosedDate != "")
                {
                    strHour = ddlCCancelTaskHr.SelectedValue.ToString();
                    strMinute = ddlCCancelTaskMin.SelectedValue.ToString();
                    strAM_PM = ddlCCancel_AM_PM.SelectedValue.ToString();
                    string strDateTime = strTaskClosedDate + "-" + strHour + "-" + strMinute + "-" + strAM_PM;
                    objEntityTask.Date = objCommon.textWithTimeToDateTime(strDateTime);
                }



                string strRandomLeadMixedId = Request.QueryString["Id"].ToString();



                if (Session["USERID"] != null)
                {
                    objEntityTask.User_Id = Convert.ToInt32(Session["USERID"].ToString());
                }
                else
                {
                    Response.Redirect("~/Default.aspx");
                }


                objEntityTask.TaskId = Convert.ToInt32(hiddenTaskId.Value);

                objBusinessLeadIndvl.DeleteTask(objEntityTask);
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=ClsTask&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=ClsTask");
                }


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }




    //005 START
    //----------------------------FOR ATTACHING ADDITIONAL FILES IN QUOTATION-------------------------------
    protected void btnUploadQtnAttchAddtnl_Click(object sender, EventArgs e)
    {
        List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttch = new clsEntityLayerQuotationAttchmntDtl();
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
        clsCommonLibrary objCommon = new clsCommonLibrary();
        if (hiddenLeadId.Value != "" && hiddenQuotationID.Value != "" && Request.QueryString["Id"] != null)
        {
            int leadid = Convert.ToInt32(hiddenLeadId.Value);
            objEntityLead.LeadId = leadid;

            int intCorp_id = 0;
            if (Session["CORPOFFICEID"] != null)
            {
                intCorp_id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else
            {
                Response.Redirect("~/Default.aspx");
            }
            objEntityQtnDetailsAttch.CorpOffice_Id = intCorp_id;
            objEntityLead.Corp_Id = intCorp_id;
            int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityQtnDetailsAttch.QuotationId = Convert.ToInt32(intQtnId);
            int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.QUOTATION);
            int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            int intCount = 0;
            int intCounting = 0;
            if (hiddenQtnAtchmntSlnmbr.Value == "")
            {
                intCount = 0;
                intCounting = 0;
            }
            else
            {
                intCount = Convert.ToInt32(hiddenQtnAtchmntSlnmbr.Value);
                intCounting = Convert.ToInt32(hiddenQtnAtchmntSlnmbr.Value);
            }
            string strFileExt;
            string strFileName;


            for (int intCount1 = 0; intCount1 < Request.Files.Count; intCount1++)
            {
                string fileId = Request.Files.AllKeys[intCount1].ToString();
                if (fileId.Contains("fileA") || fileId.Contains("fileS") || fileId.Contains("fileT"))
                {
                    HttpPostedFile PostedFile = Request.Files[intCount1];
                    if (PostedFile.ContentLength > 0)
                    {
                        //Addition
                        strFileName = System.IO.Path.GetFileName(PostedFile.FileName);
                        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
                        intCount++;
                        objEntityQtnDetailsAttchmnt.ActualFileName = strFileName;
                        strFileExt = strFileName.Substring(strFileName.LastIndexOf('.') + 1).ToLower();
                        strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
                        objEntityQtnDetailsAttchmnt.FileName = strFileName;
                        objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
                        objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
                        objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
                         if(fileId.Contains("fileA"))
                        objEntityQtnDetailsAttchmnt.QtnFileType = 1;
                         else if (fileId.Contains("fileS"))
                        objEntityQtnDetailsAttchmnt.QtnFileType = 2;
                         else if (fileId.Contains("fileT"))
                        objEntityQtnDetailsAttchmnt.QtnFileType = 3;
                        objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);

                        string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                        PostedFile.SaveAs(Server.MapPath(strImagePath) + strFileName);
                        intCounting++;
                    }
                }
            }
            if (objEntityQtnAttchmntDeatilsList.Count > 0)
            {
                objBusinessLeadIndvl.InsertQtnAttchmnt(objEntityQtnAttchmntDeatilsList);
                hiddenOpenAdditionalAttch.Value = "OPEN";
            }
            else
            {
                hiddenOpenAdditionalAttch.Value = "NOTUP";
            }
            DisplayAtchmntDtl();
            DisplaySupplierQuoteDtl();
            DisplayTenderDtl();
        }
        else
        {
            Response.Redirect("~/Default.aspx");
        }
    }



    //-----------------FOR VIEWING QUOTATION ATTACHMENT--------------

    public void DisplayAtchmntDtl()
    {
        if (hiddenQuotationID.Value != "")
        {

            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
            objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);
            DataTable dtQtnAttchmnt = new DataTable();
            dtQtnAttchmnt = objBusinessLayerQuotation.ReadQuotationAttchmnt(objEntityQuotation);

            if (dtQtnAttchmnt.Rows.Count > 0)
            {
                int intRowCount = dtQtnAttchmnt.Rows.Count - 1;
                int fileCountValue = Convert.ToInt32(dtQtnAttchmnt.Rows[intRowCount]["QTFLS_SLNUM"]);
                hiddenQtnAtchmntSlnmbr.Value = fileCountValue.ToString();
            }
            else
            {
                hiddenQtnAtchmntSlnmbr.Value = "0";
            }

            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            //for displaying additional files
            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;
            objEntityLead.QtnFile_Type = 1;
            DataTable dtQtnAtchmntDtl = new DataTable();
            dtQtnAtchmntDtl = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLead);
            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            StringBuilder sb = new StringBuilder();
       
            if (dtQtnAtchmntDtl.Rows.Count == 0)
            {                
                 //sb.Append( "<tr>");
                 //sb.Append( "<td  colspan='3'>No Data Available</td>");
                 //sb.Append( "</tr>");
            }
            else
            {
                

                for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                {
                    string strFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                    string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                    string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                    string MailSndSts = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ATCH_MAIL_STS"].ToString();
                     sb.Append( "<tr class=\"edit\">");
                    int intCnt = intRowBodyCount + 1;
                     sb.Append( "<td class=\"tdT\" style=\" width:5%;word-break: break-all; word-wrap:break-word;text-align: left;display:none;\" >" + strQtnFileId + "</td>");
                     sb.Append( "<td class=\"tdT\" style=\" width:5%;word-break: break-all; word-wrap:break-word;text-align: left;display:none;\" >" + strFileName + "</td>");
                   
                    
                    sb.Append( "<td>");
                    sb.Append( "<span class=\"button-checkbox flt_l\">");
                      sb.Append( "<button type=\"button\" class=\"active btn-p\" data-color=\"p\" onclick=\"myFunct()\" ng-model=\"all\"><i class=\"state-icon fa fa-check-square-o\"></i>Â&nbsp;</button>");
                      sb.Append("<input type=\"checkbox\" class=\"hidden\" id='chbx_AddtnlFl" + strQtnFileId + "'>");
                    sb.Append( "</span>");
                         if (MailSndSts == "0")
                    {
                    sb.Append( "<span class=\"bo_not3 bo_mxr mrl_bon ma_tp_04 flt_l\" data-toggle=\"tooltip\" title=\"Not Attached With Mail\">");
                      sb.Append( "<i class=\"fa fa-square\"></i>");
                    sb.Append( "</span>");
                         }
                         else{
                          sb.Append( " <span class=\"bo_not1 bo_mxr mrl_bon ma_tp_04 flt_l\" data-toggle=\"tooltip\" title=\"Attached With Mail\">");
                        sb.Append( "<i class=\"fa fa-square\"></i>");
                      sb.Append( "</span>");
                   }
                 sb.Append( " </td>");
                 sb.Append(" <td class=\"tr_l\"><a target=\"_blank\" href=" + strFilePath + strFileName + ">" + strActualFileName + "</a></td>");
                 sb.Append( "<td> ");
                 sb.Append( "<div class=\"btn_stl1\">");
                 sb.Append("<button class=\"btn act_btn bn3\" onclick=\"return CheckForDeleteQtnAddtnlAttchmntInd('D','" + strQtnFileId + "','" + strFileName + "');\" title=\"Delete\">");
                 sb.Append( " <i class=\"fa fa-trash\"></i>");
                 sb.Append( " </button>");
                 sb.Append( " </div>");
                 sb.Append(" </td>");                
                 sb.Append( "</tr>");
                }
            }
            QtnAtchmntAddtnlFiles.InnerHtml = sb.ToString();
        }
        else
        {
            Response.Redirect("~/Default.aspx");
        }
    }
    protected void btnDeleteQtnAdtnlFiles_Click(object sender, EventArgs e)
    {
        if (hiddenQuotationID.Value != "" && hiddenQuotationID.Value != null && Request.QueryString["Id"] != null)
        {
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();

            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;

            string strCanclDtlId = "";
            string[] strarrCancldtlIds = strCanclDtlId.Split(',');
            if (hiddenCanclFileDtlId.Value != "" && hiddenCanclFileDtlId.Value != null)
            {
                strCanclDtlId = hiddenCanclFileDtlId.Value;
                strarrCancldtlIds = strCanclDtlId.Split(',');
            }
            objBusinessLeadIndvl.DeleteQuotationAttachment(objEntityLead, strarrCancldtlIds);
            string strCanclDtlFile = "";
            string[] strarrCancldtlFile = strCanclDtlFile.Split(',');
            if (hiddenCanclFileDtlName.Value != "" && hiddenCanclFileDtlName.Value != null)
            {
                strCanclDtlFile = hiddenCanclFileDtlName.Value;
                strarrCancldtlFile = strCanclDtlFile.Split(',');
            }
            //Delete from location
            foreach (string objAttchFile in strarrCancldtlFile)
            {
                string strFileLocation = strFilePath + objAttchFile;
                if (File.Exists(MapPath(strFileLocation)))
                {
                    File.Delete(MapPath(strFileLocation));
                }
            }
            DisplayAtchmntDtl();
            hiddenOpenAdditionalAttch.Value = "REMOVE";
        }
        else
        {
            Response.Redirect("~/Default.aspx");
        }
    }
    //0005 for supplier quotes
    protected void btnUploadQtnAttchSupplierQuote_Click(object sender, EventArgs e)
    {
        List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttch = new clsEntityLayerQuotationAttchmntDtl();
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
        clsCommonLibrary objCommon = new clsCommonLibrary();
        if (hiddenLeadId.Value != "" && hiddenQuotationID.Value != "" && Request.QueryString["Id"] != null)
        {
            int leadid = Convert.ToInt32(hiddenLeadId.Value);
            objEntityLead.LeadId = leadid;

            int intCorp_id = 0;
            if (Session["CORPOFFICEID"] != null)
            {
                intCorp_id = Convert.ToInt32(Session["CORPOFFICEID"]);

            }
            else
            {
                Response.Redirect("~/Default.aspx");

            }


            objEntityQtnDetailsAttch.CorpOffice_Id = intCorp_id;
            objEntityLead.Corp_Id = intCorp_id;

            int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityQtnDetailsAttch.QuotationId = Convert.ToInt32(intQtnId);


            int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.QUOTATION);
            int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            int intCount = 0;
            int intCounting = 0;
            if (hiddenQtnAtchmntSlnmbr.Value == "")
            {
                intCount = 0;
                intCounting = 0;
            }
            else
            {
                intCount = Convert.ToInt32(hiddenQtnAtchmntSlnmbr.Value);
                intCounting = Convert.ToInt32(hiddenQtnAtchmntSlnmbr.Value);
            }
            string strFileExt;
            string strFileName;


            //for inserting details into table
            //if (fupQtnAttchmntSupplierQuote1.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = fupQtnAttchmntSupplierQuote1.FileName.Substring(fupQtnAttchmntSupplierQuote1.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = fupQtnAttchmntSupplierQuote1.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 2;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (fupQtnAttchmntSupplierQuote2.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = fupQtnAttchmntSupplierQuote2.FileName.Substring(fupQtnAttchmntSupplierQuote2.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = fupQtnAttchmntSupplierQuote2.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 2;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (fupQtnAttchmntSupplierQuote3.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = fupQtnAttchmntSupplierQuote3.FileName.Substring(fupQtnAttchmntSupplierQuote3.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = fupQtnAttchmntSupplierQuote3.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 2;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}



            objBusinessLeadIndvl.InsertQtnAttchmnt(objEntityQtnAttchmntDeatilsList);



            //for saving into folder path

            //if (fupQtnAttchmntSupplierQuote1.HasFile)
            //{

            //    intCounting++;
            //    strFileExt = fupQtnAttchmntSupplierQuote1.FileName.Substring(fupQtnAttchmntSupplierQuote1.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    fupQtnAttchmntSupplierQuote1.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (fupQtnAttchmntSupplierQuote2.HasFile)
            //{

            //    intCounting++;
            //    strFileExt = fupQtnAttchmntSupplierQuote2.FileName.Substring(fupQtnAttchmntSupplierQuote2.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    fupQtnAttchmntSupplierQuote2.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (fupQtnAttchmntSupplierQuote3.HasFile)
            //{

            //    intCounting++;
            //    strFileExt = fupQtnAttchmntSupplierQuote3.FileName.Substring(fupQtnAttchmntSupplierQuote3.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    fupQtnAttchmntSupplierQuote3.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}


            DisplaySupplierQuoteDtl();
            hiddenOpenSupplierAttch.Value = "OPEN";

        }

        else
        {
            Response.Redirect("~/Default.aspx");
        }


    }



    //-----------------FOR VIEWING QUOTATION SUPPLIER QUOTES--------------

    public void DisplaySupplierQuoteDtl()
    {
        if (hiddenQuotationID.Value != "")
        {

            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();



            objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);
            DataTable dtQtnAttchmnt = new DataTable();
            dtQtnAttchmnt = objBusinessLayerQuotation.ReadQuotationAttchmnt(objEntityQuotation);

            if (dtQtnAttchmnt.Rows.Count > 0)
            {
                int intRowCount = dtQtnAttchmnt.Rows.Count - 1;
                int fileCountValue = Convert.ToInt32(dtQtnAttchmnt.Rows[intRowCount]["QTFLS_SLNUM"]);
                hiddenQtnAtchmntSlnmbr.Value = fileCountValue.ToString();
            }
            else
            {
                hiddenQtnAtchmntSlnmbr.Value = "0";
            }

            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            //for displaying additional files
            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;
            objEntityLead.QtnFile_Type = 2;
            DataTable dtQtnAtchmntDtl = new DataTable();
            dtQtnAtchmntDtl = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLead);
            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            StringBuilder sb = new StringBuilder();
           


            if (dtQtnAtchmntDtl.Rows.Count == 0)
            {
               
            }
            else
            {
             
                for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                {
                    string strFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                    string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                    string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                    sb.Append("<tr class=\"edit\">");
                    int intCnt = intRowBodyCount + 1;
                     sb.Append( "<td class=\"tdT\" style=\" width:5%;word-break: break-all; word-wrap:break-word;text-align: left;display:none;\" >" + strQtnFileId + "</td>");
                     sb.Append( "<td class=\"tdT\" style=\" width:5%;word-break: break-all; word-wrap:break-word;text-align: left;display:none;\" >" + strFileName + "</td>");

                     sb.Append( "<td>");
                     sb.Append( "<span class=\"button-checkbox flt_n mr_rgt_chk\">");
                     sb.Append( "<button type=\"button\" class=\"active btn-p\" data-color=\"p\" onclick=\"myFunct()\" ng-model=\"all\"><i class=\"state-icon fa fa-check-square-o\"></i>Â&nbsp;</button>");
                     sb.Append("<input type=\"checkbox\" class=\"hidden\" id='chbx_SupplierFl" + strQtnFileId + "'>");
                     sb.Append( "</span>");
                   sb.Append( "</td>");
                   sb.Append("<td class=\"tr_l\"><a target=\"_blank\" href=" + strFilePath + strFileName + ">" + strActualFileName + "</a></td>");
                   sb.Append( "<td> ");
                    sb.Append( "<div class=\"btn_stl1\">");
                    sb.Append(" <button class=\"btn act_btn bn3\"  title=\"Delete\" onclick=\"return CheckForDeleteQtnSupplierAttchmntInd('" + strQtnFileId + "','" + strFileName + "');\">");
                     sb.Append( "  <i class=\"fa fa-trash\"></i>");
                     sb.Append( " </button>");
                    sb.Append( " </div>");
                    sb.Append(" </td>");                  
                     sb.Append( "</tr>");
                }
            }

            QtnAtchmntSupplierFiles.InnerHtml = sb.ToString();

        }
        else
        {

            Response.Redirect("~/Default.aspx");
        }
    }

    protected void btnSupplierQuoteDelete_Click(object sender, EventArgs e)
    {
        if (hiddenQuotationID.Value != "" && hiddenQuotationID.Value != null && Request.QueryString["Id"] != null)
        {

            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();

            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;

            string strCanclDtlId = "";
            string[] strarrCancldtlIds = strCanclDtlId.Split(',');
            if (hiddenCanclFileDtlId.Value != "" && hiddenCanclFileDtlId.Value != null)
            {
                strCanclDtlId = hiddenCanclFileDtlId.Value;
                strarrCancldtlIds = strCanclDtlId.Split(',');

            }


            objBusinessLeadIndvl.DeleteQuotationAttachment(objEntityLead, strarrCancldtlIds);

            string strCanclDtlFile = "";
            string[] strarrCancldtlFile = strCanclDtlFile.Split(',');
            if (hiddenCanclFileDtlName.Value != "" && hiddenCanclFileDtlName.Value != null)
            {
                strCanclDtlFile = hiddenCanclFileDtlName.Value;
                strarrCancldtlFile = strCanclDtlFile.Split(',');

            }

            //Delete from location
            foreach (string objAttchFile in strarrCancldtlFile)
            {


                string strFileLocation = strFilePath + objAttchFile;
                if (File.Exists(MapPath(strFileLocation)))
                {
                    File.Delete(MapPath(strFileLocation));
                }
            }
            DisplaySupplierQuoteDtl();
            hiddenOpenSupplierAttch.Value = "REMOVE";
        }
        else
        {
            Response.Redirect("~/Default.aspx");
        }
    }

    //----------------------------FOR ATTACHING ADDITIONAL TENDER FILES-------------------------------
    protected void btnUploadQtnAttchTender_Click(object sender, EventArgs e)
    {
        List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttch = new clsEntityLayerQuotationAttchmntDtl();
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
        clsCommonLibrary objCommon = new clsCommonLibrary();
        if (hiddenLeadId.Value != "" && hiddenQuotationID.Value != "" && Request.QueryString["Id"] != null)
        {
            int leadid = Convert.ToInt32(hiddenLeadId.Value);
            objEntityLead.LeadId = leadid;

            int intCorp_id = 0;
            if (Session["CORPOFFICEID"] != null)
            {
                intCorp_id = Convert.ToInt32(Session["CORPOFFICEID"]);

            }
            else
            {
                Response.Redirect("~/Default.aspx");

            }


            objEntityQtnDetailsAttch.CorpOffice_Id = intCorp_id;
            objEntityLead.Corp_Id = intCorp_id;

            int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityQtnDetailsAttch.QuotationId = Convert.ToInt32(intQtnId);


            int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.QUOTATION);
            int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            int intCount = 0;
            int intCounting = 0;
            if (hiddenQtnAtchmntSlnmbr.Value == "")
            {
                intCount = 0;
                intCounting = 0;
            }
            else
            {
                intCount = Convert.ToInt32(hiddenQtnAtchmntSlnmbr.Value);
                intCounting = Convert.ToInt32(hiddenQtnAtchmntSlnmbr.Value);
            }
            string strFileExt;
            string strFileName;


            //for inserting details into table
            //if (FupQtnAttchmntTender1.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender1.FileName.Substring(FupQtnAttchmntTender1.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender1.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (FupQtnAttchmntTender2.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender2.FileName.Substring(FupQtnAttchmntTender2.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender2.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (FupQtnAttchmntTender3.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender3.FileName.Substring(FupQtnAttchmntTender3.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender3.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (FupQtnAttchmntTender4.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender4.FileName.Substring(FupQtnAttchmntTender4.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender4.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (FupQtnAttchmntTender5.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender5.FileName.Substring(FupQtnAttchmntTender5.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender5.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (FupQtnAttchmntTender6.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender6.FileName.Substring(FupQtnAttchmntTender6.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender6.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (FupQtnAttchmntTender7.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender7.FileName.Substring(FupQtnAttchmntTender7.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender7.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (FupQtnAttchmntTender8.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender8.FileName.Substring(FupQtnAttchmntTender8.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender8.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (FupQtnAttchmntTender9.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender9.FileName.Substring(FupQtnAttchmntTender9.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender9.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}
            //if (FupQtnAttchmntTender10.HasFile)
            //{
            //    clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
            //    intCount++;
            //    strFileExt = FupQtnAttchmntTender10.FileName.Substring(FupQtnAttchmntTender10.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCount + "." + strFileExt;
            //    objEntityQtnDetailsAttchmnt.FileName = strFileName;
            //    objEntityQtnDetailsAttchmnt.ActualFileName = FupQtnAttchmntTender10.FileName;
            //    objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intCount;
            //    objEntityQtnDetailsAttchmnt.QuotationId = Convert.ToInt32(intQtnId);
            //    objEntityQtnDetailsAttchmnt.CorpOffice_Id = intCorp_id;
            //    objEntityQtnDetailsAttchmnt.QtnFileType = 3;
            //    objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);
            //}


            objBusinessLeadIndvl.InsertQtnAttchmnt(objEntityQtnAttchmntDeatilsList);



            //for saving into folder path

            //if (FupQtnAttchmntTender1.HasFile)
            //{

            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender1.FileName.Substring(FupQtnAttchmntTender1.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender1.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (FupQtnAttchmntTender2.HasFile)
            //{

            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender2.FileName.Substring(FupQtnAttchmntTender2.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender2.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (FupQtnAttchmntTender3.HasFile)
            //{

            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender3.FileName.Substring(FupQtnAttchmntTender3.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender3.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (FupQtnAttchmntTender4.HasFile)
            //{

            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender4.FileName.Substring(FupQtnAttchmntTender4.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender4.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (FupQtnAttchmntTender5.HasFile)
            //{
            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender5.FileName.Substring(FupQtnAttchmntTender5.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender5.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (FupQtnAttchmntTender6.HasFile)
            //{

            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender6.FileName.Substring(FupQtnAttchmntTender6.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender6.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (FupQtnAttchmntTender7.HasFile)
            //{
            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender7.FileName.Substring(FupQtnAttchmntTender7.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender7.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (FupQtnAttchmntTender8.HasFile)
            //{
            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender8.FileName.Substring(FupQtnAttchmntTender8.FileName.LastIndexOf('.') + 1).ToLower();
            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender8.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (FupQtnAttchmntTender9.HasFile)
            //{

            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender9.FileName.Substring(FupQtnAttchmntTender9.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender9.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}
            //if (FupQtnAttchmntTender10.HasFile)
            //{
            //    intCounting++;
            //    strFileExt = FupQtnAttchmntTender10.FileName.Substring(FupQtnAttchmntTender10.FileName.LastIndexOf('.') + 1).ToLower();

            //    strFileName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + intQtnId + "_" + intCounting + "." + strFileExt;
            //    string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            //    FupQtnAttchmntTender10.SaveAs(Server.MapPath(strImagePath) + strFileName);
            //}

            DisplayTenderDtl();
            hiddenOpenTenderAttch.Value = "OPEN";

        }

        else
        {
            Response.Redirect("~/Default.aspx");
        }


    }



    //-----------------FOR VIEWING QUOTATION ATTACHMENT--------------

    public void DisplayTenderDtl()
    {
        if (hiddenQuotationID.Value != "")
        {
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();



            objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);
            DataTable dtQtnAttchmnt = new DataTable();
            dtQtnAttchmnt = objBusinessLayerQuotation.ReadQuotationAttchmnt(objEntityQuotation);

            if (dtQtnAttchmnt.Rows.Count > 0)
            {
                int intRowCount = dtQtnAttchmnt.Rows.Count - 1;
                int fileCountValue = Convert.ToInt32(dtQtnAttchmnt.Rows[intRowCount]["QTFLS_SLNUM"]);
                hiddenQtnAtchmntSlnmbr.Value = fileCountValue.ToString();
            }
            else
            {
                hiddenQtnAtchmntSlnmbr.Value = "0";
            }
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            //for displaying additional files
            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;
            objEntityLead.QtnFile_Type = 3;
            DataTable dtQtnAtchmntDtl = new DataTable();
            dtQtnAtchmntDtl = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLead);
            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            StringBuilder sb = new StringBuilder();
          


            if (dtQtnAtchmntDtl.Rows.Count == 0)
            {
                
            }
            else
            {

               

                for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                {
                    string strFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                    string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                    string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                     sb.Append( "<tr class=\"edit\">");
                    int intCnt = intRowBodyCount + 1;
                     sb.Append( "<td class=\"tdT\" style=\" width:5%;word-break: break-all; word-wrap:break-word;text-align: left;display:none;\" >" + strQtnFileId + "</td>");
                     sb.Append( "<td class=\"tdT\" style=\" width:5%;word-break: break-all; word-wrap:break-word;text-align: left;display:none;\" >" + strFileName + "</td>");

                     sb.Append( "<td>");
                     sb.Append( "<span class=\"button-checkbox flt_n mr_rgt_chk\">");
                       sb.Append( "<button type=\"button\" class=\"active btn-p\" data-color=\"p\" onclick=\"myFunct()\" ng-model=\"all\"><i class=\"state-icon fa fa-check-square-o\"></i>Â&nbsp;</button>");
                       sb.Append(" <input type=\"checkbox\" class=\"hidden\" id='chbx_TenderFl" + strQtnFileId + "'>");
                    sb.Append( " </span>");
                   sb.Append( "</td>");
                   sb.Append("<td class=\"tr_l\"><a href=" + strFilePath + strFileName + ">" + strActualFileName + "</a></td>");
                   sb.Append( "<td> ");
                   sb.Append( "  <div class=\"btn_stl1\">");
                   sb.Append("  <button class=\"btn act_btn bn3\" onclick=\"return CheckForDeleteQtnTenderAttchmntInd('" + strQtnFileId + "','" + strFileName + "');\" title=\"Delete\">");
                     sb.Append( "    <i class=\"fa fa-trash\"></i>");
                     sb.Append( "  </button>");
                    sb.Append( " </div>");
                    sb.Append("  </td>");
                 
                     sb.Append( "</tr>");
                }

            }

            QtnAtchmntTenderFiles.InnerHtml = sb.ToString();

        }
        else
        {

            Response.Redirect("~/Default.aspx");
        }
    }
    protected void btnQtnAtchmntTenderDelete_Click(object sender, EventArgs e)
    {
        if (hiddenQuotationID.Value != "" && hiddenQuotationID.Value != null && Request.QueryString["Id"] != null)
        {

            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();

            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;

            string strCanclDtlId = "";
            string[] strarrCancldtlIds = strCanclDtlId.Split(',');
            if (hiddenCanclFileDtlId.Value != "" && hiddenCanclFileDtlId.Value != null)
            {
                strCanclDtlId = hiddenCanclFileDtlId.Value;
                strarrCancldtlIds = strCanclDtlId.Split(',');

            }


            objBusinessLeadIndvl.DeleteQuotationAttachment(objEntityLead, strarrCancldtlIds);

            string strCanclDtlFile = "";
            string[] strarrCancldtlFile = strCanclDtlFile.Split(',');
            if (hiddenCanclFileDtlName.Value != "" && hiddenCanclFileDtlName.Value != null)
            {
                strCanclDtlFile = hiddenCanclFileDtlName.Value;
                strarrCancldtlFile = strCanclDtlFile.Split(',');

            }

            //Delete from location
            foreach (string objAttchFile in strarrCancldtlFile)
            {


                string strFileLocation = strFilePath + objAttchFile;
                if (File.Exists(MapPath(strFileLocation)))
                {
                    File.Delete(MapPath(strFileLocation));
                }
            }


            DisplayTenderDtl();
            hiddenOpenTenderAttch.Value = "REMOVE";

        }
        else
        {
            Response.Redirect("~/Default.aspx");
        }

    }



    public void DisplayAtchmntDtlView()
    {
        if (hiddenQuotationID.Value != "")
        {
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            //for displaying additional files
            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;
            objEntityLead.QtnFile_Type = 1;
            DataTable dtQtnAtchmntDtl = new DataTable();
            dtQtnAtchmntDtl = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLead);
            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            StringBuilder sb = new StringBuilder();
           sb.Append("<table  class=\"main_tableQtnAttch\" cellspacing=\"0\" cellpadding=\"2px\"  >");

             sb.Append( "<thead style=\"font-family: calibri;\">");
             sb.Append( "<tr class=\"main_table_head\">");
             sb.Append( "<th class=\"thT\" style=\"width:93%; word-wrap:break-word;text-align: left;\"> ADDITIONAL FILES </th>");
             sb.Append( "</tr>");

             sb.Append( "</thead>");


            if (dtQtnAtchmntDtl.Rows.Count == 0)
            {
                 sb.Append( "<tbody style=\"font-family: calibri;\">");
                 sb.Append( "<tr>");
                 sb.Append( "<td class=\"tdT\" colspan='2'><p style=\"text-align:center; font-family: calibri;\">No Data Available</p></td>");
                 sb.Append( "</tr>");

            }
            else
            {

                 sb.Append( "<tbody style=\"font-family: calibri;\">");

                for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                {
                    string strFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                    string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                    string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                    string MailSndSts = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ATCH_MAIL_STS"].ToString();
                     sb.Append( "<tr>");
                    int intCnt = intRowBodyCount + 1;
                    if (MailSndSts == "0")
                    {
                         sb.Append( "<td class=\"tdT\" style=\" width:99%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + "<a class=\"AnchorAttachmntEdit\" target=\"_blank\" href=" + strFilePath + strFileName + ">" + strActualFileName + "</a></td>");

                    }
                    else
                    {
                         sb.Append( "<td class=\"tdT\" style=\" width:99%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + "<a class=\"AnchorAttachmntEdit\" style=\"color: red;\" target=\"_blank\" href=" + strFilePath + strFileName + ">" + strActualFileName + "</a></td>");

                    }
                     sb.Append( "</tr>");
                }

            }
             sb.Append( "</tbody>");
             sb.Append( "</table>");


             sb.Append( "<div style=\"float:left;width:37%;margin-left: 62%;margin-top: 3%;\"><img src=\"../../Images/Icons/red-square-vector.png\" alt=\"red\" style=\"float: left;\"><h2 style=\"font-size: 13px;color: black;\"> - Attached With Mail</h2>");
               sb.Append( "<img src=\"../../Images/Icons/green-square-vector.png\" alt=\"green\" style=\"float: left;\"><h2 style=\"font-size: 13px;color: black;\"> - Not Attached With Mail</h2> </div>");

           // divQtnAttchmntAdditionalFileView.InnerHtml = sb.ToString();

        }
        else
        {

            Response.Redirect("~/Default.aspx");
        }
    }

    public void DisplayAtchmntSupplierQuoteView()
    {
        if (hiddenQuotationID.Value != "")
        {
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            //for displaying additional files
            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;
            objEntityLead.QtnFile_Type = 2;
            DataTable dtQtnAtchmntDtl = new DataTable();
            dtQtnAtchmntDtl = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLead);
            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            StringBuilder sb = new StringBuilder();
            sb.Append("<table class=\"main_tableQtnAttch\" cellspacing=\"0\" cellpadding=\"2px\"  >");

             sb.Append( "<thead style=\"font-family: calibri;\">");
             sb.Append( "<tr class=\"main_table_head\">");
             sb.Append( "<th class=\"thT\" style=\"width:93%; word-wrap:break-word;text-align: left;\"> SUPPLIER QUOTES </th>");
             sb.Append( "</tr>");

             sb.Append( "</thead>");


            if (dtQtnAtchmntDtl.Rows.Count == 0)
            {
                 sb.Append( "<tbody style=\"font-family: calibri;\">");
                 sb.Append( "<tr>");
                 sb.Append( "<td class=\"tdT\" colspan='2'><p style=\"text-align:center; font-family: calibri;\">No Data Available</p></td>");
                 sb.Append( "</tr>");

            }
            else
            {

                 sb.Append( "<tbody style=\"font-family: calibri;\">");

                for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                {
                    string strFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                    string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                    string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                     sb.Append( "<tr>");
                    int intCnt = intRowBodyCount + 1;
                     sb.Append( "<td class=\"tdT\" style=\" width:99%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + "<a class=\"AnchorAttachmntEdit\" target=\"_blank\" href=" + strFilePath + strFileName + ">" + strActualFileName + "</a></td>");
                     sb.Append( "</tr>");
                }

            }
             sb.Append( "</tbody>");
             sb.Append( "</table>");
           // divQtnAttchmntSupplierQuoteView.InnerHtml = sb.ToString();

        }
        else
        {

            Response.Redirect("~/Default.aspx");
        }
    }


    public void DisplayAtchmntTenderView()
    {
        if (hiddenQuotationID.Value != "")
        {
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            //for displaying additional files
            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;
            objEntityLead.QtnFile_Type = 3;
            DataTable dtQtnAtchmntDtl = new DataTable();
            dtQtnAtchmntDtl = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLead);
            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            StringBuilder sb = new StringBuilder();
            sb.Append( "<table  class=\"main_tableQtnAttch\" cellspacing=\"0\" cellpadding=\"2px\"  >");

             sb.Append( "<thead style=\"font-family: calibri;\">");
             sb.Append( "<tr class=\"main_table_head\">");
             sb.Append( "<th class=\"thT\" style=\"width:93%; word-wrap:break-word;text-align: left;\"> TENDER FILES </th>");
             sb.Append( "</tr>");

             sb.Append( "</thead>");


            if (dtQtnAtchmntDtl.Rows.Count == 0)
            {
                 sb.Append( "<tbody style=\"font-family: calibri;\">");
                 sb.Append( "<tr>");
                 sb.Append( "<td class=\"tdT\" colspan='2'><p style=\"text-align:center; font-family: calibri;\">No Data Available</p></td>");
                 sb.Append( "</tr>");

            }
            else
            {

                 sb.Append( "<tbody style=\"font-family: calibri;\">");

                for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                {
                    string strFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                    string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                    string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                     sb.Append( "<tr>");
                    int intCnt = intRowBodyCount + 1;
                     sb.Append( "<td class=\"tdT\" style=\" width:99%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + "<a class=\"AnchorAttachmntEdit\" target=\"_blank\" href=" + strFilePath + strFileName + ">" + strActualFileName + "</a></td>");
                     sb.Append( "</tr>");
                }

            }
             sb.Append( "</tbody>");
             sb.Append( "</table>");
           // divQtnTchmntTndrView.InnerHtml = sb.ToString();

        }
        else
        {

            Response.Redirect("~/Default.aspx");
        }
    }
    //for Cc
    [WebMethod]
    public static string CcHistoryLoad(string strTextContent)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
        string[] strCcContentSplit = strTextContent.Split(',');

        objEntityLead.CcTextboxContent = strCcContentSplit[0];
        DataTable dtCcMailid = objBusinessLeadIndvl.ReadMailCcDetail(objEntityLead);
        string strHtmlMail = "";
        if (dtCcMailid.Rows.Count > 0)
        {
            Int64 intPrvsCcMailId = Convert.ToInt64(dtCcMailid.Rows[0]["LDMAIL_ID"]);
            objEntityLead.PrvsCcMailid = intPrvsCcMailId;
            DataTable dtPrvsAddrs = objBusinessLeadIndvl.ReadMailCcPreviousAddrs(objEntityLead);
            if (dtPrvsAddrs.Rows.Count > 0)
            {
                int intRowCount = dtPrvsAddrs.Rows.Count;
                string strMailIds = "";
                string strspan = "";
                if (intRowCount < 5)
                {
                    for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                    {
                        if (dtPrvsAddrs.Rows[intRcount]["LDMAILCC_CC"].ToString() != objEntityLead.CcTextboxContent)
                        {
                            strMailIds = dtPrvsAddrs.Rows[intRcount]["LDMAILCC_CC"].ToString();
                            strspan += "<span id=CcSpan" + intRcount + " onclick=\"AddCcToCcText('" + strMailIds + "','CcSpan" + intRcount + "');\" style=\"cursor: pointer; display:;\">" + strMailIds + "" + "," + "</span>";
                        }
                    }
                }
                else
                {
                    for (int intRcount = 0; intRcount < 5; intRcount++)
                    {
                        if (dtPrvsAddrs.Rows[intRcount]["LDMAILCC_CC"].ToString() != objEntityLead.CcTextboxContent)
                        {
                            strMailIds += dtPrvsAddrs.Rows[intRcount]["LDMAILCC_CC"].ToString();
                            strspan += "<span id=CcSpan" + intRcount + " onclick=\"AddCcToCcText('" + strMailIds + "','CcSpan" + intRcount + "');\" style=\"cursor: pointer; display:;\">" + strMailIds + "" + "," + "</span>";
                        }
                    }
                }
                if (strMailIds != "")
                {
                    strMailIds = strMailIds.TrimEnd(strMailIds[strMailIds.Length - 1]);
                }
                strHtmlMail = "<span id='SpanCcHelper' style=\"cursor: pointer; font-size: medium;margin-left: 59px; color:rgb(2, 71, 2);\">" + strspan + "</span>";


            }
        }
        return strHtmlMail;
    }


    //for bcc

    [WebMethod]
    public static string BCcHistoryLoad(string strTextContent)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
        string[] strBCcContentSplit = strTextContent.Split(',');

        objEntityLead.BCcTextboxContent = strBCcContentSplit[0];
        DataTable dtBCcMailid = objBusinessLeadIndvl.ReadMailBCcDetail(objEntityLead);
        string strHtmlMail = "";
        if (dtBCcMailid.Rows.Count > 0)
        {
            Int64 intPrvsBCcMailId = Convert.ToInt64(dtBCcMailid.Rows[0]["LDMAIL_ID"]);
            objEntityLead.PrvsBCcMailid = intPrvsBCcMailId;
            DataTable dtPrvsAddrs = objBusinessLeadIndvl.ReadMailBCcPreviousAddrs(objEntityLead);
            if (dtPrvsAddrs.Rows.Count > 0)
            {
                int intRowCount = dtPrvsAddrs.Rows.Count;
                string strMailIds = "";
                string strspan = "";
                if (intRowCount < 5)
                {
                    for (int intRcount = 0; intRcount < intRowCount; intRcount++)
                    {
                        if (dtPrvsAddrs.Rows[intRcount]["LDMAILBCC_BCC"].ToString() != objEntityLead.BCcTextboxContent)
                        {
                            strMailIds = dtPrvsAddrs.Rows[intRcount]["LDMAILBCC_BCC"].ToString();
                            strspan += "<span id=BccSpan" + intRcount + " onclick=\"AddBCcToBCcText('" + strMailIds + "','BccSpan" + intRcount + "');\" style=\"cursor: pointer; display:;\">" + strMailIds + "" + "," + "</span>";
                        }
                    }
                }
                else
                {
                    for (int intRcount = 0; intRcount < 5; intRcount++)
                    {
                        strMailIds = dtPrvsAddrs.Rows[intRcount]["LDMAILBCC_BCC"].ToString();
                        strspan += "<span id=BccSpan" + intRcount + " onclick=\"AddBCcToBCcText('" + strMailIds + "','BccSpan" + intRcount + "');\" style=\"cursor: pointer;\">" + strMailIds + "" + "," + "</span>";
                    }
                }
                strMailIds = strMailIds.TrimEnd(strMailIds[strMailIds.Length - 1]);
                strHtmlMail = "<span id='SpanBCcHelper'style=\"cursor: pointer;margin-left: 59px; font-size: medium; color:rgb(2, 71, 2);\">" + strspan + "</span>";


            }
        }
        return strHtmlMail;
    }

    //0013
    [WebMethod]
    public static string ProjectLoad(string strLeadId)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
        objEntityLeadCreation.LeadId = Convert.ToInt32(strLeadId);
        DataTable dtProject = objBusinessLeadIndvl.ProjectLead(objEntityLeadCreation);
        string projectInLead = "";

        if (dtProject.Rows.Count > 0)
        {
            if (dtProject.Rows[0]["PROJECT_ID"] == DBNull.Value && dtProject.Rows[0]["PROJECT_ID"].ToString() == "")
            {
                //evm0012
                //BIDDING :1 AWARDED :2
                projectInLead = "1";
                if (dtProject.Rows[0]["GUARNTMODE_ID"] != DBNull.Value && dtProject.Rows[0]["GUARNTMODE_ID"].ToString() != "")
                {
                    //101	Awarded , 102	Bidding
                    if (dtProject.Rows[0]["GUARNTMODE_ID"].ToString() == "102")
                    {
                        projectInLead = "1";
                    }
                    else if (dtProject.Rows[0]["GUARNTMODE_ID"].ToString() == "101")
                    {
                        projectInLead = "2";
                    }
                }
            }
            else
            {
                projectInLead = "0";
            }

        }
        return projectInLead;

    }


    protected void btnAttachFileWithMail_Click(object sender, EventArgs e)
    {
        if (hiddenQuotationID.Value != "" && hiddenQuotationID.Value != null && Request.QueryString["Id"] != null)
        {
            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            clsCommonLibrary objCommon = new clsCommonLibrary();

            string strFilePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

            int intQid = Convert.ToInt32(hiddenQuotationID.Value);
            objEntityLead.Quotation_Id = intQid;

            string strCanclDtlId = "";
            string[] strarrCancldtlIds = strCanclDtlId.Split(',');
            if (hiddenCanclFileDtlId.Value != "" && hiddenCanclFileDtlId.Value != null)
            {
                strCanclDtlId = hiddenCanclFileDtlId.Value;
                strarrCancldtlIds = strCanclDtlId.Split(',');
            }
            objBusinessLeadIndvl.ChangeFileMailAtchSts(objEntityLead, strarrCancldtlIds);
            DisplayAtchmntDtl();
            hiddenOpenAdditionalAttch.Value = "STSCHNGE";
        }
        else
        {
            Response.Redirect("~/Default.aspx");
        }
    }
    //evm0012 STARTS
    //Quotation2
    public void LoadDataForSendingMail()
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

        clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
        clsCommonLibrary objCommon = new clsCommonLibrary();
        int intCorpId = 0;
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                intCorpId = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            intCorpId = Convert.ToInt32(hiddenCorporateId.Value);
        }
        //clsEntityCommon objEntityCommon = new clsEntityCommon();
        objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
        DataTable dtLead = new DataTable();
        dtLead = objBusinessLayerQuotation.ReadLeadDtlForDisplay(objEntityQuotation);

        if (dtLead.Rows.Count > 0)
        {
            hiddenCorporateDivId.Value = dtLead.Rows[0]["CPRDIV_ID"].ToString();
            //  objEntityCommon.CorporateDivId = Convert.ToInt32(dtLead.Rows[0]["CPRDIV_ID"]);
        }

        clsCommonLibrary.CORP_GLOBAL[] arrEnumer = {  clsCommonLibrary.CORP_GLOBAL.CNCL_REASN_MUST,
                                                               clsCommonLibrary.CORP_GLOBAL.CMN_PERCENT_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.TAX_PERC_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_MNEY_DECIMAL_CNT,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_UNIT_DECIMAL_CNT,
                                                                clsCommonLibrary.CORP_GLOBAL.DEFLT_CURNCY_MST_ID,
                                                                  clsCommonLibrary.CORP_GLOBAL.GN_TAX_ENABLED,
                                                                    clsCommonLibrary.CORP_GLOBAL.DFLT_QTNFRMT_ID,
                                                                     clsCommonLibrary.CORP_GLOBAL.DFLT_CURNCY_DISPLAY
                                                              };
        DataTable dtCorpDetail = new DataTable();
        dtCorpDetail = objBusinessLayer.LoadGlobalDetail(arrEnumer, intCorpId);
        if (dtCorpDetail.Rows.Count > 0)
        {

            hiddenFloatingValueMoney.Value = dtCorpDetail.Rows[0]["GN_MNEY_DECIMAL_CNT"].ToString();
            hiddenFloatingValueTaxPercentage.Value = dtCorpDetail.Rows[0]["TAX_PERC_DECIMAL"].ToString();
            hiddenFloatingValueUnit.Value = dtCorpDetail.Rows[0]["GN_UNIT_DECIMAL_CNT"].ToString(); ;
            hiddenTaxEnabled.Value = dtCorpDetail.Rows[0]["GN_TAX_ENABLED"].ToString();
            hiddenFloatingValueCommonPercentage.Value = dtCorpDetail.Rows[0]["CMN_PERCENT_DECIMAL"].ToString();
            hiddenDfltCurrencyMstrId.Value = dtCorpDetail.Rows[0]["DEFLT_CURNCY_MST_ID"].ToString();
            hiddenDfltQuotationFormatId.Value = dtCorpDetail.Rows[0]["DFLT_QTNFRMT_ID"].ToString();
            hiddenDfltCurrencyDisplay.Value = dtCorpDetail.Rows[0]["DFLT_CURNCY_DISPLAY"].ToString();
        }

        clsEntityCommon objEntityCommon = new clsEntityCommon();
        // cliebt side number format
        objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
        DataTable dtCurrencyDetail = new DataTable();
        dtCurrencyDetail = objBusinessLayer.ReadCurrencyDetails(objEntityCommon);
        if (dtCurrencyDetail.Rows.Count > 0)
        {
            hiddenCurrencyModeId.Value = dtCurrencyDetail.Rows[0]["CRNCYMD_ID"].ToString();
            hiddenCurrencySymbol.Value = dtCurrencyDetail.Rows[0]["CRNCMST_SYMBOL"].ToString();
            hiddenCurrencyCode.Value = dtCurrencyDetail.Rows[0]["CRNCMST_ABBRV"].ToString();
        }
    }

    protected void btnReSendMailQtn_Click(object sender, EventArgs e)
    {
        LoadDataForSendingMail();
        LeadDetails(hiddenLeadId.Value);

        if (hiddenQtnTmpltId.Value == "1")
        {
            //from Cmpzt_Quotation
            // protected void btnReSendMail_Click(object sender, EventArgs e)

            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

            if (hiddenLeadId.Value != "" && (hiddenQuotationID.Value != "") && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
            {
                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);


                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));

                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;
                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                int intLeadStatus = 0;
                if (dtLeadStatus.Rows.Count > 0)
                {
                    intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
                }
                if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered))
                {
                    Response.Redirect("~/Default.aspx");
                }

                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();


                objEntityLead.LeadId = objEntityQuotation.Lead_Id;

                objEntityLead.User_Id = intUserId;
                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);
                DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
                {

                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "Enquiry - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                    clsEntityCommon objEntityCommon = new clsEntityCommon();
                    objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                    objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                    objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                    DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);

                    string StrMailContent = "Dear " + lblCustName.Text + " ," + Environment.NewLine + Environment.NewLine;

                    if (lblTitle.Text == "")
                    {
                        StrMailContent = StrMailContent + "Please find attached Quotation " + Environment.NewLine + Environment.NewLine;
                    }
                    else
                    {
                        StrMailContent = StrMailContent + "Please find attached Quotation for " + lblTitle.Text + Environment.NewLine + Environment.NewLine;
                    }
                    StrMailContent = StrMailContent + "Quotation Reference Number: " + hiddenRefNo.Value + Environment.NewLine + Environment.NewLine;
                    if (dtMailContent.Rows.Count > 0)
                    {

                        objEntityMail.Email_Content = StrMailContent + dtMailContent.Rows[0]["CMTMPLT_MESSAGE"].ToString() + Environment.NewLine;

                    }
                    else
                    {
                        objEntityMail.Email_Content = StrMailContent + "" + Environment.NewLine;
                    }
                    if (hiddenResendQtnMailType.Value == "TO")
                    {
                        objEntityMail.To_Email_Address = hiddenResendQtnMailID.Value;
                    }
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.User_Id = objEntityLead.User_Id;
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;



                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();


                    int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
                    if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
                    {
                        PdfGeneration();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
                    {
                        PdfAdvancedGeneration();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
                    {
                        PdfCorporateAdvancedGeneration();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
                    {
                        PdfTermsToLastCorporateAdvancedGeneration();
                    }
                    clsCommonLibrary objComm = new clsCommonLibrary();
                    string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                    string strFileName = "Enquiry-" + objEntityQuotation.Lead_Id + "_Quotation.pdf";
                    string strFileLocation = strFilePath + strFileName;
                    if (File.Exists(Server.MapPath(strFileLocation)))
                    {
                        clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                        objEntityAttach.Email_Real_Name = strFileName;
                        objEntityAttach.Email_File_Name = strFileName;
                        objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                        objEntityMailAttachList.Add(objEntityAttach);
                    }

                    //for sending additional files
                    int intQid = Convert.ToInt32(hiddenQuotationID.Value);
                    objEntityLead.Quotation_Id = intQid;
                    objEntityLead.QtnFile_Type = 1;
                    DataTable dtQtnAtchmntDtl = new DataTable();
                    dtQtnAtchmntDtl = objBusinessLayerIndividual.ReadQuotationAttchmnt(objEntityLead);
                    string strFilePathAddtn = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                    if (dtQtnAtchmntDtl.Rows.Count > 0)
                    {
                        for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                        {
                            string strFileNameAddtn = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                            string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                            string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                            string MailSndSts = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ATCH_MAIL_STS"].ToString();
                            string strFileLocationAddtnl = strFilePathAddtn + strFileNameAddtn;
                            if (MailSndSts.ToString() == "1")
                            {
                                clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                                objEntityAttach.Email_Real_Name = strActualFileName;
                                objEntityAttach.Email_File_Name = strFileNameAddtn;
                                objEntityAttach.Attch_Path = Server.MapPath(strFileLocationAddtnl);
                                objEntityMailAttachList.Add(objEntityAttach);
                            }
                        }
                    }

                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                    if (hiddenResendQtnMailType.Value == "CC")
                    {
                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        objEntityMailCcBCc.CcMail = hiddenResendQtnMailID.Value;
                        objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                    }
                    else if (hiddenResendQtnMailType.Value == "BCC")
                    {
                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        objEntityMailCcBCc.BCcMail = hiddenResendQtnMailID.Value;
                        objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                    }

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                        objEntityQuotation.MailStatus = 1;
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessMail", "SuccessMail();", true);
                    }
                    catch(Exception ex)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessMail", "UnSuccessMail();", true);
                        objEntityQuotation.MailStatus = 0;
                    }
                }
                else
                {
                    objEntityQuotation.MailStatus = 0;
                }

                if (objEntityQuotation.MailStatus == 0)
                {

                }
                else
                {
                    objBusinessLayerQuotation.ReSendMailQuotation(objEntityQuotation);
                }
            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }

        }
        else if (hiddenQtnTmpltId.Value == "2" || hiddenQtnTmpltId.Value == "3")
        {


            clsCommonLibrary objCommon = new clsCommonLibrary();
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

            // if (Request.QueryString["LeadId"] != null && (hiddenQuotationID.Value != "") && Request.QueryString["QTN_TMPLT"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
            if (hiddenLeadId.Value != "" && (hiddenQuotationID.Value != "") && hiddenQtnTmpltId.Value != "" && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
            {
                int intQuotationTemplateTypeId = Convert.ToInt32(hiddenQtnTmpltId.Value);
                //Convert.ToInt32(Request.QueryString["QTN_TMPLT"].ToString());
                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);


                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));


                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;

                string strId = hiddenLeadId.Value;
                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                int intLeadStatus = 0;
                if (dtLeadStatus.Rows.Count > 0)
                {
                    intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
                }
                if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered))
                {
                    Response.Redirect("~/Default.aspx");
                }


                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();


                objEntityLead.LeadId = objEntityQuotation.Lead_Id;



                objEntityLead.User_Id = intUserId;


                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);

                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);
                DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
                {

                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = "Enquiry - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                    clsEntityCommon objEntityCommon = new clsEntityCommon();
                    objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                    objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                    objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                    DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);

                    string StrMailContent = "Dear " + lblCustName.Text + " ," + Environment.NewLine + Environment.NewLine;

                    if (lblTitle.Text == "")
                    {
                        StrMailContent = StrMailContent + "Please find attached Quotation " + Environment.NewLine + Environment.NewLine;
                    }
                    else
                    {
                        StrMailContent = StrMailContent + "Please find attached Quotation for " + lblTitle.Text + Environment.NewLine + Environment.NewLine;
                    }
                    StrMailContent = StrMailContent + "Quotation Reference Number: " + hiddenRefNo.Value + Environment.NewLine + Environment.NewLine;
                    if (dtMailContent.Rows.Count > 0)
                    {

                        objEntityMail.Email_Content = StrMailContent + dtMailContent.Rows[0]["CMTMPLT_MESSAGE"].ToString() + Environment.NewLine;

                    }
                    else
                    {
                        objEntityMail.Email_Content = StrMailContent + "" + Environment.NewLine;
                    }
                    if (hiddenResendQtnMailType.Value == "TO")
                    {
                        //objEntityMail.To_Email_Address = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();
                        objEntityMail.To_Email_Address = hiddenResendQtnMailID.Value;
                    }
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.User_Id = objEntityLead.User_Id;
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;



                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();

                    int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
                    if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
                    {
                        PdfGeneration2();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
                    {
                        PdfAdvancedGeneration2();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
                    {
                        PdfCorporateAdvancedGeneration2();
                    }
                    else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
                    {
                        PdfTermsToLastCorporateAdvancedGeneration2();
                    }

                    clsCommonLibrary objComm = new clsCommonLibrary();
                    string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                    string strFileName = "Enquiry-" + objEntityQuotation.Lead_Id + "_Quotation.pdf";
                    string strFileLocation = strFilePath + strFileName;
                    if (File.Exists(Server.MapPath(strFileLocation)))
                    {
                        clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                        objEntityAttach.Email_Real_Name = strFileName;
                        objEntityAttach.Email_File_Name = strFileName;
                        objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                        objEntityMailAttachList.Add(objEntityAttach);
                    }
                    if (hiddenQtnTmpltId.Value != "")
                    {


                        int intQuotationTemplateType = Convert.ToInt32(hiddenQtnTmpltId.Value);
                        if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                        {
                            clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                            clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                            objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                            objEntityLeadCre.QtnFile_Type = 3;
                            DataTable dtQtnAttchmnt = new DataTable();
                            dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);

                            for (int intAtchCount = 0; intAtchCount < dtQtnAttchmnt.Rows.Count; intAtchCount++)
                            {
                                clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();
                                string strFilePathAttach = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                                string strFileNameAttach = dtQtnAttchmnt.Rows[intAtchCount]["QTFLS_FILENAME"].ToString();
                                string strRealFileNameAttach = dtQtnAttchmnt.Rows[intAtchCount]["QTFLS_FLNM_ACT"].ToString();
                                string strFileLocationAttach = strFilePathAttach + strFileNameAttach;
                                if (File.Exists(Server.MapPath(strFileLocationAttach)))
                                {
                                    objEntityAttach.Email_Real_Name = strRealFileNameAttach;
                                    objEntityAttach.Email_File_Name = strFileNameAttach;
                                    objEntityAttach.Attch_Path = Server.MapPath(strFileLocationAttach);
                                    objEntityMailAttachList.Add(objEntityAttach);
                                }

                            }


                        }
                    }


                    //for sending additional files
                    int intQid = Convert.ToInt32(hiddenQuotationID.Value);
                    objEntityLead.Quotation_Id = intQid;
                    objEntityLead.QtnFile_Type = 1;
                    DataTable dtQtnAtchmntDtl = new DataTable();
                    dtQtnAtchmntDtl = objBusinessLayerIndividual.ReadQuotationAttchmnt(objEntityLead);
                    string strFilePathAddtn = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                    if (dtQtnAtchmntDtl.Rows.Count > 0)
                    {
                        for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                        {
                            string strFileNameAddtn = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                            string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                            string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                            string MailSndSts = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ATCH_MAIL_STS"].ToString();
                            string strFileLocationAddtnl = strFilePathAddtn + strFileNameAddtn;
                            if (MailSndSts.ToString() == "1")
                            {
                                clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                                objEntityAttach.Email_Real_Name = strActualFileName;
                                objEntityAttach.Email_File_Name = strFileNameAddtn;
                                objEntityAttach.Attch_Path = Server.MapPath(strFileLocationAddtnl);
                                objEntityMailAttachList.Add(objEntityAttach);
                            }
                        }
                    }
                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();
                    //EVM0012 Fix no countcheck

                    if (hiddenResendQtnMailType.Value == "To")
                    {

                    }
                    else if (hiddenResendQtnMailType.Value == "CC")
                    {

                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        objEntityMailCcBCc.CcMail = hiddenResendQtnMailID.Value;
                        objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                    }
                    else if (hiddenResendQtnMailType.Value == "BCC")
                    {
                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        objEntityMailCcBCc.BCcMail = hiddenResendQtnMailID.Value;
                        objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                    }

                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                        ScriptManager.RegisterStartupScript(this, GetType(), "SuccessMail", "SuccessMail();", true);
                        objEntityQuotation.MailStatus = 1;
                    }
                    catch
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessMail", "UnSuccessMail();", true);
                        objEntityQuotation.MailStatus = 0;
                    }
                }
                else
                {

                    objEntityQuotation.MailStatus = 0;
                }

               
            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }
        }
    }
    public double MeasureHeight(PdfSharp.Drawing.XGraphics gfx, string text, PdfSharp.Drawing.XFont font, int width)
    {
        var nlines = text.Split('\n');
        var rlines = text.Split('\r');
        int intNline = nlines.Length;
        int intRline = rlines.Length;

        double totalHeight = 0;
        if (intRline > intNline)
        {
            foreach (string line in rlines)
            {
                var size = gfx.MeasureString(line, font);
                double height = size.Height + (size.Height * Math.Floor(size.Width / width));
                if (height == 0)
                {
                    height = Convert.ToDouble(font.Height.ToString());
                }

                totalHeight += height;
            }
        }
        else
        {
            foreach (string line in nlines)
            {
                var size = gfx.MeasureString(line, font);
                double height = size.Height + (size.Height * Math.Floor(size.Width / width));
                if (height == 0)
                {
                    height = Convert.ToDouble(font.Height.ToString());
                }
                totalHeight += height;
            }
        }
        return totalHeight;
    }

    public string ConvertCurrencyToWords(string NetAmount)
    {
        clsEntityCommon ObjClsentityCommon = new clsEntityCommon();
        clsBusinessLayer ObjClsBussines = new clsBusinessLayer();

        if (hiddenDfltCurrencyMstrId.Value != null && hiddenDfltCurrencyMstrId.Value != "")
        {
            ObjClsentityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
        }
        string NumberToWord = ObjClsBussines.ConvertCurrencyToWords(ObjClsentityCommon, NetAmount);
        return NumberToWord;
    }
    public string RefNumGeneralFormat(int intQtnSerialId)
    {
        clsBusinessLayer objBussiness = new clsBusinessLayer();
        clsEntityCommon objEntity = new clsEntityCommon();

        if (hiddenCorporateId.Value != "")
        {
            objEntity.CorporateID = Convert.ToInt32(hiddenCorporateId.Value);
        }

        if (hiddenOrganisationId.Value != "")
        {
            objEntity.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        if (hiddenCorporateDivId.Value != "")
        {
            objEntity.CorporateDivId = Convert.ToInt32(hiddenCorporateDivId.Value);
        }
        if (hiddenDivisionCode.Value != "")
        {
            objEntity.CorpDivisionCode = hiddenDivisionCode.Value;
        }

        if (hiddenMonthMM.Value != "")
        {
            objEntity.MonthRef = Convert.ToInt32(hiddenMonthMM.Value);
        }
        if (hiddenYearYYYY.Value != "")
        {
            objEntity.YearRef = Convert.ToInt32(hiddenYearYYYY.Value);
        }
        if (hiddenUserCode.Value != "")
        {
            objEntity.UserCodeRef = hiddenUserCode.Value.ToString();
        }

        objEntity.QtnId = Convert.ToInt32(intQtnSerialId);

        if (hiddenQtnRevisionVersn.Value != "")
        {
            objEntity.RvsnVrsnRef = hiddenQtnRevisionVersn.Value.ToString();
        }

        string strRealFormat = objBussiness.strRefFormat(objEntity);

        return strRealFormat;
    }
    public void LeadDetails(string strLeadId)
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (strLeadId != "" && strLeadId != null)
        {
            objEntityQuotation.Lead_Id = Convert.ToInt32(strLeadId);
        }
        DataTable dtLead = new DataTable();
        dtLead = objBusinessLayerQuotation.ReadLeadDtlForDisplay(objEntityQuotation);
        int intLeadStatus = 0;
        // for RE-OPEN PROVISION TO BE ALLOCATED FOR TEAM HEAD
        int intTeamHeadId = 0;
        if (dtLead.Rows.Count > 0)
        {
            if (dtLead.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
            {
                //  lblCustomerName.Text = dtLead.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtLead.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }
            else
            {
                //lblCustomerName.Text = dtLead.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }

            intLeadStatus = Convert.ToInt32(dtLead.Rows[0]["LDSTS_ID"].ToString());

            intTeamHeadId = Convert.ToInt32(dtLead.Rows[0]["TEAM_LEAD_EMP_ID"].ToString());

            hiddenDivisionCode.Value = dtLead.Rows[0]["CPRDIV_CODE"].ToString();
            hiddenUserCode.Value = dtLead.Rows[0]["USR_CODE"].ToString();
            hiddenQtnRevisionVersn.Value = dtLead.Rows[0]["LDQUOT_RVSN"].ToString();

            //lblDate.Text = dtLead.Rows[0]["LEADS_DATE"].ToString();
            //lblTitle.Text = dtLead.Rows[0]["LEADS_TITLE"].ToString();
            //lblDivision.Text = dtLead.Rows[0]["CPRDIV_NAME"].ToString();
            //CKEditorDescription.Text = dtLead.Rows[0]["LEADS_DESCRIPTION"].ToString();
            //hiddenQuotationID.Value = dtLead.Rows[0]["LDQUOT_ID"].ToString();
            hiddenQtnRefSerialId.Value = dtLead.Rows[0]["LDQUOT_REF_SLN_ID"].ToString();
            //hiddenQuotationStatus.Value = dtLead.Rows[0]["LDQUOT_STS"].ToString();
            //hiddenLeadActiveUser.Value = dtLead.Rows[0]["LEADS_ACTIVE_USR_ID"].ToString();

        }
        DataTable dtMonthYear = new DataTable();
        dtMonthYear = objBusinessLayerQuotation.ReadMnthYearForRefNum(objEntityQuotation);
        if (dtMonthYear.Rows.Count > 0)
        {

            hiddenMonthMM.Value = dtMonthYear.Rows[0]["MONTH"].ToString();
            hiddenYearYYYY.Value = dtMonthYear.Rows[0]["YEAR"].ToString();
        }

    }
    private void PdfGeneration2()
    {
        try
        {
            if (hiddenLeadId.Value != "" && hiddenQtnTmpltId.Value != "")
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(hiddenQtnTmpltId.Value.ToString());
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);


                //string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                //string strLenghtofId = strRandomMixedId.Substring(0, 2);
                //int intLenghtofId = Convert.ToInt16(strLenghtofId);
                //string strId = strRandomMixedId.Substring(2, intLenghtofId);
                string strId = hiddenLeadId.Value;

                objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                //00088 


                string StrComments = "";



                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);

                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 9, XFontStyle.Regular);


                //00088
                XFont fontEntryAmntInWords = null;
                fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                //  tf.Alignment = XParagraphAlignment.Center;
                //  tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, 170, 555, pdfPage.Height.Point), XStringFormats.TopLeft);

                graph.DrawString("CUSTOMER QUOTATION", font, XBrushes.Black, new XRect(0, 170, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopCenter);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "corporate-logo.jpg";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 450, 60);
                    xImg.Dispose();
                }

                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();

                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();



                    //00088
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();
                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }


                int intCorpYindex = 70;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;

                if (strCorpZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCorpZipCode, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCorpYindex = intCorpYindex + 15;
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpCountry, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;







                int intCstmrYindex = 225;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 360, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REFERENCE NUMBER", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 16;


                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontTermsDtl, 280);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr2);
                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr3);
                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }

                    intCstmrYindex = intCstmrYindex + 15;
                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCstmrYindex = intCstmrYindex + 15;
                }


                //START
                yPoint = yPoint + 370;
                yLine = yLine + 365;
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                {
                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                    graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                    xImgCurrencySymbl.Dispose();
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNetAmountWithComma + " (As Per List Attached)", fontTermsDtl, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 21;
                yLine = yLine + 21;


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                string strActUserDtl = "";
                string strActMobDtl = " (Mob. " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    strActUserDtl = strActUserName + strActMobDtl;
                }
                else
                {
                    strActUserDtl = strActUserName;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(162, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 378, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 21 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 21 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 50;
                yLine = yLine + 50;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString(dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString(), fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 10;
                yLine = yLine + 10;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["DSGN_NAME"].ToString() + " ( " + dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString() + " Division )";
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "You can view the Bill of Materials in the Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Note : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint + 1, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;
                if (hiddenQtnTmpltId.Value != "")
                {


                    int intQuotationTemplateType = Convert.ToInt32(hiddenQtnTmpltId.Value.ToString());
                    if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {
                        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                        clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                        objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                        objEntityLeadCre.QtnFile_Type = 3;
                        DataTable dtQtnAttchmnt = new DataTable();
                        dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);
                        if (dtQtnAttchmnt.Rows.Count > 0)
                        {
                            string strDocAttch = "* Supporting Documents Attached.";

                            double dDocAttch = MeasureHeight(graph, strDocAttch, fontDocAttchd, 380);
                            if (yPoint + Convert.ToInt32(dNote) >= 795)
                            {
                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;
                            }


                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strDocAttch, fontDocAttchd, XBrushes.Black, new XRect(40, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                        }

                    }
                }

                //STOP
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;



                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("BILL OF MATERIALS", fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 253, yPoint - 18.5, 341.5, yPoint - 18.5);
                if (hiddenTaxEnabled.Value == "1")
                {
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                //column line7
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                //intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                            strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                            strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                            //////
                            //strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");


                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point
                            yPoint = yPoint + 22;

                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }


                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }


                    //for toatal amount section OF TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;



                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                    //00088

                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);


                }
                else
                {
                    //NO TAX

                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                    //     tf.Alignment = XParagraphAlignment.Right;
                    //    tf.DrawString("Tax", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);



                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                // intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                            //      tf.Alignment = XParagraphAlignment.Right;
                            //     tf.DrawString(strTaxAmount, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point
                            yPoint = yPoint + 22;


                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }


                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }
                    //for toatal amount section OF NO TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }


                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                    //00088

                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }



                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";




                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);


                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
                //  Process.Start(Server.MapPath(strImagePath) + pdfFilename);


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfAdvancedGeneration2()
    {// in PdfAdvancedGeneration only choice for Currency code & currency symbol is done
        try
        {
            if (Request.QueryString["LeadId"] != null && Request.QueryString["QTN_TMPLT"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                DataTable dtProjectDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(Request.QueryString["QTN_TMPLT"].ToString());
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);
                dtProjectDtl = objBusinessLayerQuotation.ReadProjectDtlForPDF(objEntityQuotation);

                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);

                string strProductSts = "";
                double dItmDesc = 0;
                string strItemDescription = "";
                int Printneed = 0;

                string StrComments = "";

                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strCustmrPhone = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strProject = "";
                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);

                XFont fontEntry = null;
                XFont fontEntryNetAmnt = null;
                XFont fontEntryAmntInWords = null;
                XFont fontEntryHeading = null;

                if (hiddenTaxEnabled.Value == "1")
                {
                    fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                }
                else
                {
                    fontEntry = new XFont("Calibri", 11, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 11, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 11, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                }

                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDearSir = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 11, XFontStyle.Underline);
                XFont fontWithRef = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontProjectHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 11, XFontStyle.Regular);

                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtProjectDtl.Rows.Count > 0)
                {
                    if (dtProjectDtl.Rows[0]["PROJECT_ID"].ToString() == "")
                    {
                        strProject = dtProjectDtl.Rows[0]["LEADS_PROJECT_NAME"].ToString();

                    }
                    else
                    {
                        strProject = dtProjectDtl.Rows[0]["PROJECT_NAME"].ToString();
                    }

                }
                if (dtQtn.Rows.Count > 0)
                {
                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();

                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();
                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }
                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                    strCustmrPhone = dtCustmrDtl.Rows[0]["LEADS_MOBILE"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 180;
                yLine = yLine + 175;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REF    : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;





                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontCustmrDtl, 480);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                yPoint = yPoint + Convert.ToInt32(dCustAddr1);
                yLine = yLine + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr2);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr2);

                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr3);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr3);

                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    yPoint = yPoint + 13;
                    yLine = yLine + 13;

                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                if (strCustmrPhone != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PHONE : " + strCustmrPhone + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                yPoint = yPoint + 12;
                yLine = yLine + 12;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Dear Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 17;
                yLine = yLine + 17;

                string strSubjContent = "QUOTATION";
                if (lblTitle.Text != "")
                {

                    strSubjContent = strSubjContent + " FOR " + lblTitle.Text.ToUpper();

                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("SUBJECT", fontSubject, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontProjectHeading, XBrushes.Black, new XRect(85, yPoint, 10, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strSubjContent, fontSubject, XBrushes.Black, new XRect(100, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("PROJECT", fontProjectHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontProjectHeading, XBrushes.Black, new XRect(85, yPoint, 10, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strProject, fontProjectHeading, XBrushes.Black, new XRect(100, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontWithRef, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 32;
                yLine = yLine + 32;

                //START
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;



                if (strProject != "")
                {

                    double dProject = MeasureHeight(graph, strProject, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dProject) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }
                }

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {
                    if (yPoint >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                    {

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                            xImgCurrencySymbl.Dispose();
                        }
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);


                    }
                    else
                    { //display code

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(hiddenCurrencyCode.Value + " " + StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(160, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    yPoint = yPoint + 18;
                    yLine = yLine + 18;
                }

                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {
                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dPayment);
                    yLine = yLine + 4 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dValidity);
                    yLine = yLine + 4 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 4 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 4 + Convert.ToInt32(dWarranty);
                }



                bool blnShrinkFormat = false;
                if (yPoint <= 570)
                {
                    blnShrinkFormat = true;
                }

                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 40;
                    yLine = yLine + 40;
                }

                //----------------footer//////////////////
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "( EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + " )";
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(171, yPoint + Convert.ToInt32(dFooterMsg) - 12.5, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 9 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 9 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strDivName = dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString();
                yPoint = yPoint + 11;
                yLine = yLine + 11;

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint + .5, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ( " + strDivName + " Division )";
                double dTeamDtl = MeasureHeight(graph, strTeamDtl, fontNote, 380);
                if (yPoint + Convert.ToInt32(dTeamDtl) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString();
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 9;
                yLine = yLine + 9;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("MANAGER, " + strDivName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 640, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }
                else
                {
                    yPoint = yPoint + 11;
                    yLine = yLine + 11;
                }

                string strNote = "Please view the Bill Of Quantities with price in next page. As per our standard terms of sales.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    ////fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(73, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;
                if (Request.QueryString["QTN_TMPLT"] != null)
                {

                    int intQuotationTemplateType = Convert.ToInt32(Request.QueryString["QTN_TMPLT"].ToString());
                    if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {
                        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                        clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                        objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                        objEntityLeadCre.QtnFile_Type = 3;
                        DataTable dtQtnAttchmnt = new DataTable();
                        dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);
                        if (dtQtnAttchmnt.Rows.Count > 0)
                        {
                            string strDocAttch = "* Supporting Documents Attached.";

                            double dDocAttch = MeasureHeight(graph, strDocAttch, fontDocAttchd, 380);
                            if (yPoint + Convert.ToInt32(dNote) >= 775)
                            {   //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }


                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strDocAttch, fontDocAttchd, XBrushes.Black, new XRect(40, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                        }

                    }
                }
                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();

                }
                //STOP
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                    xImgCmpnyNameBOQHeader.Dispose();
                }
                int COUNT = 0;
                if (dtQtnDtlGroup.Rows.Count > 0)
                {
                    foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                    {
                        COUNT++;
                        //for calculate total for group
                        strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                        strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                        strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                        strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                        strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                        strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                        strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);

                        if (COUNT > 1)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }

                            //NEW PAGE
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                            {
                                XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                                graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                                xImgCmpnyNameBOQHeader.Dispose();
                            }


                        }

                        string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();
                        tf.Alignment = XParagraphAlignment.Center;
                        tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 25, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                        graph.DrawLine(XPens.Black, 251, yPoint - 12, 344, yPoint - 12);

                        if (hiddenTaxEnabled.Value == "1")
                        {
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                            //column line1
                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine + 22);

                            //column line2
                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine + 22);

                            //column line3
                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine + 22);

                            //column line4
                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine + 22);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine + 22);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);

                            yPoint = yPoint + 22;

                            yLine = yLine + 22;

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {
                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);


                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);
                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;
                                        }
                                        else
                                        {

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22 + Convert.ToInt32(CatHeight));

                                            yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                            yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                        }



                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;

                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);




                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(308, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine + 22);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine + 22);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine + 22);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine + 22);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine + 22);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);


                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                        CatLineStart = yLine;
                                                    }

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                                                    double dItmName = 0;
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;
                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 120);
                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;

                                                        }
                                                    }
                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            //strItemDescription = "( " + strItemDescription + " )";
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);




                                        }



                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine + 18);
                                        graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine + 18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;

                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);




                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(308, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                                                    double dItmName = 0;
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;
                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 120);
                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;

                                                        }
                                                    }
                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            //strItemDescription = "( " + strItemDescription + " )";
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }



                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                                        }
                                    }
                                }
                            }

                            //for toatal amount section OF TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(335, yPoint, 137, pdfPage.Height.Point), XStringFormats.TopLeft);


                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(320, yPoint, 150, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            string DiscAmountGrp = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();

                            tf.DrawString(DiscAmountGrp, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {//FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(350, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                            }
                            else
                            { //display code

                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);

                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }


                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {//FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                        }
                        else
                        {

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(291, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                            yPoint = yPoint + 22;

                            yLine = yLine + 22;
                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                            //column line1
                            graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                            //column line2
                            graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                            //column line3
                            graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                            //column line5
                            graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {
                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);

                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;
                                        }
                                        else
                                        {//column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22 + Convert.ToInt32(CatHeight));

                                            yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                            yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                        }



                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;
                                        if (dtQtnDtl.Rows.Count > 0)
                                        { //row line

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;
                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);



                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }

                                                        //row line
                                                        //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(291, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;

                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                                        CatLineStart = yLine;
                                                    }

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                                                    double dItmName = 0;
                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 170);

                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;

                                                        }
                                                    }
                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            //strItemDescription = "( " + strItemDescription + " )";
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                        }

                                                    }

                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);




                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                        }
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);
                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine + 18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {
                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;

                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);



                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }

                                                        //row line
                                                        //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(291, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();

                                                    double dItmName = 0;
                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 170);

                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;

                                                        }
                                                    }

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {

                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);

                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        }
                                                    }

                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);



                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                                        }
                                    }
                                }
                            }
                            //for toatal amount section OF NO TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }



                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(305, yPoint, 173, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            string DiscAmountGrp = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                            tf.DrawString(DiscAmountGrp, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            else
                            { //display code
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(483, yPoint, 89, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }

                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);






                        }

                        yPoint = yPoint + 30;
                        yLine = yLine + 30;
                    }
                }
                else
                {
                }

                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }

                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                //XRect rect = new XRect(40, 775, 510, 60);
                //graph.DrawImage(xImgFootBootomNotax, rect);
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";


                //  PageSize[] pageSizes = (PageSize[])Enum.GetValues(typeof(PageSize));

                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);


                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
                //  Process.Start(Server.MapPath(strImagePath) + pdfFilename);


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfCorporateAdvancedGeneration2()
    {
        try
        {
            if (Request.QueryString["LeadId"] != null && Request.QueryString["QTN_TMPLT"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(Request.QueryString["QTN_TMPLT"].ToString());
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);

                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);


                int Printneed = 0;
                string strProductSts = "";
                string strItemDescription = "";
                double dItmDesc = 0;

                string StrComments = "";


                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 13, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }

                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {

                    if ((strCustmrCountry != ""))
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }


                }

                if (strCustmrCountry != "")
                {

                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";

                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {
                    if (yPoint >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;

                }
                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);
                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;

                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "Please view the Bill Of Quantities with Price in Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;
                if (Request.QueryString["QTN_TMPLT"] != null)
                {


                    int intQuotationTemplateType = Convert.ToInt32(Request.QueryString["QTN_TMPLT"].ToString());
                    if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {
                        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                        clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                        objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                        objEntityLeadCre.QtnFile_Type = 3;
                        DataTable dtQtnAttchmnt = new DataTable();
                        dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);
                        if (dtQtnAttchmnt.Rows.Count > 0)
                        {
                            string strDocAttch = "* Supporting Documents Attached.";

                            double dDocAttch = MeasureHeight(graph, strDocAttch, fontDocAttchd, 380);
                            if (yPoint + Convert.ToInt32(dDocAttch) >= 758)
                            {   //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 150;
                                yLine = yLine + 145;

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 0, 30);
                                    xImgCmpnyName.Dispose();
                                }
                            }


                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strDocAttch, fontDocAttchd, XBrushes.Black, new XRect(40, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                        }

                    }
                }
                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();

                }
                //STOP
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 18, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }

                int COUNT = 0;
                foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                {
                    COUNT++;
                    //for calculate total for group
                    strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);

                    if (COUNT > 1)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }

                        //NEW PAGE
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                        {
                            XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                            graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                            xImgCmpnyNameBOQHeader.Dispose();
                        }


                    }

                    string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();


                    tf.Alignment = XParagraphAlignment.Center;
                    tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 251, yPoint - 17.5, 344, yPoint - 17.5);
                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        //column line0
                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);

                        //column line1
                        graph.DrawLine(XPens.Black, 190, 145, 190, yLine + 22);

                        //column line2
                        graph.DrawLine(XPens.Black, 260, 145, 260, yLine + 22);

                        //column line3
                        graph.DrawLine(XPens.Black, 310, 145, 310, yLine + 22);

                        //column line4
                        graph.DrawLine(XPens.Black, 380, 145, 380, yLine + 22);

                        //column line5
                        graph.DrawLine(XPens.Black, 435, 145, 435, yLine + 22);

                        //column line6
                        graph.DrawLine(XPens.Black, 495, 145, 495, yLine + 22);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            decimal decAmount = 0;
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint + 1.5, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));

                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }



                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);




                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //intCounter++;



                                                    //row line
                                                    //   graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    CatLineStart = yLine;
                                                }


                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        //strItemDescription = "( " + strItemDescription + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);

                                    }


                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                    graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {

                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);




                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //intCounter++;



                                                    //row line
                                                    //   graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                }


                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        //strItemDescription = "( " + strItemDescription + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);

                                    }
                                }
                            }
                        }


                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();

                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                        if (yPoint >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);


                    }
                    else
                    {
                        //NO TAX

                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //column line0
                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            decimal decAmount = 0;
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);
                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    {//column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }





                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                    int CatLineStart = yLine;

                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                    //row line

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    CatLineStart = yLine;
                                                }

                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;


                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);


                                    }

                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                    graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                            {

                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                }

                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;


                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                    }
                                }
                            }
                        }
                        //for toatal amount section OF NO TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }


                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);


                    }

                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }
                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }
                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                //XRect rect = new XRect(40, 775, 510, 60);
                //graph.DrawImage(xImgFootBootomNotax, rect);
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";


                //  PageSize[] pageSizes = (PageSize[])Enum.GetValues(typeof(PageSize));

                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);


                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
                //  Process.Start(Server.MapPath(strImagePath) + pdfFilename);


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfTermsToLastCorporateAdvancedGeneration2()
    {
        try
        {
            if (Request.QueryString["LeadId"] != null && Request.QueryString["QTN_TMPLT"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(Request.QueryString["QTN_TMPLT"].ToString());
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);

                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);


                string strItemName = "";
                string StrComments = "";
                int Printneed = 0;
                string strProductSts = "";

                string strItemDescription = "";
                double dItmDesc = 0;
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxPerc = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }

                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {

                    if ((strCustmrCountry != ""))
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }


                }

                if (strCustmrCountry != "")
                {

                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";

                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                int COUNT = 0;
                foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                {
                    COUNT++;
                    //for calculate total for group
                    strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    if (COUNT > 1)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;
                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }

                    }

                    string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                    tf.Alignment = XParagraphAlignment.Center;
                    tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 13;
                    graph.DrawLine(XPens.Black, 251, yPoint, 344, yPoint);
                    yLine = yLine + 22;
                    int yLineStart = yPoint + 3;
                    yPoint = yPoint + 9;
                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                        //column line8
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22);
                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }


                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {

                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);

                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;




                                                    }


                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 755)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                                    yLineStart = 145;

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    //graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    graph.DrawLine(XPens.Black, 20, 145, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, 145, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, 145, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, 145, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, 145, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, 145, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, 145, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, 145, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, 145, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    CatLineStart = yLine;
                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                // pdfPage.Width.Point
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);



                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {



                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;




                                                    }


                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                                    yLineStart = 145;

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    //graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                // pdfPage.Width.Point
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);



                                            }
                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);



                                    }
                                }
                            }
                        }

                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();

                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 517, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 550, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                    }
                    else
                    {
                        //NO TAX

                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);
                                    if (CatHeight < 22)
                                    {//column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22);
                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    {//column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }




                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);

                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }

                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);

                                                    yLineStart = 145;

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    CatLineStart = yLine;
                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }

                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);

                                                    yLineStart = 145;

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }


                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    }
                                }
                            }
                        }
                        //for toatal amount section OF NO TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }


                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                    }
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;




                }
                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }
                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);
                //FOOTER
                string strImageFooterLocBottomBOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottomBOQ)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottomBOQ));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();

                }


                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 18, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }

                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {
                    if (yPoint >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);

                        xImgCurrencySymbl.Dispose();
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;
                }


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);
                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;

                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);


                if (Request.QueryString["QTN_TMPLT"] != null)
                {


                    int intQuotationTemplateType = Convert.ToInt32(Request.QueryString["QTN_TMPLT"].ToString());
                    if (intQuotationTemplateType == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
                    {
                        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                        clsEntityLeadCreation objEntityLeadCre = new clsEntityLeadCreation();
                        objEntityLeadCre.Quotation_Id = Convert.ToInt32(hiddenQuotationID.Value);
                        objEntityLeadCre.QtnFile_Type = 3;
                        DataTable dtQtnAttchmnt = new DataTable();
                        dtQtnAttchmnt = objBusinessLeadIndvl.ReadQuotationAttchmnt(objEntityLeadCre);
                        if (dtQtnAttchmnt.Rows.Count > 0)
                        {
                            yPoint = yPoint + 30;
                            yLine = yLine + 30;
                            string strDocAttch = "* Supporting Documents Attached.";

                            double dDocAttch = MeasureHeight(graph, strDocAttch, fontDocAttchd, 380);
                            if (yPoint + Convert.ToInt32(dDocAttch) >= 758)
                            {   //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 150;
                                yLine = yLine + 145;

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 0, 30);
                                    xImgCmpnyName.Dispose();
                                }
                            }


                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strDocAttch, fontDocAttchd, XBrushes.Black, new XRect(40, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                        }

                    }
                }


                //NOTE
                yPoint = yPoint + 50;
                yLine = yLine + 50;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 65;
                yLine = yLine + 65;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomEOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomEOQ)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomEOQ));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                //XRect rect = new XRect(40, 775, 510, 60);
                //graph.DrawImage(xImgFootBootomNotax, rect);
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";


                //  PageSize[] pageSizes = (PageSize[])Enum.GetValues(typeof(PageSize));

                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);


                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();

            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    //case 2 QTN template type 1 functions
    private void PdfGeneration()
    {
        try
        {
            if (hiddenLeadId.Value != "")
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);


                string strRandomMixedId = hiddenLeadId.Value.ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = hiddenLeadId.Value.ToString();
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                //00088 


                string StrComments = "";



                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 10, XFontStyle.Regular);


                //00088
                XFont fontEntryAmntInWords = null;
                fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);


                //  tf.Alignment = XParagraphAlignment.Center;
                //  tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, 170, 555, pdfPage.Height.Point), XStringFormats.TopLeft);

                graph.DrawString("CUSTOMER QUOTATION", font, XBrushes.Black, new XRect(0, 170, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopCenter);

                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "corporate-logo.jpg";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 450, 60);
                    xImg.Dispose();
                }
                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();


                    //00088
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();


                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }


                int intCorpYindex = 70;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;

                if (strCorpZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCorpZipCode, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCorpYindex = intCorpYindex + 15;
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpCountry, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;







                int intCstmrYindex = 225;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 360, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REFERENCE NUMBER", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 16;


                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontTermsDtl, 280);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr2);
                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr3);
                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }

                    intCstmrYindex = intCstmrYindex + 15;
                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCstmrYindex = intCstmrYindex + 15;
                }



                //start
                yPoint = yPoint + 370;
                yLine = yLine + 365;
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                {
                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                    graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                    xImgCurrencySymbl.Dispose();
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNetAmountWithComma + " (As Per List Attached)", fontTermsDtl, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 21;
                yLine = yLine + 21;


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);



                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }
                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                string strActUserDtl = "";
                string strActMobDtl = " (Mob. " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    strActUserDtl = strActUserName + strActMobDtl;
                }
                else
                {
                    strActUserDtl = strActUserName;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(162, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 378, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 21 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 21 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 50;
                yLine = yLine + 50;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString(dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString(), fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 10;
                yLine = yLine + 10;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["DSGN_NAME"].ToString() + " ( " + dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString() + " Division )";
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "You can view the Bill of Materials in the Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Note : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint + 1, 380, pdfPage.Height.Point), XStringFormats.TopLeft);



                //stop
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;


                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("BILL OF MATERIALS", fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 253, yPoint - 18.5, 341.5, yPoint - 18.5);
                if (hiddenTaxEnabled.Value == "1")
                {
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                //column line7
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                //intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                            {
                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                            }
                            else
                            {

                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                            }
                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                            if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                            {
                                strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                            }
                            else
                            {
                                strTaxName = "";
                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                //////
                                strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                            }
                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point
                            yPoint = yPoint + 22;

                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }

                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }


                    //for toatal amount section OF TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    //00088

                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);


                }
                else
                {
                    //NO TAX

                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                    //     tf.Alignment = XParagraphAlignment.Right;
                    //    tf.DrawString("Tax", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);



                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                //intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                            {
                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                            }
                            else
                            {

                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                            }

                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                            //      tf.Alignment = XParagraphAlignment.Right;
                            //     tf.DrawString(strTaxAmount, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point
                            yPoint = yPoint + 22;


                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }

                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }
                    //for toatal amount section OF NO TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    //00088

                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }



                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";




                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                //     Process[] _proceses = null;
                //     _proceses = Process.GetProcesses();

                //foreach (Process proces in _proceses)
                //{
                //    if (proces.MainWindowTitle == pdfFilename + " - Adobe Reader")
                //    {
                //        proces.Kill();
                //        
                //    }
                //}

                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
                //  Process.Start(Server.MapPath(strImagePath) + pdfFilename);


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfAdvancedGeneration()
    {// in PdfAdvancedGeneration only choice for Currency code & currency symbol is done
        try
        {
            if (Request.QueryString["LeadId"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                DataTable dtProjectDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);
                dtProjectDtl = objBusinessLayerQuotation.ReadProjectDtlForPDF(objEntityQuotation);

                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);

                string strProductSts = "";
                double dItmDesc = 0;
                string strItemDescription = "";
                int Printneed = 0;
                string StrComments = "";

                string strPartNumber = "";
                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strCustmrPhone = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strProject = "";
                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);

                XFont fontEntry = null;
                XFont fontEntryNetAmnt = null;
                XFont fontEntryAmntInWords = null;
                XFont fontEntryHeading = null;

                if (hiddenTaxEnabled.Value == "1")
                {
                    fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                }
                else
                {
                    fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 10, XFontStyle.Bold);

                }

                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDearSir = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 11, XFontStyle.Underline);
                XFont fontWithRef = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontProjectHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 11, XFontStyle.Regular);

                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtProjectDtl.Rows.Count > 0)
                {
                    if (dtProjectDtl.Rows[0]["PROJECT_ID"].ToString() == "")
                    {
                        strProject = dtProjectDtl.Rows[0]["LEADS_PROJECT_NAME"].ToString();

                    }
                    else
                    {
                        strProject = dtProjectDtl.Rows[0]["PROJECT_NAME"].ToString();
                    }

                }
                if (dtQtn.Rows.Count > 0)
                {
                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                    strCustmrPhone = dtCustmrDtl.Rows[0]["LEADS_MOBILE"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 180;
                yLine = yLine + 175;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REF    : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontCustmrDtl, 480);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                yPoint = yPoint + Convert.ToInt32(dCustAddr1);
                yLine = yLine + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr2);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr2);

                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr3);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr3);

                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    yPoint = yPoint + 13;
                    yLine = yLine + 13;

                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                if (strCustmrPhone != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PHONE : " + strCustmrPhone + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                yPoint = yPoint + 8;
                yLine = yLine + 8;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Dear Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 17;
                yLine = yLine + 17;

                string strSubjContent = "QUOTATION";
                if (lblTitle.Text != "")
                {

                    strSubjContent = strSubjContent + " FOR " + lblTitle.Text.ToUpper();

                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("SUBJECT", fontSubject, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontSubject, XBrushes.Black, new XRect(85, yPoint, 10, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                XRect xrt = new XRect(100, yPoint, 470, pdfPage.Height.Point);

                tf.DrawString(strSubjContent, fontSubject, XBrushes.Black, xrt, XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("PROJECT", fontProjectHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontSubject, XBrushes.Black, new XRect(85, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strProject, fontProjectHeading, XBrushes.Black, new XRect(100, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontWithRef, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 32;
                yLine = yLine + 32;

                //START
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;



                if (strProject != "")
                {

                    double dProject = MeasureHeight(graph, strProject, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dProject) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }



                }

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                if (dtQtnDtlGroup.Rows.Count > 0)
                {
                    foreach (DataRow dT in dtQtnDtlGroup.Rows)
                    {
                        string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                        StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                        string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();
                        tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                        if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                        {
                            if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                            {
                                XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                                xImgCurrencySymbl.Dispose();
                            }
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(StrGrpNetAmount + " (As Per  " + strAttchdBy + "  List)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }
                        else
                        { //display code
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(hiddenCurrencyCode.Value + " " + StrGrpNetAmount + " (As Per  " + strAttchdBy + " List )", fontOffer, XBrushes.Black, new XRect(160, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }

                        yPoint = yPoint + 18;
                        yLine = yLine + 18;
                    }
                }
                else
                {
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                    {
                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                            xImgCurrencySymbl.Dispose();
                        }
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmountWithComma + " (As Per List Attached)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    { //display code
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(hiddenCurrencyCode.Value + " " + strNetAmountWithComma + " (As Per List Attached)", fontOffer, XBrushes.Black, new XRect(160, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                }

                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }
                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dPayment);
                    yLine = yLine + 4 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dValidity);
                    yLine = yLine + 4 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 4 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 4 + Convert.ToInt32(dWarranty);
                }


                bool blnShrinkFormat = false;
                if (yPoint <= 570)
                {
                    blnShrinkFormat = true;
                }

                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 40;
                    yLine = yLine + 40;
                }
                //----------------footer//////////////////
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "( EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + " )";
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(171, yPoint + Convert.ToInt32(dFooterMsg) - 12.5, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 9 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 9 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strDivName = dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString();

                yPoint = yPoint + 11;
                yLine = yLine + 11;

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint + .5, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 45;
                yLine = yLine + 45;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ( " + strDivName + " Division )";
                double dTeamDtl = MeasureHeight(graph, strTeamDtl, fontNote, 380);
                if (yPoint + Convert.ToInt32(dTeamDtl) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString();
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 9;
                yLine = yLine + 9;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("MANAGER, " + strDivName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 640, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE

                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }
                else
                {
                    yPoint = yPoint + 11;
                    yLine = yLine + 11;
                }
                string strNote = "Please view the Bill Of Quantities with price in next page. As per our standard terms of sales.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(73, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;

                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();
                }
                //STOP
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                    xImgCmpnyNameBOQHeader.Dispose();
                }

                int COUNT = 0;

                if (dtQtnDtlGroup.Rows.Count > 0)
                {
                    foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                    {
                        COUNT++;

                        //for calculate total for group
                        strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                        strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                        strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                        strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                        strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                        strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                        strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);



                        if (COUNT > 1)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }

                            //NEW PAGE
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                            {
                                XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                                graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                                xImgCmpnyNameBOQHeader.Dispose();
                            }


                        }

                        string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                        tf.Alignment = XParagraphAlignment.Center;
                        tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 25, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                        graph.DrawLine(XPens.Black, 251, yPoint - 12, 344, yPoint - 12);


                        if (hiddenTaxEnabled.Value == "1")
                        {
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(280, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);


                            //column line0
                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 22);

                            //column line1
                            graph.DrawLine(XPens.Black, 190, yLine, 190, yLine + 22);

                            //column line2
                            graph.DrawLine(XPens.Black, 260, yLine, 260, yLine + 22);

                            //column line3
                            graph.DrawLine(XPens.Black, 310, yLine, 310, yLine + 22);

                            //column line4
                            graph.DrawLine(XPens.Black, 380, yLine, 380, yLine + 22);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, yLine, 435, yLine + 22);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 22);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);



                            yPoint = yPoint + 22;

                            yLine = yLine + 22;

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {

                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);


                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);

                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;


                                        }
                                        else
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22 + Convert.ToInt32(CatHeight));

                                            yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                            yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                        }



                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;


                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;
                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);
                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);
                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);
                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);
                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);
                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);




                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();

                                                        }
                                                        //intCounter++;
                                                        //row line
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 22);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, yLine, 190, yLine + 22);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, yLine, 260, yLine + 22);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, yLine, 310, yLine + 22);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, yLine, 380, yLine + 22);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, yLine, 435, yLine + 22);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 22);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);

                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        CatLineStart = yLine;
                                                    }

                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;


                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                    if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                    {
                                                        strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    else
                                                    {
                                                        strTaxName = "";
                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        //////
                                                        strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    double dItmName = 0;

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;

                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmName), 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);




                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                        }


                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine + 18);
                                        graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine + 18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;
                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);
                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);
                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);
                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);
                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);
                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();

                                                        }
                                                        //intCounter++;
                                                        //row line
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;


                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                    if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                    {
                                                        strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    else
                                                    {
                                                        strTaxName = "";
                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        //////
                                                        strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    double dItmName = 0;

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;

                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmName), 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);




                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                                        }
                                    }
                                }
                            }

                            //for toatal amount section OF TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);



                            yPoint = yPoint + 22;
                            yLine = yLine + 22;

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                            if (yPoint >= 700)
                            { //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(350, yPoint, 127, pdfPage.Height.Point), XStringFormats.TopLeft);


                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }


                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;

                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);



                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            else
                            { //display code

                                tf.Alignment = XParagraphAlignment.Right;


                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);


                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }


                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {//FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);

                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                        }
                        else
                        {
                            //NO TAX

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                            //column line1
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                            //column line2
                            graph.DrawLine(XPens.Black, 125, 65, 125, yLine + 22);

                            //column line3
                            graph.DrawLine(XPens.Black, 305, 65, 305, yLine + 22);

                            //column line4
                            graph.DrawLine(XPens.Black, 385, 65, 385, yLine + 22);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                            //column line6
                            graph.DrawLine(XPens.Black, 505, 65, 505, yLine + 22);

                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);

                            yPoint = yPoint + 22;

                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {
                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);


                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);
                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;
                                        }
                                        else
                                        { //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22 + Convert.ToInt32(CatHeight));

                                            yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                            yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                        }



                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;

                                        if (dtQtnDtl.Rows.Count > 0)
                                        {
                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;


                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 125, CatLineStart, 125, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 305, CatLineStart, 305, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 385, CatLineStart, 385, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 505, CatLineStart, 505, yLine);

                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }
                                                        // intCounter++;

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 125, 65, 125, yLine + 22);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 305, 65, 305, yLine + 22);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 385, 65, 385, yLine + 22);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 505, 65, 505, yLine + 22);

                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);

                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        CatLineStart = yLine;
                                                    }

                                                    strPartNumber = dtQtnDtl.Rows[intcnt]["PRDT_CODE"].ToString();
                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }


                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    double dItmName = MeasureHeight(graph, strItemName, fontEntry, 147);

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (strPartNumber.Length > 12)
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(0, 12), fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(12), fontEntry, XBrushes.Black, new XRect(45, yPoint + 10, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    else
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber, fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    // pdfPage.Width.Point
                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);



                                                }
                                            }
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line1
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 125, CatLineStart, 125, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 305, CatLineStart, 305, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 385, CatLineStart, 385, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 505, CatLineStart, 505, yLine);

                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);

                                        }

                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        //column line6
                                        graph.DrawLine(XPens.Black, 505, CatLineStart, 505, yLine + 18);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine + 18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {
                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;


                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }
                                                        // intCounter++;

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    strPartNumber = dtQtnDtl.Rows[intcnt]["PRDT_CODE"].ToString();
                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }


                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    double dItmName = MeasureHeight(graph, strItemName, fontEntry, 147);

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (strPartNumber.Length > 12)
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(0, 12), fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(12), fontEntry, XBrushes.Black, new XRect(45, yPoint + 10, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    else
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber, fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line1
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);



                                        }
                                    }
                                }
                            }
                            //for toatal amount section OF NO TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(365, yPoint, 130, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(320, yPoint, 175, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            else
                            { //display code
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(508, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }

                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                        }

                        yPoint = yPoint + 30;
                        yLine = yLine + 30;

                    }
                }
                else
                {
                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(280, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        if (dtQtnDtl.Rows.Count > 0)
                        {
                            for (int intcnt = 0, intSl = 1; intcnt < dtQtnDtl.Rows.Count; intcnt++, intSl++)
                            {


                                if (yPoint >= 700)
                                {
                                    //FOOTER
                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                    {
                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                        graph.DrawImage(xImgFoot, 40, 775);
                                        xImgFoot.Dispose();
                                    }
                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                    //column line1
                                    graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                    //column line2
                                    graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                    //column line3
                                    graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                    //column line4
                                    graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                    //column line5
                                    graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                    //column line6
                                    graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, 65, 575, yLine);




                                    pdfPage = pdf.AddPage();
                                    /////
                                    pdfPage.Orientation = PageOrientation.Portrait;

                                    pdfPage.Width = size.Width;
                                    pdfPage.Height = size.Height;
                                    pdfPage.TrimMargins.Top = 5;
                                    pdfPage.TrimMargins.Right = 5;
                                    pdfPage.TrimMargins.Bottom = 5;
                                    pdfPage.TrimMargins.Left = 5;

                                    ////
                                    graph.Dispose();
                                    graph = XGraphics.FromPdfPage(pdfPage);
                                    tf = new XTextFormatter(graph);
                                    yPoint = 0;
                                    yLine = 0;
                                    yPoint = yPoint + 70;
                                    yLine = yLine + 65;

                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    //COMPANY NAME
                                    intPageCount = intPageCount + 1;
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                    {
                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                        graph.DrawImage(xImgCmpnyName, 40, 25);
                                        xImgCmpnyName.Dispose();

                                    }
                                    //intCounter++;
                                    //row line
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    yPoint = yPoint + 22;

                                    yLine = yLine + 22;
                                    //row line
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                {
                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                }
                                else
                                {

                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDCT NAME"].ToString();
                                }

                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                dItmDesc = 0;


                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                {
                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                }
                                else
                                {
                                    strTaxName = "";
                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                    //////
                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                }
                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                if (strItemDescription != "")
                                {
                                    int intItemDescLength = strItemDescription.Length;

                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                MaxDescTax:
                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                    {

                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                        intItemDescLength = strItemDescription.Length;
                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                        goto MaxDescTax;


                                    }

                                }
                                double dItmName = 0;

                                tf.Alignment = XParagraphAlignment.Center;
                                tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Left;

                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmName), 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                double dItmsts = 0;
                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                if (strProductSts != "" && strProductSts != "")
                                {
                                    strProductSts = "( " + strProductSts + " )";
                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                }
                                if (Printneed == 1)
                                {
                                    if (strItemDescription != "")
                                    {
                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    }

                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                if (Printneed == 1)
                                {

                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                }
                                else
                                {
                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                }

                                //row line
                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            }
                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                            //column line1
                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                            //column line2
                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                            //column line3
                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                        }

                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;

                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);



                        yPoint = yPoint + 22;
                        yLine = yLine + 22;

                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                        if (yPoint >= 700)
                        { //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;

                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(350, yPoint, 127, pdfPage.Height.Point), XStringFormats.TopLeft);


                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line4
                        //    graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }


                        if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                        {
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);



                            if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                            {
                                XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                                xImgCurrencySymbl.Dispose();
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }
                        else
                        { //display code

                            tf.Alignment = XParagraphAlignment.Right;


                            tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);


                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }


                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                    }
                    else
                    {
                        //NO TAX
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        if (dtQtnDtl.Rows.Count > 0)
                        {
                            for (int intcnt = 0, intSl = 1; intcnt < dtQtnDtl.Rows.Count; intcnt++, intSl++)
                            {


                                if (yPoint >= 700)
                                {
                                    //FOOTER
                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                    {
                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                        graph.DrawImage(xImgFoot, 40, 775);
                                        xImgFoot.Dispose();
                                    }
                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                    //column line1
                                    graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                    //column line2
                                    graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                                    //column line3
                                    graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                                    //column line4
                                    graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                                    //column line5
                                    graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                    //column line6
                                    graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                                    pdfPage = pdf.AddPage();
                                    /////
                                    pdfPage.Orientation = PageOrientation.Portrait;

                                    pdfPage.Width = size.Width;
                                    pdfPage.Height = size.Height;
                                    pdfPage.TrimMargins.Top = 5;
                                    pdfPage.TrimMargins.Right = 5;
                                    pdfPage.TrimMargins.Bottom = 5;
                                    pdfPage.TrimMargins.Left = 5;

                                    ////
                                    graph.Dispose();
                                    graph = XGraphics.FromPdfPage(pdfPage);
                                    tf = new XTextFormatter(graph);
                                    yPoint = 0;
                                    yLine = 0;
                                    yPoint = yPoint + 70;
                                    yLine = yLine + 65;

                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    //COMPANY NAME
                                    intPageCount = intPageCount + 1;
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                    {
                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                        graph.DrawImage(xImgCmpnyName, 40, 25);
                                        xImgCmpnyName.Dispose();
                                    }

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    yPoint = yPoint + 22;

                                    yLine = yLine + 22;
                                    //row line
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }

                                strPartNumber = dtQtnDtl.Rows[intcnt]["PRDT_CODE"].ToString();
                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                {
                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                }
                                else
                                {

                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDCT NAME"].ToString();
                                }


                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                dItmDesc = 0;

                                double dItmName = MeasureHeight(graph, strItemName, fontEntry, 147);

                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                if (strItemDescription != "")
                                {
                                    int intItemDescLength = strItemDescription.Length;

                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                MaxDescTax:
                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                    {
                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                        intItemDescLength = strItemDescription.Length;
                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                        goto MaxDescTax;

                                    }

                                }

                                tf.Alignment = XParagraphAlignment.Center;
                                tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (strPartNumber.Length > 12)
                                {
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strPartNumber.Substring(0, 12), fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strPartNumber.Substring(12), fontEntry, XBrushes.Black, new XRect(45, yPoint + 10, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                }
                                else
                                {
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strPartNumber, fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                }
                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);

                                double dItmsts = 0;
                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                if (strProductSts != "" && strProductSts != "")
                                {
                                    strProductSts = "( " + strProductSts + " )";
                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                }
                                if (Printneed == 1)
                                {
                                    if (strItemDescription != "")
                                    {
                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    }

                                }
                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (Printneed == 1)
                                {

                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                }
                                else
                                {
                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                }

                                //row line
                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            }
                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                            //column line1
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                            //column line2
                            graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                            //column line3
                            graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                        }

                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(365, yPoint, 130, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(320, yPoint, 175, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                        {
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                            {
                                XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                                xImgCurrencySymbl.Dispose();
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }
                        else
                        { //display code
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(508, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }

                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                    }
                }

                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }
                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }

                }

                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    // graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";

                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);

                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();


            }
        }
        catch (Exception ex)
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfCorporateAdvancedGeneration()
    {
        try
        {
            if (Request.QueryString["LeadId"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);

                int Printneed = 0;
                string strProductSts = "";
                string strItemDescription = "";
                double dItmDesc = 0;

                string StrComments = "";


                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);

                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {
                    if ((strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }
                }

                if (strCustmrCountry != "")
                {
                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";
                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {

                    if (yPoint >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);

                        xImgCurrencySymbl.Dispose();
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;
                }

                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }





                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "Please view the Bill Of Quantities with Price in Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;

                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();
                }
                //STOP



                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }


                int COUNT = 0;
                foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                {
                    COUNT++;
                    //for calculate total for group
                    strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);

                    if (COUNT > 1)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }

                        //NEW PAGE
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                        {
                            XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                            graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                            xImgCmpnyNameBOQHeader.Dispose();
                        }


                    }

                    string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                    tf.Alignment = XParagraphAlignment.Center;
                    tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 251, yPoint - 17.5, 344, yPoint - 17.5);
                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                        //column line0
                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);

                        //column line1
                        graph.DrawLine(XPens.Black, 190, 145, 190, yLine + 22);

                        //column line2
                        graph.DrawLine(XPens.Black, 260, 145, 260, yLine + 22);

                        //column line3
                        graph.DrawLine(XPens.Black, 310, 145, 310, yLine + 22);

                        //column line4
                        graph.DrawLine(XPens.Black, 380, 145, 380, yLine + 22);

                        //column line5
                        graph.DrawLine(XPens.Black, 435, 145, 435, yLine + 22);

                        //column line6
                        graph.DrawLine(XPens.Black, 495, 145, 495, yLine + 22);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            decimal decAmount = 0;
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint + 1.5, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));

                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }



                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);




                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    //row line
                                                    //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    CatLineStart = yLine;
                                                }


                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }

                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        //strItemDescription = "( " + strItemDescription + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                            }
                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);




                                    }

                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                    graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                            {

                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                }


                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }

                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                            }
                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);

                                    }
                                }

                            }
                        }

                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                        if (yPoint >= 758)
                        { //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);

                    }
                    else
                    {
                        //NO TAX
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //column line0
                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            decimal decAmount = 0;
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint + 1.5, 300, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }




                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                    int CatLineStart = yLine;

                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    // intCounter++;
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                    //row line

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    CatLineStart = yLine;
                                                }

                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }

                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                // yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);

                                                // yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                    graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                    graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                            {

                                                if (yPoint >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }
                                                    // intCounter++;
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                }

                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }

                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                dItmDesc = 0;

                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;


                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                    }
                                }
                            }
                        }
                        //for toatal amount section OF NO TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);


                    }

                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }


                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    // graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";




                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);

                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfTermsToLastCorporateAdvancedGeneration()
    {
        try
        {
            if (Request.QueryString["LeadId"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationID.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);


                string strItemName = "";
                string strProductSts = "";
                string StrComments = "";
                int Printneed = 0;

                string strItemDescription = "";
                double dItmDesc = 0;
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxPerc = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);

                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();
                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {

                    if ((strCustmrCountry != ""))
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }


                }

                if (strCustmrCountry != "")
                {

                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";

                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);



                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);

                yPoint = yPoint + 12;
                yLine = yLine + 12;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                int COUNT = 0;
                foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                {
                    COUNT++;
                    //for calculate total for group
                    strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    if (COUNT > 1)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;
                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }

                    }

                    string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                    tf.Alignment = XParagraphAlignment.Center;
                    tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 13;
                    graph.DrawLine(XPens.Black, 251, yPoint, 344, yPoint);
                    yLine = yLine + 22;
                    int yLineStart = yPoint + 3;
                    yPoint = yPoint + 9;

                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;

                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                        //column line8
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22);
                                        yPoint = yPoint + 22;
                                        yLine = yLine + 22;
                                    }
                                    else
                                    {//column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);
                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }


                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxPerc = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    yLineStart = 145;

                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    //row line
                                                    //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    graph.DrawLine(XPens.Black, 20, 145, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, 145, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, 145, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, 145, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, 145, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, 145, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, 145, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, 145, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, 145, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                                    CatLineStart = yLine;
                                                }


                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {

                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxPerc = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;
                                                    yLineStart = 145;
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    //row line
                                                    //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    graph.DrawLine(XPens.Black, 20, 145, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, 145, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, 145, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, 145, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, 145, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, 145, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, 145, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, 145, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, 145, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                }


                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    }
                                }
                            }
                        }


                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 758)
                        { //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 517, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;


                        ///////////////////
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 550, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                    }
                    else
                    {
                        //NO TAX

                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;

                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontEntry, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22);
                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                    }

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());

                                                dItmDesc = 0;

                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                                    yLineStart = 145;


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    CatLineStart = yLine;
                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }

                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());

                                                dItmDesc = 0;

                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                                    yLineStart = 145;


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }

                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    }
                                }
                            }
                        }
                        //for toatal amount section OF NO TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                    }
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }

                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }
                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);
                //FOOTER
                string strImageFooterLocBottomBOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottomBOQ)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottomBOQ));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();

                }
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 18, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }



                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {
                    if (yPoint >= 755)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);

                        xImgCurrencySymbl.Dispose();
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;
                }


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }





                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 65;
                yLine = yLine + 65;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    // graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomEOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomEOQ)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomEOQ));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";


                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();

            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    //Method for binding Existing EMPLOYEE details to dropdown list.
    public void ExistingEmployeeLoad()
    {
        //clsEntityProject objEntityProject = new clsEntityProject();
        clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
        if (Session["CORPOFFICEID"] != null)
        {
            objEntityLeadCreation.Corp_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
        }
        else if (Session["CORPOFFICEID"] == null)
        {
            Response.Redirect("~/Default.aspx");
        }

        if (Session["ORGID"] != null)
        {
            objEntityLeadCreation.Org_Id = Convert.ToInt32(Session["ORGID"].ToString());
        }
        else if (Session["ORGID"] == null)
        {
            Response.Redirect("~/Default.aspx");
        }
        clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
        DataTable dtExistingCustomer = objBusinessLayerIndividual.ReadExistingEmployee(objEntityLeadCreation);
        if (dtExistingCustomer.Rows.Count > 0)
        {

            ddlProjectManager.DataSource = dtExistingCustomer;
            ddlProjectManager.DataTextField = "USR_NAME";
            ddlProjectManager.DataValueField = "USR_ID";
            ddlProjectManager.DataBind();
            ddlProjectManager.Items.Insert(0, "--SELECT EMPLOYEE--");
        }

    }
    //evm0012
    protected void btnSendRegretMail_Click(object sender, EventArgs e)
    {

        if (Request.QueryString["Id"] != null)
        {
            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
            if (hiddenLeadId.Value != "")
            {
                objEntityLead.LeadId = Convert.ToInt32(hiddenLeadId.Value);
            }
            if (Session["USERID"] != null)
            {
                objEntityLead.User_Id = Convert.ToInt32(Session["USERID"]);
            }
            else if (Session["USERID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }

            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLead);
            if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
            {
                Response.Redirect("~/Default.aspx");
            }

            DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
            DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);

            if (dtFromMail.Rows.Count == 0)
            {
                Response.Redirect("~/Default.aspx");
            }
            if (dtToMail.Rows.Count == 0)
            {
                Response.Redirect("~/Default.aspx");
            }
            else
            {
                if (dtToMail.Rows[0]["LEADS_EMAIL"] == DBNull.Value)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }


            clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
            objEntityMail.Email_Subject = txtRegretMailSubject.Text;
            objEntityMail.Email_Content = txtRegretMailContent.Text;
            //objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
            //objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

            objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();

            objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
            objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
            objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
            objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
            objEntityMail.User_Id = objEntityLead.User_Id;

            string strRandomLeadMixedId = Request.QueryString["Id"].ToString();
            string strLenghtofId = strRandomLeadMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomLeadMixedId.Substring(2, intLenghtofId);
            objEntityMail.Lead_Id = Convert.ToInt32(strId);
            objEntityMail.D_Date = System.DateTime.Now;

            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityMail.Corporate_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityMail.Corporate_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
            //generate next value

            clsEntityCommon objEntityCommon = new clsEntityCommon();
            objEntityCommon.SectionId = Convert.ToInt32(clsCommonLibrary.Section.LEAD_MAIL);
            objEntityCommon.CorporateID = objEntityMail.Corporate_Id;
            string strNextNum = objBusinessLayer.ReadNextNumberWebForUI(objEntityCommon);
            objEntityMail.LeadMailId = Convert.ToInt64(strNextNum);

            int intSlNumbr = 0;
            for (int intCount = 0; intCount < Request.Files.Count; intCount++)
            {
                HttpPostedFile PostedFile = Request.Files[intCount];

                if (PostedFile.ContentLength > 0)
                {
                    clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();
                    string strFileName = System.IO.Path.GetFileName(PostedFile.FileName);
                    // string strFilePath = System.IO.Path.PathSeparator
                    // GetFileName(PostedFile.FileName);                        
                    objEntityAttach.Email_Real_Name = strFileName;
                    string strFileExt;

                    strFileExt = strFileName.Substring(strFileName.LastIndexOf('.') + 1).ToLower();


                    int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.LEAD);
                    int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.Lead_Mail_Attachment);
                    string strImageName = "";
                    strImageName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + objEntityLead.LeadId.ToString() + "_" + objEntityMail.LeadMailId.ToString() + "_" + intSlNumbr + "." + strFileExt;
                    clsCommonLibrary objComm = new clsCommonLibrary();
                    string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.Lead_Mail_Attachment);

                    PostedFile.SaveAs(Server.MapPath(strImagePath) + strImageName);



                    objEntityAttach.Email_File_Name = strImageName;
                    objEntityAttach.Attch_Path = Server.MapPath(strImagePath + strImageName);
                    objEntityMailAttachList.Add(objEntityAttach);
                    intSlNumbr++;
                }

            }


            List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();
            string strToFullId = txtRegretMailTo.Text.Trim();
            if (strToFullId != "" && strToFullId != null)
            {
                string[] strToSplitId = strToFullId.Split(',');
                int intSplitCountTo = strToSplitId.Length;
                objEntityMail.To_Email_Address = strToSplitId[0].ToString();

                for (int intCount = 1; intCount < intSplitCountTo; intCount++)
                {

                    classEntityToMailAddress objEntityToMailAddress = new classEntityToMailAddress();
                    objEntityToMailAddress.ToAddress = strToSplitId[intCount].ToString().Trim();
                    objEntityToMailAddressList.Add(objEntityToMailAddress);

                }
            }


            List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();

            string strCcFullId = txtRegretMailCc.Text.Trim();
            if (strCcFullId != "" && strCcFullId != null)
            {
                string[] strCCSplitId = strCcFullId.Split(',');
                int intSplitCountCc = strCCSplitId.Length;

                for (int intCount = 0; intCount < intSplitCountCc; intCount++)
                {
                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                    objEntityMailCcBCc.CcMail = strCCSplitId[intCount].ToString().Trim();

                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                }
            }
            string strBCcFullId = txtRegretMailBcc.Text;
            if (strBCcFullId != "" && strBCcFullId != null)
            {
                string[] strBCCSplitId = strBCcFullId.Split(',');
                int intSplitCountBCc = strBCCSplitId.Length;

                for (int intCount = 0; intCount < intSplitCountBCc; intCount++)
                {
                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                    objEntityMailCcBCc.BCcMail = strBCCSplitId[intCount].ToString().Trim();
                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                }
            }


            intSlNumbr = 0;
            int intmail = 1;


            try
            {
                MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
            }
            catch
            {
                intmail = 2;
                //passing 2 for lost mail send
                // objBusinessLayerIndividual.InsertLeadMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList, 2);
            }



            if (intmail == 1)
            {
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailS&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailS");
                }

            }
            else
            {
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailU&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&InsUpd=InsMailU");
                }


            }

        }
    }

    protected void btnReSendMailQtn_BackUp_Click(object sender, EventArgs e)
     {

        DataTable dtQuotationMailBckup = new DataTable();
        DataTable dtQuotationMailAttchmntBckup = new DataTable();

        if (hiddenResendQtnMailID.Value != "" && hiddenResendQtnMailType.Value != "" && hiddenQtnBackupID.Value != "")
        {
            clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
            clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();

            objEntityQuotation.BckupId = Convert.ToInt32(hiddenQtnBackupID.Value);
            dtQuotationMailBckup = objBusinessLayerQuotation.ReadQuotationMailBckup(objEntityQuotation);
            dtQuotationMailAttchmntBckup = objBusinessLayerQuotation.ReadQuotationMailAttachmntBckup(objEntityQuotation);
        }
        if (dtQuotationMailBckup.Rows.Count > 0)
        {
            LoadDataForSendingMail();
            LeadDetails(hiddenLeadId.Value);

            if (hiddenQtnTmpltId.Value == "1")
            {
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

                if (hiddenLeadId.Value != "" && (hiddenQuotationID.Value != "") && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
                {
                    objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);


                    objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));

                    int intUserId = 0;
                    if (hiddenCorporateId.Value == "")
                    {
                        if (Session["CORPOFFICEID"] != null)
                        {
                            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                        }
                        else if (Session["CORPOFFICEID"] == null)
                        {
                            Response.Redirect("~/Default.aspx");
                        }
                    }
                    else
                    {

                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                    }
                    if (hiddenOrganisationId.Value == "")
                    {
                        if (Session["ORGID"] != null)
                        {
                            objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                        }
                        else if (Session["ORGID"] == null)
                        {
                            Response.Redirect("/Default.aspx");
                        }
                    }
                    else
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                    }
                    if (Session["USERID"] != null)
                    {
                        intUserId = Convert.ToInt32(Session["USERID"]);

                    }
                    else if (Session["USERID"] == null)
                    {
                        Response.Redirect("/Default.aspx");
                    }
                    objEntityQuotation.User_Id = intUserId;
                    objEntityQuotation.D_Date = System.DateTime.Now;
                    string strId = hiddenLeadId.Value;
                    objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                    clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                    objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                    clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                    DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                    int intLeadStatus = 0;
                    if (dtLeadStatus.Rows.Count > 0)
                    {
                        intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
                    }
                    clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                    clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();


                    objEntityLead.LeadId = objEntityQuotation.Lead_Id;

                    objEntityLead.User_Id = intUserId;
                    objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                    DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                    DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);
                    DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                    if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
                    {

                        clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                        objEntityMail.Email_Subject = "Enquiry - ";
                        objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                        clsEntityCommon objEntityCommon = new clsEntityCommon();
                        objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                        objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                        objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                        DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);


                        if (hiddenResendQtnMailType.Value == "TO")
                        {
                            //objEntityMail.To_Email_Address = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();
                            objEntityMail.To_Email_Address = hiddenResendQtnMailID.Value;
                        }
                        objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                        objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                        objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                        objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                        objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                        objEntityMail.User_Id = objEntityLead.User_Id;
                        objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                        objEntityMail.Email_Content = dtQuotationMailBckup.Rows[0]["QUOT_ML_BKP_CONTENT"].ToString() + objEntityMail.Signature;

                        objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                        objEntityMail.D_Date = System.DateTime.Now;

                        List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();


                        if (dtQuotationMailAttchmntBckup.Rows.Count > 0)
                        {
                            foreach (DataRow Dr in dtQuotationMailAttchmntBckup.Rows)
                            {
                                clsCommonLibrary objComm = new clsCommonLibrary();
                                string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_MAIL_ATTCH_BKP);
                                string strRealFileName = Dr["LDMAILATT_FLNM_ACT"].ToString();
                                string strFileName = Dr["LDMAILATT_FILENAME"].ToString();

                                string strFileLocation = strFilePath + strFileName;
                                if (File.Exists(Server.MapPath(strFileLocation)))
                                {
                                    clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                                    objEntityAttach.Email_Real_Name = strRealFileName;
                                    objEntityAttach.Email_File_Name = strFileName;
                                    objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                                    objEntityMailAttachList.Add(objEntityAttach);
                                }
                            }
                        }
                        List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                        List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                        if (hiddenResendQtnMailType.Value == "To")
                        {
                            classEntityToMailAddress objEntityToMailAddress = new classEntityToMailAddress();
                            objEntityToMailAddress.ToAddress = hiddenResendQtnMailID.Value;
                        }
                        else if (hiddenResendQtnMailType.Value == "CC")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.CcMail = hiddenResendQtnMailID.Value;
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }
                        else if (hiddenResendQtnMailType.Value == "BCC")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.BCcMail = hiddenResendQtnMailID.Value;
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }

                        try
                        {
                            MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                            objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessMail", "SuccessMail();", true);
                        }
                        catch
                        {

                            ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessMail", "UnSuccessMail();", true);
                            objEntityQuotation.MailStatus = 0;
                        }
                    }
                   
                }
                else
                {

                    Response.Redirect("~/Default.aspx");

                }

            }
            else if (hiddenQtnTmpltId.Value == "2" || hiddenQtnTmpltId.Value == "3")
            {


                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
               if (hiddenLeadId.Value != "" && (hiddenQuotationID.Value != "") && hiddenQtnTmpltId.Value != "" && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
                {
                    int intQuotationTemplateTypeId = Convert.ToInt32(hiddenQtnTmpltId.Value);
                    objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationID.Value);
                    objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));
                    int intUserId = 0;
                    if (hiddenCorporateId.Value == "")
                    {
                        if (Session["CORPOFFICEID"] != null)
                        {
                            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                        }
                        else if (Session["CORPOFFICEID"] == null)
                        {
                            Response.Redirect("~/Default.aspx");
                        }
                    }
                    else
                    {

                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                    }
                    if (hiddenOrganisationId.Value == "")
                    {
                        if (Session["ORGID"] != null)
                        {
                            objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                        }
                        else if (Session["ORGID"] == null)
                        {
                            Response.Redirect("~/Default.aspx");
                        }
                    }
                    else
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                    }
                    if (Session["USERID"] != null)
                    {
                        intUserId = Convert.ToInt32(Session["USERID"]);

                    }
                    else if (Session["USERID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                    objEntityQuotation.User_Id = intUserId;
                    objEntityQuotation.D_Date = System.DateTime.Now;
                    string strId = hiddenLeadId.Value;
                    objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);
                    clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                    objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                    clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                    DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                    int intLeadStatus = 0;
                    if (dtLeadStatus.Rows.Count > 0)
                    {
                        intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
                    }

                    clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                    clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();
                    objEntityLead.LeadId = objEntityQuotation.Lead_Id;
                    objEntityLead.User_Id = intUserId;
                    objEntityQuotation.Lead_Id = Convert.ToInt32(hiddenLeadId.Value);

                    DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                    DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);
                    DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                    if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
                    {

                        clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                        objEntityMail.Email_Subject = "Enquiry - ";
                        objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                        clsEntityCommon objEntityCommon = new clsEntityCommon();
                        objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                        objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                        objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                        DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);
                        if (hiddenResendQtnMailType.Value == "TO")
                        {
                            objEntityMail.To_Email_Address = hiddenResendQtnMailID.Value;
                        }
                        objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                        objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                        objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                        objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                        objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                        objEntityMail.User_Id = objEntityLead.User_Id;
                        objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                        objEntityMail.Email_Content = dtQuotationMailBckup.Rows[0]["QUOT_ML_BKP_CONTENT"].ToString() + objEntityMail.Signature;

                        objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                        objEntityMail.D_Date = System.DateTime.Now;
                        List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();

                        int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
                        if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
                        {
                            PdfGeneration2();
                        }
                        else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
                        {
                            PdfAdvancedGeneration2();
                        }
                        else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
                        {
                            PdfCorporateAdvancedGeneration2();
                        }
                        else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
                        {
                            PdfTermsToLastCorporateAdvancedGeneration2();
                        }

                      

                        if (dtQuotationMailAttchmntBckup.Rows.Count > 0)
                        {
                            foreach (DataRow Dr in dtQuotationMailAttchmntBckup.Rows)
                            {
                                clsCommonLibrary objComm = new clsCommonLibrary();
                                string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_MAIL_ATTCH_BKP);
                                string strRealFileName = Dr["LDMAILATT_FLNM_ACT"].ToString();
                                string strFileName = Dr["LDMAILATT_FILENAME"].ToString();

                                string strFileLocation = strFilePath + strFileName;
                                if (File.Exists(Server.MapPath(strFileLocation)))
                                {
                                    clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                                    objEntityAttach.Email_Real_Name = strRealFileName;
                                    objEntityAttach.Email_File_Name = strFileName;
                                    objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                                    objEntityMailAttachList.Add(objEntityAttach);
                                }
                            }
                        }


                        List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                        List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                        if (hiddenResendQtnMailType.Value == "To")
                        {

                        }
                        else if (hiddenResendQtnMailType.Value == "CC")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.CcMail = hiddenResendQtnMailID.Value;
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }
                        else if (hiddenResendQtnMailType.Value == "BCC")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.BCcMail = hiddenResendQtnMailID.Value;
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }

                        try
                        {
                            MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                            objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                            objEntityQuotation.MailStatus = 1;
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessMail", "SuccessMail();", true);
                        }
                        catch
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessMail", "UnSuccessMail();", true);
                            objEntityQuotation.MailStatus = 0;
                        }
                    }

                }
                else
                {

                    Response.Redirect("~/Default.aspx");

                }
            }

        }


        
    }


    [WebMethod]
    public static string[] PartWinProductsLoad(string strOrgId, string strCorpId, string strQtnId, string strTempTyp, string strTaxEnable, string strPrdctGroup)
    {
        clsCommonLibrary objCommon = new clsCommonLibrary();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        string[] strPassing = new string[3];
        objEntityQuotation.Organisation_Id = Convert.ToInt32(strOrgId);
        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(strCorpId);
        objEntityQuotation.QuotationId = Convert.ToInt32(strQtnId);
        int DetailGroupid = Convert.ToInt32(strPrdctGroup);
        objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(strTempTyp);
        StringBuilder sb = new StringBuilder();
        DataTable dtQtnDtl = new DataTable();
        dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);

        double dbTotalAmount = 0;
        if (dtQtnDtl.Rows.Count > 0)
        {
            sb.Append("<table id=\"ReportTableForPartial\" class=\"display table-bordered tbl_1024\" cellspacing=\"0\" width=\"100%\">");
            sb.Append("<thead class=\"thead1\">");
            sb.Append("<tr>");
            sb.Append(" <th class=\"th_b2 tr_l\" style=\"display: none;\">PRO</th>");
            sb.Append(" <th class=\"th_b2 tr_l\">PRODUCT / Service</th>");
            sb.Append(" <th class=\"th_b6 tr_c\">Category</th>");
            sb.Append(" <th class=\"th_b6 tr_c\">UNIT</th>");
            sb.Append(" <th class=\"th_b1 tr_c\">QTY</th>");
            sb.Append(" <th class=\"th_b7 tr_r\">COST PRICE</th>");
            sb.Append(" <th class=\"th_b6 tr_c\">Selling<br> Price</th>");
            if (strTaxEnable == "1")
            {
                sb.Append(" <th class=\"th_b7 tr_l\">Tax %</th>");
                sb.Append("<th class=\"th_b6 tr_c\">Tax Amount</th>");
            }
            sb.Append(" <th class=\"th_b7 tr_c\">Discount<br> Amount</th>");
            sb.Append(" <th class=\"th_b6 tr_r\">Total</th>");

            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("<tbody>");
            if (objEntityQuotation.QuotationTemplateTypeId == 1)
            {
                if (strTaxEnable == "1")
                {
                    foreach (DataRow tableRow in dtQtnDtl.Rows)
                    {
                        if (tableRow["QUOTNDTLGRP_ID"].ToString() == strPrdctGroup || strPrdctGroup == "0")
                        {
                            if (tableRow["QUOTNDTL_WIN_STS_TRCK"].ToString() == "1")
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" class=\"selected\">");
                            }
                            else
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" >");
                            }
                            sb.Append("<td style=\"display: none;\" >" + tableRow[0] + "</td>");
                            sb.Append("<td  class=\"tr_l\">" + tableRow["PRDT NAME"] + "</td>");
                            sb.Append("<td  class=\"tr_l\">" + tableRow["CATGRY_NAME"] + "</td>");
                            sb.Append("<td >" + tableRow["UOM_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_QTY"] + "</td>");
                            sb.Append("<td class=\"tr_r\">" + tableRow["QUOTNDTL_PRICE"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_RATE"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_TAX_PERC"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_TAX_AMNT"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_DISC_AMNT"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_AMOUNT"] + " " + tableRow["CRNCMST_ABBRV"] + "</td>");

                            sb.Append("</tr  >");

                            dbTotalAmount = dbTotalAmount + Convert.ToDouble(tableRow["QUOTNDTL_AMOUNT"]);
                        }
                    }
                }
                else
                {
                    foreach (DataRow tableRow in dtQtnDtl.Rows)
                    {
                        if (tableRow["QUOTNDTLGRP_ID"].ToString() == strPrdctGroup || strPrdctGroup == "0")
                        {
                            if (tableRow["QUOTNDTL_WIN_STS_TRCK"].ToString() == "1")
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" class=\"selected\">");
                            }
                            else
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" >");
                            }
                            sb.Append("<td style=\"display: none;\" >" + tableRow[0] + "</td>");
                            sb.Append("<td class=\"tr_l\">" + tableRow["PRDT NAME"] + "</td>");
                            sb.Append("<td  class=\"tr_l\">" + tableRow["CATGRY_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["UOM_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_QTY"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_PRICE"] + "</td>");
                            sb.Append("<td class=\"tr_r\">" + tableRow["QUOTNDTL_RATE"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_DISC_AMNT"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_AMOUNT"] + " " + tableRow["CRNCMST_ABBRV"] + "</td>");

                            sb.Append("</tr  >");

                            dbTotalAmount = dbTotalAmount + Convert.ToDouble(tableRow["QUOTNDTL_AMOUNT"]);
                        }
                    }
                }
            }
            else
            {
                if (strTaxEnable == "1")
                {
                    foreach (DataRow tableRow in dtQtnDtl.Rows)
                    {
                        if (tableRow["QUOTNDTLGRP_ID"].ToString() == strPrdctGroup || strPrdctGroup == "0")
                        {
                            if (tableRow["QUOTNDTL_WIN_STS_TRCK"].ToString() == "1")
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" class=\"selected\">");
                            }
                            else
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" >");
                            }
                            sb.Append("<td style=\"display: none;\" >" + tableRow[0] + "</td>");
                            sb.Append("<td  class=\"tr_l\">" + tableRow["PRDT_NAME"] + "</td>");
                            sb.Append("<td class=\"tr_l\" >" + tableRow["CATGRY_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["UOM_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_QTY"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_PRICE"] + "</td>");
                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_RATE"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_TAX_PERC"] + "</td>");
                            sb.Append("<td class=\"tr_r\" >" + tableRow["QUOTNDTL_TAX_AMNT"] + "</td>");

                            sb.Append("<td  class=\"tr_r\">" + tableRow["QUOTNDTL_DISC_AMNT"] + "</td>");
                            sb.Append("<td class=\"tr_r\" >" + tableRow["QUOTNDTL_AMOUNT"] + " " + tableRow["CRNCMST_ABBRV"] + "</td>");

                            sb.Append("</tr  >");
                            dbTotalAmount = dbTotalAmount + Convert.ToDouble(tableRow["QUOTNDTL_AMOUNT"]);
                        }
                    }
                }
                else
                {
                    foreach (DataRow tableRow in dtQtnDtl.Rows)
                    {
                        if (tableRow["QUOTNDTLGRP_ID"].ToString() == strPrdctGroup || strPrdctGroup == "0")
                        {
                            if (tableRow["QUOTNDTL_WIN_STS_TRCK"].ToString() == "1")
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" class=\"selected\">");
                            }
                            else
                            {
                                sb.Append("<tr id=\"tr_" + tableRow[0] + "\" >");
                            }
                            sb.Append("<td style=\"display: none;\" >" + tableRow[0] + "</td>");
                            sb.Append("<td  class=\"tr_l\" >" + tableRow["PRDT_NAME"] + "</td>");
                            sb.Append("<td   class=\"tr_l\">" + tableRow["CATGRY_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["UOM_NAME"] + "</td>");
                            sb.Append("<td  >" + tableRow["QUOTNDTL_QTY"] + "</td>");
                            sb.Append("<td   class=\"tr_r\">" + tableRow["QUOTNDTL_PRICE"] + "</td>");
                            sb.Append("<td  class=\"tr_r\" >" + tableRow["QUOTNDTL_RATE"] + "</td>");
                            sb.Append("<td   class=\"tr_r\">" + tableRow["QUOTNDTL_DISC_AMNT"] + "</td>");
                            sb.Append("<td   class=\"tr_r\">" + tableRow["QUOTNDTL_AMOUNT"] + " " + tableRow["CRNCMST_ABBRV"] + "</td>");

                            sb.Append("</tr  >");
                            dbTotalAmount = dbTotalAmount + Convert.ToDouble(tableRow["QUOTNDTL_AMOUNT"]);
                        }
                    }
                }
            }
            sb.Append("</tbody>");
        }
        strPassing[0] = sb.ToString();
        strPassing[1] = dbTotalAmount.ToString();
        return strPassing;
    }


}