using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Data;
using System.Web.UI.WebControls;
using BL_Compzit;
using EL_Compzit;
using System.Text;
using CL_Compzit;
using System.Collections;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using System.Web.Services;
using PdfSharp;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System.IO;
using PdfSharp.Drawing.Layout;

// CREATED BY:EVM-0001
// CREATED DATE:01/04/2016
// REVIEWED BY:
// REVIEW DATE:

public partial class Transaction_Cmpzt_Quotation_Cmpzt_Quotation : System.Web.UI.Page
{

    //Enumeration for child roles
    private enum QUOTATION_STATUS
    {
        NotConfirmed = 0,
        Confirmed = 1,
        Return = 2,
        Approved = 3,
        Delivered = 4,
        Re_Opened = 5
    }
    protected void Page_Load(object sender, EventArgs e)
    {

        if (!IsPostBack)
        {
            Loadcustomer();

            btnMakeFnlTop.Visible = false;
            btnMakeFnlDown.Visible = false;
            btnViewRevsdQtn.Visible = false;
            BtnQuatnSts.Visible = true;

            LoadProductAvailSts();
            divQtnRtrnReasonSts.Visible = false;

            txtPriceTerm.Attributes.Add("onchange", "IncrmntConfrmCounter()");
            txtPymntTerm.Attributes.Add("onchange", "IncrmntConfrmCounter()");
            txtValidityTerm.Attributes.Add("onchange", "IncrmntConfrmCounter()");
            txtDlvryTerm.Attributes.Add("onchange", "IncrmntConfrmCounter()");
            txtWrntyTerm.Attributes.Add("onchange", "IncrmntConfrmCounter()");
            txtManufacturerTerm.Attributes.Add("onchange", "IncrmntConfrmCounter()");
            txtPriceTerm.Attributes.Add("onchange", "IncrmntConfrmCounter()");
            txtComments.Attributes.Add("onchange", "IncrmntConfrmCounter()");
            cbxSendMail.Attributes.Add("onchange", "IncrmntConfrmCounter()");


            ddlPriceTerm.Attributes.Add("onkeypress", "return DisableEnter(event)");
            ddlPymntTerm.Attributes.Add("onkeypress", "return DisableEnter(event)");
            ddlDlvryTerm.Attributes.Add("onkeypress", "return DisableEnter(event)");
            ddlWrntyTerm.Attributes.Add("onkeypress", "return DisableEnter(event)");
            ddlManufacturerTerm.Attributes.Add("onkeypress", "return DisableEnter(event)");

            ddlCurrency.Attributes.Add("onkeypress", "return DisableEnter(event)");
            ddlCurrency.Attributes.Add("onchange", "IncrmntConfrmCounter()");
            currencyLoad();

            CKEditorDescription.config.toolbar = new object[] { };
            CKEditorDescription.config.resize_enabled = false;
            CKEditorDescription.config.removePlugins = "liststyle,tabletools,scayt,menubutton,contextmenu,elementspath";
            //CKEditorDescription.config.height = "300";
            //CKEditorDescription.config.uiColor = "#0680bd";

            if (Request.QueryString["L_MODE"] != null)
            {
                string strL_MODE = Request.QueryString["L_MODE"].ToString();
                hiddenL_MODE.Value = strL_MODE;
            }
            else
            {
                hiddenL_MODE.Value = "";
            }


            //lblSendMailError.Text = "";
            lblSendMailError.Visible = false;
            this.Form.Enctype = "multipart/form-data";

            int intUserId = 0, intUsrRolMstrId, intEnableAdd = 0, intEnableModify = 0, intEnableCancel = 0, intEnableConfirm = 0, intEnableApprove = 0, intEnableReOpen = 0, intEnableReturn = 0;
            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            if (Session["USERID"] != null)
            {
                intUserId = Convert.ToInt32(Session["USERID"]);

            }
            else if (Session["USERID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }

            hiddenUserId.Value = Convert.ToString(intUserId);

            //Allocating child roles
            intUsrRolMstrId = Convert.ToInt32(clsCommonLibrary.USR_ROLE_MSTR.Quotation);
            DataTable dtChildRol = objBusinessLayer.LoadChildRoleDefnDetail(intUserId, intUsrRolMstrId);

            if (dtChildRol.Rows.Count > 0)
            {
                string strChildRolDeftn = dtChildRol.Rows[0]["USRROL_CHLDRL_DEFN"].ToString();

                string[] strChildDefArrWords = strChildRolDeftn.Split('-');
                foreach (string strC_Role in strChildDefArrWords)
                {
                    if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Add).ToString())
                    {
                        intEnableAdd = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Modify).ToString())
                    {
                        intEnableModify = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);
                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Cancel).ToString())
                    {
                        intEnableCancel = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);

                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Find).ToString())
                    {
                        //future

                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Rate_Updation).ToString())
                    {
                        //future

                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Confirm).ToString())
                    {
                        intEnableConfirm = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);


                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Approve).ToString())
                    {
                        intEnableApprove = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);


                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Re_Open).ToString())
                    {
                        intEnableReOpen = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);


                    }
                    else if (strC_Role == Convert.ToInt16(clsCommonLibrary.ChildRole.Return).ToString())
                    {
                        intEnableReturn = Convert.ToInt32(clsCommonLibrary.StatusAll.Active);


                    }

                }

                if (intEnableAdd == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    btnSave.Visible = true;
                    btnSaveTop.Visible = true;
                    btnshowoldqtns.Visible = true;
                }
                else
                {

                    btnSave.Visible = false;
                    btnSaveTop.Visible = false;
                    btnshowoldqtns.Visible = false;
                }
                if (intEnableModify == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    btnUpdate.Visible = true;
                    btnUpdateTop.Visible = true;
                    btnshowoldqtns.Visible = true;
                }
                else
                {

                    btnUpdate.Visible = false;
                    btnUpdateTop.Visible = false;
                    btnshowoldqtns.Visible = false;
                }
                if (intEnableConfirm == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    btnConfirm.Visible = true;
                    btnConfirmTop.Visible = true;
                }
                else
                {

                    btnConfirm.Visible = false;
                    btnConfirmTop.Visible = false;

                }
                if (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    btnApprove.Visible = true;
                    btnApproveTop.Visible = true;

                }
                else
                {

                    btnApprove.Visible = false;
                    btnApproveTop.Visible = false;

                }
                if (intEnableReOpen == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    btnReOpen.Visible = true;
                    btnReOpenDown.Visible = true;
                }
                else
                {

                    btnReOpen.Visible = false;
                    btnReOpenDown.Visible = false;
                }
                if (intEnableReturn == Convert.ToInt32(clsCommonLibrary.StatusAll.Active))
                {
                    btnReturn.Visible = true;
                    btnReturnTop.Visible = true;

                }
                else
                {

                    btnReturn.Visible = false;
                    btnReturnTop.Visible = false;

                }
                //Loading Terms in dropdown
                PriceTermsLoad();
                PaymentTermsLoad();
                DeliveryTermsLoad();
                WarrantyTermsLoad();
                ManufacturerTermsLoad();

                //Creating objects for business layer
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

                int intCorpId = 0;
                int intOrgId = 0;
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"].ToString());
                    intCorpId = Convert.ToInt32(Session["CORPOFFICEID"].ToString());
                    hiddenCorporateId.Value = Session["CORPOFFICEID"].ToString();

                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
                if (Session["ORGID"] != null)
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    intOrgId = Convert.ToInt32(Session["ORGID"].ToString());
                    hiddenOrganisationId.Value = Session["ORGID"].ToString();

                }
                else if (Session["ORGID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }

                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.QuotationTemplateTypeId = 1;
                DataTable dtQuatataionBytemplate = objBusinessLayerQuotation.ReadQuotationByTemplateId(objEntityQuotation);
                divQtnList.InnerHtml = ConvertDataTableToHTMLQuatationList(dtQuatataionBytemplate);


                clsCommonLibrary.CORP_GLOBAL[] arrEnumer = {  clsCommonLibrary.CORP_GLOBAL.CNCL_REASN_MUST,
                                                               clsCommonLibrary.CORP_GLOBAL.CMN_PERCENT_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.TAX_PERC_DECIMAL,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_MNEY_DECIMAL_CNT,
                                                               clsCommonLibrary.CORP_GLOBAL.GN_UNIT_DECIMAL_CNT,
                                                                clsCommonLibrary.CORP_GLOBAL.DEFLT_CURNCY_MST_ID,
                                                                  clsCommonLibrary.CORP_GLOBAL.GN_TAX_ENABLED,
                                                                    clsCommonLibrary.CORP_GLOBAL.ITEM_LISTING_MODE,
                                                                      clsCommonLibrary.CORP_GLOBAL.DFLT_QTNFRMT_ID,
                                                                        clsCommonLibrary.CORP_GLOBAL.DFLT_CURNCY_DISPLAY,
                                                                        clsCommonLibrary.CORP_GLOBAL.QTN_STNDRD_ALLOW_ITM_DUP
                                                              };
                DataTable dtCorpDetail = new DataTable();
                dtCorpDetail = objBusinessLayer.LoadGlobalDetail(arrEnumer, intCorpId);
                if (dtCorpDetail.Rows.Count > 0)
                {
                    string strItemListingMode = dtCorpDetail.Rows[0]["ITEM_LISTING_MODE"].ToString();
                    hiddenListngMode.Value = strItemListingMode;
                    if (strItemListingMode == "0")//division based,all product based on Division in which user is
                    {
                        DataTable dtUserDivision = new DataTable();
                        dtUserDivision = objBusinessLayer.ReadDivisionsOfUser(intUserId, intOrgId);
                        string strDivisions = "";
                        for (int intDivsnCount = 0; intDivsnCount < dtUserDivision.Rows.Count; intDivsnCount++)
                        {
                            if (strDivisions == "")
                            {
                                strDivisions = dtUserDivision.Rows[intDivsnCount]["CPRDIV_ID"].ToString();
                            }
                            else
                            {
                                strDivisions = strDivisions + "," + dtUserDivision.Rows[intDivsnCount]["CPRDIV_ID"].ToString();

                            }
                        }

                        hiddenDivisionIds.Value = strDivisions;
                    }
                    else// common based all product under corporate
                    {
                        hiddenDivisionIds.Value = "0";

                    }

                    DataTable dtTaxList = objBusinessLayerQuotation.ReadTax(objEntityQuotation);
                    divOptionsTax.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtTaxList);


                    DataTable dtUnitList = objBusinessLayerQuotation.ReadUnit(objEntityQuotation);
                    divOptionsUnit.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtUnitList);

                    DataTable dtReopenRsnMstr = objBusinessLayerQuotation.ReadReopenReasonMstr(objEntityQuotation);
                    divOptionsReopenReason.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtReopenRsnMstr);
                    aOptionsReopenReason.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtReopenRsnMstr);

                    hiddenFloatingValueMoney.Value = dtCorpDetail.Rows[0]["GN_MNEY_DECIMAL_CNT"].ToString();
                    hiddenFloatingValueTaxPercentage.Value = dtCorpDetail.Rows[0]["TAX_PERC_DECIMAL"].ToString();
                    hiddenFloatingValueUnit.Value = dtCorpDetail.Rows[0]["GN_UNIT_DECIMAL_CNT"].ToString(); ;
                    hiddenTaxEnabled.Value = dtCorpDetail.Rows[0]["GN_TAX_ENABLED"].ToString();
                    hiddenFloatingValueCommonPercentage.Value = dtCorpDetail.Rows[0]["CMN_PERCENT_DECIMAL"].ToString();
                    hiddenDfltCurrencyMstrId.Value = dtCorpDetail.Rows[0]["DEFLT_CURNCY_MST_ID"].ToString();
                    hiddenDfltQuotationFormatId.Value = dtCorpDetail.Rows[0]["DFLT_QTNFRMT_ID"].ToString();
                    hiddenDfltCurrencyDisplay.Value = dtCorpDetail.Rows[0]["DFLT_CURNCY_DISPLAY"].ToString();
                    hiddenAllowItemDuplication.Value = dtCorpDetail.Rows[0]["QTN_STNDRD_ALLOW_ITM_DUP"].ToString();
                }
                //Currency Selection
                currencyLoad();

                divRef.Visible = false;

                if (hiddenDfltCurrencyMstrId.Value != "")
                {
                    // lead id given 

                    int intLeadId = 0;
                    if (Request.QueryString["LeadId"] != null)
                    {
                        string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                        HiddenLeadIdres.Value = strRandomMixedId;
                        string strLenghtofId = strRandomMixedId.Substring(0, 2);
                        int intLenghtofId = Convert.ToInt16(strLenghtofId);
                        string strLeadId = strRandomMixedId.Substring(2, intLenghtofId);
                        intLeadId = Convert.ToInt32(strLeadId);
                        HiddenLeadId.Value = intLeadId.ToString();

                        aLeadInfo.HRef = "/Transaction/gen_Lead/gen_LeadIndividualList.aspx?Id=" + Request.QueryString["LeadId"] + "";

                        // for invalid or null case of referenceformat
                        clsEntityCommon objEntityCommon = new clsEntityCommon();
                        // cliebt side number format
                        objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                        DataTable dtCurrencyDetail = new DataTable();
                        dtCurrencyDetail = objBusinessLayer.ReadCurrencyDetails(objEntityCommon);
                        if (dtCurrencyDetail.Rows.Count > 0)
                        {
                            hiddenCurrencyModeId.Value = dtCurrencyDetail.Rows[0]["CRNCYMD_ID"].ToString();
                            hiddenCurrencySymbol.Value = dtCurrencyDetail.Rows[0]["CRNCMST_SYMBOL"].ToString();
                            hiddenCurrencyCode.Value = dtCurrencyDetail.Rows[0]["CRNCMST_ABBRV"].ToString();
                        }

                        objEntityQuotation.Lead_Id = intLeadId;
                        string strL_MODE = "";
                        string strPrev = "";

                        if (Request.QueryString["Prev"] != null)
                        {
                            strPrev = Request.QueryString["Prev"].ToString();
                        }
                        if (Request.QueryString["L_MODE"] != null)
                        {
                            strL_MODE = Request.QueryString["L_MODE"].ToString();
                        }

                        DataTable dtLead = new DataTable();
                        dtLead = objBusinessLayerQuotation.ReadLeadDtlForDisplay(objEntityQuotation);

                        if (dtLead.Rows.Count > 0)
                        {
                            hiddenCorporateDivId.Value = dtLead.Rows[0]["CPRDIV_ID"].ToString();
                            objEntityCommon.CorporateDivId = Convert.ToInt32(dtLead.Rows[0]["CPRDIV_ID"]);
                        }
                        if (hiddenCorporateId.Value != "")
                        {
                            objEntityCommon.CorporateID = Convert.ToInt32(hiddenCorporateId.Value);
                        }

                        if (hiddenOrganisationId.Value != "")
                        {
                            objEntityCommon.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                        }

                        DataTable dtReferenceFormat = new DataTable();
                        dtReferenceFormat = objBusinessLayer.ReferenceFormat(objEntityCommon);
                        if (dtReferenceFormat.Rows.Count > 0)
                        {
                            string strReferenceFormat = "";
                            strReferenceFormat = dtReferenceFormat.Rows[0]["CPRDIV_REF_FORMAT"].ToString();

                            string[] arrReferenceSplit = strReferenceFormat.Split('*');

                            int intArrayRowCount = arrReferenceSplit.Count();
                            for (int intRowCount = 0; intRowCount < intArrayRowCount; intRowCount++)
                            {
                                if (arrReferenceSplit[intRowCount] != "" && arrReferenceSplit[intRowCount] != null)
                                {
                                    if (arrReferenceSplit[intRowCount].Contains("#"))
                                    {
                                        string[] strSplitWithHash = arrReferenceSplit[intRowCount].Split('#');
                                        int intArraySplitHashCount = strSplitWithHash.Count();
                                        for (int intcount = 0; intcount < intArraySplitHashCount; intcount++)
                                        {
                                            if (strSplitWithHash[intcount] != "" && strSplitWithHash[intcount] != null)
                                            {
                                                if (strSplitWithHash[intcount] == "DIV" || strSplitWithHash[intcount] == "USR" || strSplitWithHash[intcount] == "SLN" || strSplitWithHash[intcount] == "YER" || strSplitWithHash[intcount] == "MON" || strSplitWithHash[intcount] == "REV" || strSplitWithHash[intcount] == "%")
                                                {

                                                }
                                                else
                                                {
                                                    btnshowoldqtns.Visible = false;
                                                    btnReSendMail.Visible = false;
                                                    btnReSendMailTop.Visible = false;
                                                    btnSave.Visible = false;
                                                    btnSaveTop.Visible = false;
                                                    btnUpdate.Visible = false;
                                                    btnUpdateTop.Visible = false;
                                                    btnShowPDF.Visible = false;
                                                    btnShowPDFTop.Visible = false;
                                                    btnConfirm.Visible = false;
                                                    btnConfirmTop.Visible = false;
                                                    btnApprove.Visible = false;
                                                    btnApproveTop.Visible = false;
                                                    btnReturn.Visible = false;
                                                    btnReturnTop.Visible = false;
                                                    btnReOpen.Visible = false;
                                                    btnReOpenDown.Visible = false;
                                                    btnDelivered.Visible = false;
                                                    btnDeliveredDown.Visible = false;
                                                    BtnQuatnSts.Visible = false;

                                                    ScriptManager.RegisterStartupScript(this, GetType(), "NotCorrectRefFormat", "NotCorrectRefFormat('" + strRandomMixedId + "','" + strL_MODE + "','" + strPrev + "');", true);
                                                }
                                            }

                                        }
                                    }
                                }
                            }

                        }
                        LeadDetails(strLeadId, intEnableApprove);

                        //Currency selection
                        objEntityCommon.CurrencyId = Convert.ToInt32(ddlCurrency.SelectedItem.Value);
                        hiddenDfltCurrencyMstrId.Value = ddlCurrency.SelectedItem.Value;
                        DataTable dtCurrencyDetails = new DataTable();
                        dtCurrencyDetails = objBusinessLayer.ReadCurrencyDetails(objEntityCommon);
                        if (dtCurrencyDetails.Rows.Count > 0)
                        {
                            hiddenCurrencyModeId.Value = dtCurrencyDetails.Rows[0]["CRNCYMD_ID"].ToString();
                            hiddenCurrencySymbol.Value = dtCurrencyDetails.Rows[0]["CRNCMST_SYMBOL"].ToString();
                            hiddenCurrencyCode.Value = dtCurrencyDetails.Rows[0]["CRNCMST_ABBRV"].ToString();
                        }
                        DataTable dtRvsdQtnList = objBusinessLayerQuotation.ReadRvsdQuotation(objEntityQuotation);
                        divRvsdList.InnerHtml = ConvertDataTableToHTMLQuatationRvsdList(dtRvsdQtnList);
                        if (Request.QueryString["RvsdId"] != null)
                        {
                            ViewRvsdQtn(Convert.ToInt32(Request.QueryString["RvsdId"].ToString()), 2);
                            btnshowoldqtns.Visible = false;
                            btnReSendMail.Visible = false;
                            btnReSendMailTop.Visible = false;
                            btnSave.Visible = false;
                            btnSaveTop.Visible = false;
                            btnUpdate.Visible = false;
                            btnUpdateTop.Visible = false;
                            btnShowPDF.Visible = false;
                            btnShowPDFTop.Visible = false;
                            btnConfirm.Visible = false;
                            btnConfirmTop.Visible = false;
                            btnApprove.Visible = false;
                            btnApproveTop.Visible = false;
                            btnReturn.Visible = false;
                            btnReturnTop.Visible = false;
                            btnReOpen.Visible = false;
                            btnReOpenDown.Visible = false;
                            btnDelivered.Visible = false;
                            btnDeliveredDown.Visible = false;
                            BtnQuatnSts.Visible = false;


                            btnMakeFnlTop.Visible = true;
                            btnMakeFnlDown.Visible = true;

                        }

                    }
                    clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();

                    objEntityLead.LeadId = intLeadId;
                    objEntityLead.User_Id = intUserId;
                    clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
                    DataTable dtFromMail = objBusinessLeadIndvl.ReadFromMailAddress(objEntityLead);
                    DataTable dtToMail = objBusinessLeadIndvl.ReadToMailAddress(objEntityLead);
                    DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                    if (dtFromMail.Rows.Count > 0)
                    {
                        if (dtToMail.Rows.Count > 0)
                        {
                            if (dtToMail.Rows[0]["LEADS_EMAIL"] != DBNull.Value)
                            {
                                cbxSendMail.Enabled = true;
                                btnSendMail.Disabled = false;
                                lblEditMailWindow.Visible = true;
                                //lblSendMailError.Text = "";
                                lblSendMailError.Visible = false;
                                if (dtAdtnlMail.Rows.Count > 0)
                                {
                                    txtToAddress.Text = dtAdtnlMail.Rows[0]["TO_MAIL"].ToString();
                                    txtCccontent.Text = dtAdtnlMail.Rows[0]["CC_MAIL"].ToString();
                                    txtBCccontent.Text = dtAdtnlMail.Rows[0]["BCC_MAIL"].ToString();
                                }
                                else
                                {
                                    txtToAddress.Text = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();

                                    string ccMailIds = "";
                                    if (dtToMail.Rows.Count == 1)
                                    {
                                        ccMailIds = dtToMail.Rows[0]["LDCNT_EMAIL"].ToString();
                                    }
                                    else
                                    {

                                        foreach (DataRow row in dtToMail.Rows)
                                        {
                                            if (row["LDCNT_EMAIL"].ToString() != "" && row["LDCNT_MAIL_ALWD"].ToString() == "1")
                                            {

                                                ccMailIds = row["LDCNT_EMAIL"].ToString() + "," + ccMailIds;
                                            }
                                        }
                                        if (ccMailIds != "")
                                        {
                                            ccMailIds = ccMailIds.TrimEnd(ccMailIds[ccMailIds.Length - 1]);
                                        }
                                    }
                                    txtCccontent.Text = ccMailIds;
                                }
                            }
                            else
                            {
                                cbxSendMail.Enabled = false;
                                btnSendMail.Disabled = true;
                                lblEditMailWindow.Visible = false;
                                //lblSendMailError.Text = "(Please Review  E-Mail Settings of-Employee,Division And Customer)";
                                lblSendMailError.Visible = true;
                                btnReSendMail.Visible = false;
                                btnReSendMailTop.Visible = false;
                            }
                        }
                        else
                        {
                            cbxSendMail.Enabled = false;
                            btnSendMail.Disabled = true;
                            lblEditMailWindow.Visible = false;
                            //lblSendMailError.Text = "(Please Review  E-Mail Settings of-Employee,Division And Customer)";
                            lblSendMailError.Visible = true;
                            btnReSendMail.Visible = false;
                            btnReSendMailTop.Visible = false;
                        }
                    }
                    else
                    {
                        cbxSendMail.Enabled = false;
                        btnSendMail.Disabled = true;
                        lblEditMailWindow.Visible = false;
                        //lblSendMailError.Text = "(Please Review  E-Mail Settings of-Employee,Division And Customer)";
                        lblSendMailError.Visible = true;
                        btnReSendMail.Visible = false;
                        btnReSendMailTop.Visible = false;
                    }






                    if (Request.QueryString["InsUpd"] != null)
                    {
                        string strInsUpd = Request.QueryString["InsUpd"].ToString();
                        if (strInsUpd == "Save")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessSave", "SuccessSave();", true);
                        }
                        else if (strInsUpd == "Upd")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessUpdation", "SuccessUpdation();", true);
                        }
                        else if (strInsUpd == "Cnfrm")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessConfirmation", "SuccessConfirmation();", true);
                        }
                        else if (strInsUpd == "CnfrmNM")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessConfirmationNM", "SuccessConfirmationNM();", true);
                        }
                        else if (strInsUpd == "Aprv")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessApprove", "SuccessApprove();", true);
                        }
                        else if (strInsUpd == "Rtrn")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessReturn", "SuccessReturn();", true);
                        }
                        else if (strInsUpd == "ReOpn")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessReOpen", "SuccessReOpen();", true);
                        }
                        else if (strInsUpd == "Dlvr")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessDelivery", "SuccessDelivery();", true);
                        }
                        else if (strInsUpd == "AprvNM")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessApproveNM", "SuccessApproveNM();", true);
                        }
                        else if (strInsUpd == "AprvDlvr")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessApproveDeliver", "SuccessApproveDeliver();", true);
                        }
                        else if (strInsUpd == "Mail")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessReMail", "SuccessReMail();", true);
                        }
                        else if (strInsUpd == "MailNS")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "UnSuccessReMail", "UnSuccessReMail();", true);
                        }

                        else if (strInsUpd == "SaveFnl")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SaveFinal", "SaveFinal();", true);
                        }

                        else if (strInsUpd == "StsChange")
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "SuccessStatusChange", "SuccessStatusChange();", true);
                        }
                    }
                }
                else
                {
                    btnshowoldqtns.Visible = false;
                    btnReSendMail.Visible = false;
                    btnReSendMailTop.Visible = false;
                    btnSave.Visible = false;
                    btnSaveTop.Visible = false;
                    btnUpdate.Visible = false;
                    btnUpdateTop.Visible = false;
                    btnShowPDF.Visible = false;
                    btnShowPDFTop.Visible = false;
                    btnConfirm.Visible = false;
                    btnConfirmTop.Visible = false;
                    btnApprove.Visible = false;
                    btnApproveTop.Visible = false;
                    btnReturn.Visible = false;
                    btnReturnTop.Visible = false;
                    btnReOpen.Visible = false;
                    btnReOpenDown.Visible = false;
                    BtnQuatnSts.Visible = false;
                    btnDelivered.Visible = false;
                    btnDeliveredDown.Visible = false;
                    string strRandomMixedId = "";
                    string strL_MODE = "";
                    string strPrev = "";
                    if (Request.QueryString["LeadId"] != null)
                    {
                        strRandomMixedId = Request.QueryString["LeadId"].ToString();
                    }
                    if (Request.QueryString["Prev"] != null)
                    {
                        strPrev = Request.QueryString["Prev"].ToString();
                    }

                    if (Request.QueryString["L_MODE"] != null)
                    {
                        strL_MODE = Request.QueryString["L_MODE"].ToString();
                    }
                    ScriptManager.RegisterStartupScript(this, GetType(), "NoDfltCurrency", "NoDfltCurrency('" + strRandomMixedId + "','" + strL_MODE + "','" + strPrev + "');", true);
                }

            }
            else
            {
                btnshowoldqtns.Visible = false;
                btnReSendMail.Visible = false;
                btnReSendMailTop.Visible = false;
                btnSave.Visible = false;
                btnSaveTop.Visible = false;
                btnUpdate.Visible = false;
                btnUpdateTop.Visible = false;
                btnShowPDF.Visible = false;
                btnShowPDFTop.Visible = false;
                btnConfirm.Visible = false;
                btnConfirmTop.Visible = false;
                btnApprove.Visible = false;
                btnApproveTop.Visible = false;
                btnReturn.Visible = false;
                btnReturnTop.Visible = false;
                btnReOpen.Visible = false;
                btnReOpenDown.Visible = false;
                BtnQuatnSts.Visible = false;
                btnDelivered.Visible = false;
                btnDeliveredDown.Visible = false;
                ScriptManager.RegisterStartupScript(this, GetType(), "NoQuotataion", "NoQuotataion();", true);
            }

        }

    }


    //Method for binding Price Terms to dropdown list.
    public void PriceTermsLoad()
    {
        ddlPriceTerm.Items.Clear();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }
        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        objEntityQuotation.TermTemplateId = Convert.ToInt32(clsCommonLibrary.TERMS_TEMPLATE.Price_Term);
        DataTable dtTerms = objBusinessLayerQuotation.ReadTermTemplate(objEntityQuotation);

        ddlPriceTerm.DataSource = dtTerms;
        ddlPriceTerm.DataTextField = "TRTEMP_NAME";
        ddlPriceTerm.DataValueField = "TRTEMP_ID";
        ddlPriceTerm.DataBind();
        ddlPriceTerm.Items.Insert(0, "--SELECT PRICE TERMS--");
    }

    //This is the method for binding manufacturer terms to dropdown list.
    public void ManufacturerTermsLoad()
    {
        ddlManufacturerTerm.Items.Clear();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }
        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        objEntityQuotation.TermTemplateId = Convert.ToInt32(clsCommonLibrary.TERMS_TEMPLATE.Manufacturer_Term);
        DataTable dtTerms = objBusinessLayerQuotation.ReadTermTemplate(objEntityQuotation);

        ddlManufacturerTerm.DataSource = dtTerms;
        ddlManufacturerTerm.DataTextField = "TRTEMP_NAME";
        ddlManufacturerTerm.DataValueField = "TRTEMP_ID";
        ddlManufacturerTerm.DataBind();
        ddlManufacturerTerm.Items.Insert(0, "--SELECT MANUFACTURER TERMS--");
    }

    //Method for binding Payment Terms to dropdown list.
    public void PaymentTermsLoad()
    {
        ddlPymntTerm.Items.Clear();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }
        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        objEntityQuotation.TermTemplateId = Convert.ToInt32(clsCommonLibrary.TERMS_TEMPLATE.Payment_Term);
        DataTable dtTerms = objBusinessLayerQuotation.ReadTermTemplate(objEntityQuotation);

        ddlPymntTerm.DataSource = dtTerms;
        ddlPymntTerm.DataTextField = "TRTEMP_NAME";
        ddlPymntTerm.DataValueField = "TRTEMP_ID";
        ddlPymntTerm.DataBind();
        ddlPymntTerm.Items.Insert(0, "--SELECT PAYMENT TERMS--");
    }

    //Method for binding Delivery Terms to dropdown list.
    public void DeliveryTermsLoad()
    {
        ddlDlvryTerm.Items.Clear();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }
        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        objEntityQuotation.TermTemplateId = Convert.ToInt32(clsCommonLibrary.TERMS_TEMPLATE.Delivery_Term);
        DataTable dtTerms = objBusinessLayerQuotation.ReadTermTemplate(objEntityQuotation);

        ddlDlvryTerm.DataSource = dtTerms;
        ddlDlvryTerm.DataTextField = "TRTEMP_NAME";
        ddlDlvryTerm.DataValueField = "TRTEMP_ID";
        ddlDlvryTerm.DataBind();
        ddlDlvryTerm.Items.Insert(0, "--SELECT DELIVERY TERMS--");
    }

    //Method for binding Warranty Terms to dropdown list.
    public void WarrantyTermsLoad()
    {
        ddlWrntyTerm.Items.Clear();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }
        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        objEntityQuotation.TermTemplateId = Convert.ToInt32(clsCommonLibrary.TERMS_TEMPLATE.Warranty_Term);
        DataTable dtTerms = objBusinessLayerQuotation.ReadTermTemplate(objEntityQuotation);

        ddlWrntyTerm.DataSource = dtTerms;
        ddlWrntyTerm.DataTextField = "TRTEMP_NAME";
        ddlWrntyTerm.DataValueField = "TRTEMP_ID";
        ddlWrntyTerm.DataBind();
        ddlWrntyTerm.Items.Insert(0, "--SELECT WARRANTY TERMS--");
    }
    public void LeadDetails(string strLeadId, int intEnableApprove)
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (strLeadId != "" && strLeadId != null)
        {
            objEntityQuotation.Lead_Id = Convert.ToInt32(strLeadId);
        }
        DataTable dtLead = new DataTable();
        dtLead = objBusinessLayerQuotation.ReadLeadDtlForDisplay(objEntityQuotation);
        int intLeadStatus = 0;
        // for RE-OPEN PROVISION TO BE ALLOCATED FOR TEAM HEAD
        int intTeamHeadId = 0;
        if (dtLead.Rows.Count > 0)
        {
            if (dtLead.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
            {
                lblCustomerName.Text = dtLead.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtLead.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }
            else
            {
                lblCustomerName.Text = dtLead.Rows[0]["LEADS_CSTMR_NAME"].ToString();
            }
            intLeadStatus = Convert.ToInt32(dtLead.Rows[0]["LDSTS_ID"].ToString());

            intTeamHeadId = Convert.ToInt32(dtLead.Rows[0]["TEAM_LEAD_EMP_ID"].ToString());
            HiddenFieldTeamLeadId.Value = dtLead.Rows[0]["TEAM_LEAD_EMP_ID"].ToString();
            hiddenDivisionCode.Value = dtLead.Rows[0]["CPRDIV_CODE"].ToString();
            hiddenUserCode.Value = dtLead.Rows[0]["USR_CODE"].ToString();
            hiddenQtnRevisionVersn.Value = dtLead.Rows[0]["LDQUOT_RVSN"].ToString();

            lblDate.Text = dtLead.Rows[0]["LEADS_DATE"].ToString();
            lblTitle.Text = dtLead.Rows[0]["LEADS_TITLE"].ToString();
            lblDivision.Text = dtLead.Rows[0]["CPRDIV_NAME"].ToString();
            CKEditorDescription.Text = dtLead.Rows[0]["LEADS_DESCRIPTION"].ToString();
            hiddenQuotationId.Value = dtLead.Rows[0]["LDQUOT_ID"].ToString();
            hiddenQtnRefSerialId.Value = dtLead.Rows[0]["LDQUOT_REF_SLN_ID"].ToString();
            hiddenQuotationStatus.Value = dtLead.Rows[0]["LDQUOT_STS"].ToString();
            hiddenLeadActiveUser.Value = dtLead.Rows[0]["LEADS_ACTIVE_USR_ID"].ToString();


            if (dtLead.Rows[0]["REOPNRSN_NAME"].ToString() != "")
            {
                divQtnRtrnReasonSts.Visible = true;
                if (dtLead.Rows[0]["REOPNRSN_DSCRPTN"].ToString().Trim() != "")
                {
                    divQtnReason.InnerHtml = "Re-opened For: ";
                    aOptionsReopenReason.InnerHtml = dtLead.Rows[0]["REOPNRSN_NAME"].ToString();
                    aOptionsReopenReason.Attributes["data-content"] = dtLead.Rows[0]["REOPNRSN_DSCRPTN"].ToString();
                    aOptionsReopenReason.Attributes["data-original-title"] = dtLead.Rows[0]["REOPNRSN_NAME"].ToString();
                }
                else
                {
                    divQtnReason.InnerHtml = "Re-opened For: ";
                    aOptionsReopenReason.InnerHtml = dtLead.Rows[0]["REOPNRSN_NAME"].ToString();
                    aOptionsReopenReason.Attributes["data-original-title"] = dtLead.Rows[0]["REOPNRSN_NAME"].ToString();
                }
            }
            else
            {
                divQtnRtrnReasonSts.Visible = false;
            }
            if (dtLead.Rows[0]["REOPNRSN_DSCRPTN"].ToString().Trim() != "")
            {
                divReopenDescription.InnerHtml = " <div><img  style=\"margin-top: 1.5%;margin-right: 1.5%;float:right; cursor: pointer;\" onclick=\"return CloseReopenDescription();\" src=\"../../Images/Icons/cancel.png\" alt=\"X\" height=\"15px\" width=\"15px\"></div>";

                divReopenDescription.InnerHtml += "<div  style='text-align: left;padding: 6.5% 4%;'>" + dtLead.Rows[0]["REOPNRSN_DSCRPTN"].ToString().Trim() + "</div>";
            }
            else
            {
                divReopenDescription.InnerHtml = "";
            }

            if (hiddenQuotationStatus.Value != "")
            {
                divQtnSts.Visible = true;

                int intQtnSts = Convert.ToInt32(hiddenQuotationStatus.Value);
                if (intQtnSts == Convert.ToInt16(QUOTATION_STATUS.NotConfirmed))
                {
                    lblStatus.Text = "NOT CONFIRMED";
                }
                else if (intQtnSts == Convert.ToInt16(QUOTATION_STATUS.Confirmed))
                {
                    lblStatus.Text = "CONFIRMED";
                }
                else if (intQtnSts == Convert.ToInt16(QUOTATION_STATUS.Return))
                {
                    lblStatus.Text = "RETURN";
                }
                else if (intQtnSts == Convert.ToInt16(QUOTATION_STATUS.Approved))
                {
                    lblStatus.Text = "APPROVED";
                }
                else if (intQtnSts == Convert.ToInt16(QUOTATION_STATUS.Re_Opened))
                {
                    lblStatus.Text = "RE-OPENED";
                }
                else if (intQtnSts == Convert.ToInt16(QUOTATION_STATUS.Delivered))
                {
                    lblStatus.Text = "DELIVERED";
                }

            }
            else
            {
                divQtnSts.Visible = false;
            }
            if (hiddenQuotationId.Value != "")
            {
                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);
            }
            else
            {
                objEntityQuotation.QuotationId = 0;
            }
            DataTable dtMonthYear = new DataTable();
            dtMonthYear = objBusinessLayerQuotation.ReadMnthYearForRefNum(objEntityQuotation);
            if (dtMonthYear.Rows.Count > 0)
            {

                hiddenMonthMM.Value = dtMonthYear.Rows[0]["MONTH"].ToString();
                hiddenYearYYYY.Value = dtMonthYear.Rows[0]["YEAR"].ToString();
            }
        }
        if (hiddenLeadActiveUser.Value != hiddenUserId.Value && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending))
        {
            //EVM0012
            if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered))
            {
                btnReSendMail.Visible = false;
                btnReSendMailTop.Visible = false;

            }
            btnshowoldqtns.Visible = false;
            btnSave.Visible = false;
            btnSaveTop.Visible = false;
            btnUpdate.Visible = false;
            btnUpdateTop.Visible = false;
            btnConfirm.Visible = false;
            btnConfirmTop.Visible = false;
            btnApprove.Visible = false;
            btnApproveTop.Visible = false;
            btnReturn.Visible = false;
            btnReturnTop.Visible = false;
            if (intTeamHeadId.ToString() != hiddenUserId.Value)
            {
                btnShowPDF.Visible = false;
                btnShowPDFTop.Visible = false;
                btnReOpen.Visible = false;
                btnReOpenDown.Visible = false;
                BtnQuatnSts.Visible = false;
            }
            else
            {
                if (intLeadStatus == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss) || intLeadStatus == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success))
                {
                    btnShowPDF.Visible = false;
                    btnShowPDFTop.Visible = false;
                    btnReOpen.Visible = false;
                    btnReOpenDown.Visible = false;
                    BtnQuatnSts.Visible = false;

                }
                int intQtnStatus = 0;
                if (hiddenQuotationStatus.Value != "")
                {
                    intQtnStatus = Convert.ToInt32(hiddenQuotationStatus.Value);
                    if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.NotConfirmed))
                    {
                       
                        btnShowPDF.Visible = false;
                        btnShowPDFTop.Visible = false;
                        btnReOpen.Visible = false;
                        btnReOpenDown.Visible = false;
                        BtnQuatnSts.Visible = false;

                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Return))
                    {
                        btnShowPDF.Visible = false;
                        btnShowPDFTop.Visible = false;
                        btnReOpen.Visible = false;
                        btnReOpenDown.Visible = false;
                        BtnQuatnSts.Visible = false;

                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Re_Opened))
                    {
                   
                        btnShowPDF.Visible = false;
                        btnShowPDFTop.Visible = false;
                        btnReOpen.Visible = false;
                        btnReOpenDown.Visible = false;
                        BtnQuatnSts.Visible = false;

                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Confirmed) && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.InActive)))
                    {

                        btnReOpen.Visible = false;
                        btnReOpenDown.Visible = false;
                        BtnQuatnSts.Visible = false;


                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Confirmed) && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.Active)))
                    {

                        btnReOpen.Visible = false;
                        btnReOpenDown.Visible = false;
                        BtnQuatnSts.Visible = false;
                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Approved))
                    {
                    }
                    else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Delivered))
                    {

                    }
                    else
                    {
                        btnShowPDF.Visible = false;
                        btnShowPDFTop.Visible = false;
                        btnReOpen.Visible = false;
                        btnReOpenDown.Visible = false;
                        BtnQuatnSts.Visible = false;

                    }
                }
                else
                {
                    btnReOpen.Visible = false;
                    btnReOpenDown.Visible = false;
                    BtnQuatnSts.Visible = false;
                }
            }
            btnDelivered.Visible = false;
            btnDeliveredDown.Visible = false;
            if (hiddenQuotationId.Value != "")
            {
                int intQtnId = Convert.ToInt32(hiddenQuotationId.Value);
                //view
                EditView(intQtnId, 2);
            }

        }
        else
        {
            //EVM0012
            if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered))
            {
                btnReSendMail.Visible = false;
                btnReSendMailTop.Visible = false;
            }
            if (intLeadStatus == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss) || intLeadStatus == Convert.ToInt32(clsCommonLibrary.LeadStatus.Success))
            {
                if (intLeadStatus == Convert.ToInt32(clsCommonLibrary.LeadStatus.Loss))
                {
                    btnShowPDF.Visible = false;
                    btnShowPDFTop.Visible = false;
                }
                btnshowoldqtns.Visible = false;
                btnSave.Visible = false;
                btnSaveTop.Visible = false;
                btnUpdate.Visible = false;
                btnUpdateTop.Visible = false;
                btnConfirm.Visible = false;
                btnConfirmTop.Visible = false;
                btnApprove.Visible = false;
                btnApproveTop.Visible = false;
                btnReturn.Visible = false;
                btnReturnTop.Visible = false;
                btnReOpen.Visible = false;
                btnReOpenDown.Visible = false;
                btnDelivered.Visible = false;
                btnDeliveredDown.Visible = false;
                BtnQuatnSts.Visible = false;
                if (hiddenQuotationId.Value != "")
                {
                    int intQtnId = Convert.ToInt32(hiddenQuotationId.Value);
                    //view
                    EditView(intQtnId, 2);
                }
            }
            else
            {
                //this mean no quotation has been done against lead 
                if (hiddenQuotationId.Value == "")
                {
                    btnShowPDF.Visible = false;
                    btnShowPDFTop.Visible = false;
                    btnUpdate.Visible = false;
                    btnUpdateTop.Visible = false;
                    btnConfirm.Visible = false;
                    btnConfirmTop.Visible = false;
                    btnApprove.Visible = false;
                    btnApproveTop.Visible = false;
                    btnReturn.Visible = false;
                    btnReturnTop.Visible = false;
                    btnReOpen.Visible = false;
                    btnReOpenDown.Visible = false;
                    btnDelivered.Visible = false;
                    btnDeliveredDown.Visible = false;
                    BtnQuatnSts.Visible = false;
                    if (dtLead.Rows.Count > 0)
                    {
                        if (dtLead.Rows[0]["CSTMR_PRICE_TERMS"].ToString() != "")
                        {
                            txtPriceTerm.Text = dtLead.Rows[0]["CSTMR_PRICE_TERMS"].ToString();

                        }
                        if (dtLead.Rows[0]["CSTMR_DLVRY_TERMS"].ToString() != "")
                        {
                            txtDlvryTerm.Text = dtLead.Rows[0]["CSTMR_DLVRY_TERMS"].ToString();
                        }

                        if (dtLead.Rows[0]["CSTMR_PMNT_TERMS"].ToString() != "")
                        {
                            txtPymntTerm.Text = dtLead.Rows[0]["CSTMR_PMNT_TERMS"].ToString();

                        }

                    }
                }
                // quotation has been added so no new quotation can be added ONLY EDITING POSSIBLE
                else
                {
                   
                    int intQtnStatus = 0;
                    btnSave.Visible = false;
                    btnSaveTop.Visible = false;
                    int intQtnId = Convert.ToInt32(hiddenQuotationId.Value);
                    if (hiddenQuotationStatus.Value != "")
                    {
                        intQtnStatus = Convert.ToInt32(hiddenQuotationStatus.Value);
                        if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.NotConfirmed))
                        {
                           
                            btnShowPDF.Visible = false;
                            btnShowPDFTop.Visible = false;
                            btnReturn.Visible = false;
                            btnReturnTop.Visible = false;
                            btnApprove.Visible = false;
                            btnApproveTop.Visible = false;
                            btnReOpen.Visible = false;
                            btnReOpenDown.Visible = false;
                            BtnQuatnSts.Visible = false;
                            btnDelivered.Visible = false;
                            btnDeliveredDown.Visible = false;
                            //edit
                            EditView(intQtnId, 1);
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Return))
                        {
                            btnShowPDF.Visible = false;
                            btnShowPDFTop.Visible = false;
                            btnReturn.Visible = false;
                            btnReturnTop.Visible = false;
                            btnApprove.Visible = false;
                            btnApproveTop.Visible = false;
                            btnReOpen.Visible = false;
                            btnReOpenDown.Visible = false;
                            BtnQuatnSts.Visible = false;
                            btnDelivered.Visible = false;
                            btnDeliveredDown.Visible = false;
                            //edit
                            EditView(intQtnId, 1);
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Re_Opened))
                        {
                           
                            btnShowPDF.Visible = false;
                            btnShowPDFTop.Visible = false;
                            btnReturn.Visible = false;
                            btnReturnTop.Visible = false;
                            btnApprove.Visible = false;
                            btnApproveTop.Visible = false;
                            btnReOpen.Visible = false;
                            btnReOpenDown.Visible = false;
                            BtnQuatnSts.Visible = false;
                            btnDelivered.Visible = false;
                            btnDeliveredDown.Visible = false;
                            //edit
                            EditView(intQtnId, 1);
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Confirmed) && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.InActive)))
                        {
                            btnshowoldqtns.Visible = false;
                            btnReOpen.Visible = false;
                            btnReOpenDown.Visible = false;
                            BtnQuatnSts.Visible = false;
                            btnUpdate.Visible = false;
                            btnUpdateTop.Visible = false;
                            btnConfirm.Visible = false;
                            btnConfirmTop.Visible = false;
                            btnDelivered.Visible = false;
                            btnDeliveredDown.Visible = false;
                            //view
                            EditView(intQtnId, 2);

                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Confirmed) && (intEnableApprove == Convert.ToInt32(clsCommonLibrary.StatusAll.Active)))
                        {
                            btnshowoldqtns.Visible = false;
                            btnReOpen.Visible = false;
                            btnReOpenDown.Visible = false;
                            BtnQuatnSts.Visible = false;
                            btnConfirm.Visible = false;
                            btnConfirmTop.Visible = false;
                            btnDelivered.Visible = false;
                            btnDeliveredDown.Visible = false;
                            //edit
                            EditView(intQtnId, 1);
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Approved))
                        {
                            btnshowoldqtns.Visible = false;
                            btnUpdate.Visible = false;
                            btnUpdateTop.Visible = false;
                            btnConfirm.Visible = false;
                            btnConfirmTop.Visible = false;
                            btnApprove.Visible = false;
                            btnApproveTop.Visible = false;
                            btnReturn.Visible = false;
                            btnReturnTop.Visible = false;

                            //view
                            EditView(intQtnId, 2);
                        }
                        else if (intQtnStatus == Convert.ToInt32(QUOTATION_STATUS.Delivered))
                        {
                            btnshowoldqtns.Visible = false;
                            btnUpdate.Visible = false;
                            btnUpdateTop.Visible = false;
                            btnConfirm.Visible = false;
                            btnConfirmTop.Visible = false;
                            btnApprove.Visible = false;
                            btnApproveTop.Visible = false;
                            btnReturn.Visible = false;
                            btnReturnTop.Visible = false;
                            btnDelivered.Visible = false;
                            btnDeliveredDown.Visible = false;
                            //view
                            EditView(intQtnId, 2);
                        }
                        else
                        {
                            btnshowoldqtns.Visible = false;
                            btnShowPDF.Visible = false;
                            btnShowPDFTop.Visible = false;
                            btnUpdate.Visible = false;
                            btnUpdateTop.Visible = false;
                            btnConfirm.Visible = false;
                            btnConfirmTop.Visible = false;
                            btnApprove.Visible = false;
                            btnApproveTop.Visible = false;
                            btnReturn.Visible = false;
                            btnReturnTop.Visible = false;
                            btnReOpen.Visible = false;
                            btnReOpenDown.Visible = false;
                            BtnQuatnSts.Visible = false;
                            btnDelivered.Visible = false;
                            btnDeliveredDown.Visible = false;

                        }
                    }
                }

            }
        }
    }

    //It build the Html table by using the datatable provided
    public string ConvertDataTableToHTMLSelectOptions(DataTable dtSelect)
    {

        //add options

        string strOptn = "";
        for (int i = 0; i < dtSelect.Rows.Count; i++)
        {

            strOptn += "<option ";

            for (int j = 0; j < dtSelect.Columns.Count; j++)
            {
                if (j == 0)
                {//id
                    strOptn += "value=\"" + dtSelect.Rows[i][j].ToString() + "\">";
                }
                if (j == 1)
                {//name
                    strOptn += dtSelect.Rows[i][j].ToString();
                }


            }
            strOptn += "</option>";
        }
        string strDynamicOptions = strOptn;
        return strDynamicOptions;

    }



    private void EditView(int intQtnId, int intEditOrView)
    {//when Editing or viewing
        //intEditOrView if 1-Edit,2-View
        clsCommonLibrary objCommon = new clsCommonLibrary();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        objEntityQuotation.QuotationId = intQtnId;
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }

        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }


        DataTable dtQtnDtl = new DataTable();
        DataTable dtQtnDtlGroup = new DataTable();
        DataTable dtQtnCatDtl = new DataTable();
        DataTable dtQtn = new DataTable();
        DataTable dtQtnAttchmnt = new DataTable();
        objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
        dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
        dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
        dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);
        dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);
        dtQtnAttchmnt = objBusinessLayerQuotation.ReadQuotationAttchmnt(objEntityQuotation);

        if (dtQtn.Rows.Count > 0)
        {


            //Start:-EMP-0009
            //Currency selection
            ddlCurrency.ClearSelection();
            if (ddlCurrency.Items.FindByValue(dtQtn.Rows[0]["CRNCMST_ID"].ToString()) != null)
            {
                ddlCurrency.Items.FindByValue(dtQtn.Rows[0]["CRNCMST_ID"].ToString()).Selected = true;
            }

            else
            {
                ListItem lstSt = new ListItem(dtQtn.Rows[0]["CRNCMST_NAME"].ToString(), dtQtn.Rows[0]["CRNCMST_ID"].ToString());
                ddlCurrency.Items.Insert(1, lstSt);

                SortDDL(ref this.ddlCurrency);
                ddlCurrency.Items.FindByValue(dtQtn.Rows[0]["CRNCMST_ID"].ToString()).Selected = true;
            }
            if (hiddenLeadActiveUser.Value == hiddenUserId.Value)
            {
                if (hiddenLeadActiveUser.Value != HiddenFieldTeamLeadId.Value)
                {

                    if (dtQtn.Rows[0]["LDQUOT_REOPEN_CNT"].ToString() == "0" || dtQtn.Rows[0]["LDQUOT_STS"].ToString() == "4" || dtQtn.Rows[0]["LDQUOT_STS"].ToString() == "3" || dtQtn.Rows[0]["LDQUOT_STS"].ToString() == "1")
                    {
                        btnViewRevsdQtn.Visible = false;
                    }
                    else
                    {
                        btnViewRevsdQtn.Visible = true;
                    }
                }
                else
                {
                    if (dtQtn.Rows[0]["LDQUOT_REOPEN_CNT"].ToString() == "0" || dtQtn.Rows[0]["LDQUOT_STS"].ToString() == "4" || dtQtn.Rows[0]["LDQUOT_STS"].ToString() == "3")
                    {
                        btnViewRevsdQtn.Visible = false;
                    }

                    else
                    {
                        btnViewRevsdQtn.Visible = true;
                    }
                }
            }
            else if (HiddenFieldTeamLeadId.Value == hiddenUserId.Value)
            {
                if (dtQtn.Rows[0]["LDQUOT_REOPEN_CNT"].ToString() == "0" || dtQtn.Rows[0]["LDQUOT_STS"].ToString() != "1")
                {
                    btnViewRevsdQtn.Visible = false;
                }
                else
                {
                    btnViewRevsdQtn.Visible = true;
                }
            }

            txtPriceTerm.Text = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
            txtPymntTerm.Text = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
            txtDlvryTerm.Text = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
            txtWrntyTerm.Text = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
            txtValidityTerm.Text = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
            txtManufacturerTerm.Text = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
            txtComments.Text = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();
            hiddenQuotationDate.Value = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
            divRef.Visible = true;
            lblRefNumbr.Text = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();


            int intSndMail = Convert.ToInt32(dtQtn.Rows[0]["LDQUOT_MAIL_STS"].ToString());
            if (cbxSendMail.Enabled == true)
            {
                if (intSndMail == 0)
                {
                    cbxSendMail.Checked = false;
                }
                else
                {

                    cbxSendMail.Checked = true;

                }
            }
            else
            {
                cbxSendMail.Checked = false;
            }

            DataTable dtDetailCat = new DataTable();
            dtDetailCat.Columns.Add("CATNAME", typeof(string));
            dtDetailCat.Columns.Add("GRPID", typeof(string));
            dtDetailCat.Columns.Add("QTNDTLID", typeof(string));
            if (dtQtnCatDtl.Rows.Count > 0)
            {
                foreach (DataRow dtCat in dtQtnCatDtl.Rows)
                {
                    DataRow drDtlCat = dtDetailCat.NewRow();
                    drDtlCat["CATNAME"] = dtCat["CATGRY_NAME"].ToString();
                    if (dtCat["QUOTNDTLGRP_ID"].ToString() != "")
                    {
                        drDtlCat["GRPID"] = Convert.ToInt32(dtCat["QUOTNDTLGRP_ID"].ToString());
                    }
                    else
                    {
                        drDtlCat["GRPID"] = 0;
                    }
                    dtDetailCat.Rows.Add(drDtlCat);
                }
            }
            string strJsonCat = DataTableToJSONWithJavaScriptSerializer(dtDetailCat);
            hiddenEditCatData.Value = strJsonCat;

            DataTable dtDetailGroup = new DataTable();
            dtDetailGroup.Columns.Add("BRID", typeof(string));
            dtDetailGroup.Columns.Add("BRNAME", typeof(string));
            dtDetailGroup.Columns.Add("BRGRSAMNT", typeof(string));
            dtDetailGroup.Columns.Add("DISCMOD", typeof(string));
            dtDetailGroup.Columns.Add("DISCVAL", typeof(string));
            dtDetailGroup.Columns.Add("DISCAMNT", typeof(string));
            dtDetailGroup.Columns.Add("NETAMNT", typeof(string));
            if (dtQtnDtlGroup.Rows.Count > 0)
            {
                foreach (DataRow dtBr in dtQtnDtlGroup.Rows)
                {
                    DataRow drDtlBr = dtDetailGroup.NewRow();
                    drDtlBr["BRID"] = Convert.ToInt32(dtBr["QUOTNDTLGRP_ID"].ToString());
                    drDtlBr["BRNAME"] = dtBr["QTNDTLGRP_NAME"].ToString();
                    drDtlBr["BRGRSAMNT"] = Convert.ToDecimal(dtBr["QTNDTLGRP_GROSS_AMT"].ToString());
                    drDtlBr["DISCMOD"] = Convert.ToInt32(dtBr["QTNDTLGRP_BILL_DISC_MODE"].ToString());
                    drDtlBr["DISCVAL"] = Convert.ToDecimal(dtBr["QTNDTLGRP_BILL_DISC_VALUE"].ToString());
                    drDtlBr["DISCAMNT"] = Convert.ToDecimal(dtBr["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString());
                    drDtlBr["NETAMNT"] = Convert.ToDecimal(dtBr["QTNDTLGRP_NET_AMT"].ToString());
                    dtDetailGroup.Rows.Add(drDtlBr);
                }
            }
            else
            {
                DataRow drDtlBr = dtDetailGroup.NewRow();
                drDtlBr["BRID"] = 0;
                drDtlBr["BRNAME"] = 0;
                drDtlBr["BRGRSAMNT"] = Convert.ToDecimal(dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString());
                drDtlBr["DISCMOD"] = Convert.ToInt32(dtQtn.Rows[0]["LDQUOT_BILL_DISC_MODE"].ToString());
                drDtlBr["DISCVAL"] = Convert.ToDecimal(dtQtn.Rows[0]["LDQUOT_BILL_DISC_VALUE"].ToString());
                drDtlBr["DISCAMNT"] = 0;
                drDtlBr["NETAMNT"] = Convert.ToDecimal(dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString());
                dtDetailGroup.Rows.Add(drDtlBr);
            }

            string strJsonGrp = DataTableToJSONWithJavaScriptSerializer(dtDetailGroup);
            hiddenEditdetailgroupData.Value = strJsonGrp;

            DataTable dtDetail = new DataTable();
            dtDetail.Columns.Add("TransId", typeof(int));
            dtDetail.Columns.Add("TransDtlId", typeof(int));
            dtDetail.Columns.Add("ProductName", typeof(string));
            dtDetail.Columns.Add("ProductId", typeof(int));
            dtDetail.Columns.Add("UnitName", typeof(string));
            dtDetail.Columns.Add("UnitId", typeof(int));
            dtDetail.Columns.Add("Quantity", typeof(decimal));
            dtDetail.Columns.Add("CostPrice", typeof(decimal));
            dtDetail.Columns.Add("Hike", typeof(string));
            dtDetail.Columns.Add("Rate", typeof(decimal));
            dtDetail.Columns.Add("TaxName", typeof(string));
            dtDetail.Columns.Add("TaxId", typeof(int));
            dtDetail.Columns.Add("TaxPer", typeof(decimal));
            dtDetail.Columns.Add("TaxAmnt", typeof(decimal));
            dtDetail.Columns.Add("DiscountAmnt", typeof(decimal));
            dtDetail.Columns.Add("Amount", typeof(decimal));
            dtDetail.Columns.Add("AddDesc", typeof(string));
            dtDetail.Columns.Add("StockStatus", typeof(int));
            dtDetail.Columns.Add("StockName", typeof(string));
            dtDetail.Columns.Add("ProductMode", typeof(int));
            dtDetail.Columns.Add("txtProductName", typeof(string));
            //00088
            dtDetail.Columns.Add("PrintSts", typeof(int));
            dtDetail.Columns.Add("ProductCat", typeof(string));
            dtDetail.Columns.Add("ProductWinSts", typeof(string));
            dtDetail.Columns.Add("ProductGroupId", typeof(string));

            DataTable dtAttchmnt = new DataTable();
            dtAttchmnt.Columns.Add("TransDtlId", typeof(int));
            dtAttchmnt.Columns.Add("FileName", typeof(string));
            dtAttchmnt.Columns.Add("ActualFileName", typeof(string));
            dtAttchmnt.Columns.Add("SendSts", typeof(int));



            if (dtQtnDtl.Rows.Count > 0)
            {
                for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                {
                    DataRow drDtl = dtDetail.NewRow();
                    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                    drDtl["ProductName"] = dtQtnDtl.Rows[intcnt]["PRDT CODE_AND_NAME"].ToString();
                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                    {
                        drDtl["ProductId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString());

                    }
                    else
                    {
                        // WHEN CHANGING MODE IT BECOMES NULL
                        drDtl["ProductId"] = 0;
                    }
                    drDtl["UnitName"] = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();
                    drDtl["UnitId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["UOM_ID"].ToString());
                    drDtl["Quantity"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString());
                    drDtl["CostPrice"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString());
                    drDtl["Hike"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                    drDtl["Rate"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString());

                    if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                    {
                        drDtl["TaxName"] = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();
                        drDtl["TaxId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString());
                        drDtl["TaxPer"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString());
                        drDtl["TaxAmnt"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString());
                    }
                    else
                    {
                        drDtl["TaxName"] = "";
                        drDtl["TaxId"] = 0;
                        drDtl["TaxPer"] = 0;
                        drDtl["TaxAmnt"] = 0;

                    }
                    drDtl["DiscountAmnt"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString());
                    drDtl["Amount"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString());

                    drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                    if (dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != "" && dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != null)
                        drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString());
                    else
                        drDtl["StockStatus"] = 0;
                    drDtl["StockName"] = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                    drDtl["PrintSts"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                    drDtl["ProductCat"] = dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString();
                    drDtl["ProductMode"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRDT_MODE"].ToString());
                    drDtl["txtProductName"] = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                    drDtl["ProductWinSts"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_WIN_STS"].ToString();
                    if (dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() != "")
                        drDtl["ProductGroupId"] = dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString();
                    else
                        drDtl["ProductGroupId"] = 0;
                    dtDetail.Rows.Add(drDtl);

                }

                string strJson = DataTableToJSONWithJavaScriptSerializer(dtDetail);
                if (intEditOrView == 1)
                {
                    hiddenEdit.Value = strJson;
                }
                else if (intEditOrView == 2)
                {
                    hiddenView.Value = strJson;
                }
            }
            hiddenFilePath.Value = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            if (dtQtnAttchmnt.Rows.Count > 0)
            {
                for (int intcnt = 0; intcnt < dtQtnAttchmnt.Rows.Count; intcnt++)
                {
                    DataRow drAttch = dtAttchmnt.NewRow();
                    drAttch["TransDtlId"] = dtQtnAttchmnt.Rows[intcnt]["QTFLS_ID"].ToString();
                    drAttch["FileName"] = dtQtnAttchmnt.Rows[intcnt]["QTFLS_FILENAME"].ToString();
                    drAttch["ActualFileName"] = dtQtnAttchmnt.Rows[intcnt]["QTFLS_FLNM_ACT"].ToString();
                    drAttch["SendSts"] = dtQtnAttchmnt.Rows[intcnt]["QTFLS_ATCH_MAIL_STS"].ToString();
                    dtAttchmnt.Rows.Add(drAttch);
                    hiddenAttchmntSlNumber.Value = dtQtnAttchmnt.Rows[intcnt]["QTFLS_SLNUM"].ToString();
                }

                string strJson = DataTableToJSONWithJavaScriptSerializer(dtAttchmnt);
                hiddenEditAttchmnt.Value = strJson;
            }


        }
    }


    public string DataTableToJSONWithJavaScriptSerializer(DataTable table)
    {
        JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
        List<Dictionary<string, object>> parentRow = new List<Dictionary<string, object>>();
        Dictionary<string, object> childRow;
        foreach (DataRow row in table.Rows)
        {
            childRow = new Dictionary<string, object>();
            foreach (DataColumn col in table.Columns)
            {
                childRow.Add(col.ColumnName, row[col]);

            }

            parentRow.Add(childRow);
        }
        return jsSerializer.Serialize(parentRow);
    }
    protected void btnUploadFile_Click(object sender, EventArgs e)
    {
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        clsCommonLibrary objCommon = new clsCommonLibrary();
        // this.Form.Enctype = "multipart/form-data";
        //  Page.Form.Enctype = "multipart/form-data";
        List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
        for (int intCount = 0; intCount < Request.Files.Count; intCount++)
        {

            HttpPostedFile PostedFile = Request.Files[intCount];

            if (PostedFile.ContentLength > 0)
            {
                clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
                string strFileName = System.IO.Path.GetFileName(PostedFile.FileName);

                string strFileExt;

                strFileExt = strFileName.Substring(strFileName.LastIndexOf('.') + 1).ToLower();

                int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.QUOTATION);
                int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                string strImageName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + objEntityQuotation.QuotationId.ToString() + "_" + intCount + "." + strFileExt;
                objEntityQtnDetailsAttchmnt.FileName = strImageName;
                string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                //   PostedFile.SaveAs(Server.MapPath(strImagePath) + objEntityQtnDetailsAttchmnt.FileName);

                //  objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);

                //  PostedFile.SaveAs(Server.MapPath("Files\\") + FileName);

            }

        }



        //if (HiddenField2_FileUpload.Value != "" && HiddenField2_FileUpload.Value != "[]")
        //{
        //    List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
        //    string jsonData = HiddenField2_FileUpload.Value;
        //    string c = jsonData.Replace("\"{", "\\{");
        //    string g = c.Replace("\\", "");
        //    string h = g.Replace("}\"]", "}]");
        //    string i = h.Replace("}\",", "},");
        //    List<clsQtnDataAttchmnt> objQtnDataAttchmntList = new List<clsQtnDataAttchmnt>();
        //    //   UserData  data
        //    objQtnDataAttchmntList = JsonConvert.DeserializeObject<List<clsQtnDataAttchmnt>>(i);


        //    foreach (clsQtnDataAttchmnt objClsQtnDataAttchmnt in objQtnDataAttchmntList)
        //    {
        //        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();

        //        objEntityQtnDetailsAttchmnt.ActualFileName = Convert.ToString(objClsQtnDataAttchmnt.FILEPATH);


        //        objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);

        //    }
        //}
    }





    public class QuotationEntry
    {
        public string strCostPrice;
        public string strTaxId;
        public decimal decTaxPec = 0;
        public string strPrdctDescrptn = "";
    }
    public class QuotationTerms
    {
        public string strTermDescription;

    }

    // this web method is for fetching data based on the item selected n quotation entery screen
    [WebMethod]
    public static QuotationEntry ItemDetails(string corporateId, string organisationId, string ItemId)
    {

        QuotationEntry objQtnEntry = new QuotationEntry();     // CREATE AN OBJECT.

        //Creating objects for business layer
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();


        if (corporateId != null && corporateId != "" && corporateId != "undefined" && organisationId != null && organisationId != "" && organisationId != "undefined" && ItemId != null && ItemId != "" && ItemId != "undefined")
        {
            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(corporateId);
            objEntityQuotation.Organisation_Id = Convert.ToInt32(organisationId);
            objEntityQuotation.Product_Id = Convert.ToInt32(ItemId);
        }

        DataTable dtItmDtl = new DataTable();

        dtItmDtl = objBusinessLayerQuotation.ReadSelctdPrdctDtl(objEntityQuotation);
        if (dtItmDtl.Rows.Count > 0)
        {
            objQtnEntry.strCostPrice = dtItmDtl.Rows[0]["COST_PRICE"].ToString();
            objQtnEntry.strTaxId = dtItmDtl.Rows[0]["TAX_ID"].ToString();
            if (dtItmDtl.Rows[0]["TAX_ID"].ToString() != "" && dtItmDtl.Rows[0]["TAX_PERCENTAGE"].ToString() != "")
            {
                objQtnEntry.decTaxPec = Convert.ToDecimal(dtItmDtl.Rows[0]["TAX_PERCENTAGE"].ToString());

            }
            objQtnEntry.strPrdctDescrptn = dtItmDtl.Rows[0]["PRDT_DESCRIPTION"].ToString();
        }
        return objQtnEntry;
    }
    // this web method is for fetching tax percentage based on the Tax selected in quotation entery screen
    [WebMethod]
    public static QuotationEntry TaxDetails(string corporateId, string organisationId, string TaxId)
    {

        QuotationEntry objQtnEntry = new QuotationEntry();     // CREATE AN OBJECT.

        //Creating objects for business layer
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();


        if (corporateId != null && corporateId != "" && corporateId != "undefined" && organisationId != null && organisationId != "" && organisationId != "undefined" && TaxId != null && TaxId != "" && TaxId != "undefined")
        {
            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(corporateId);
            objEntityQuotation.Organisation_Id = Convert.ToInt32(organisationId);
            objEntityQuotation.TaxId = Convert.ToInt32(TaxId);
        }

        DataTable dtTaxDtl = new DataTable();

        dtTaxDtl = objBusinessLayerQuotation.ReadSelctdTaxDtl(objEntityQuotation);
        if (dtTaxDtl.Rows.Count > 0)
        {
            objQtnEntry.decTaxPec = Convert.ToDecimal(dtTaxDtl.Rows[0]["TAX_PERCENTAGE"].ToString());

        }
        return objQtnEntry;
    }

    // this web method is for fetching Term Details based on the Term selected 
    [WebMethod]
    public static QuotationTerms TermDetails(string corporateId, string organisationId, string TermId)
    {

        QuotationTerms objQtnTerms = new QuotationTerms();     // CREATE AN OBJECT.

        //Creating objects for business layer
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();


        if (corporateId != null && corporateId != "" && corporateId != "undefined" && organisationId != null && organisationId != "" && organisationId != "undefined" && TermId != null && TermId != "" && TermId != "undefined")
        {
            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(corporateId);
            objEntityQuotation.Organisation_Id = Convert.ToInt32(organisationId);
            objEntityQuotation.TermTemplateId = Convert.ToInt32(TermId);
        }

        DataTable dtTermDtl = new DataTable();

        dtTermDtl = objBusinessLayerQuotation.ReadSelectedTermDtl(objEntityQuotation);
        if (dtTermDtl.Rows.Count > 0)
        {
            objQtnTerms.strTermDescription = dtTermDtl.Rows[0]["TRTEMP_DESCRIPTION"].ToString();

        }
        return objQtnTerms;
    }
    public class clsEachFileDeatail
    {
        public string ROWID { get; set; }
        public string EVTACTION { get; set; }
        public string ATCHSTS { get; set; }
        public string UPNAME { get; set; }
        public string DTLID { get; set; }
    }
    protected void btnSave_Click(object sender, EventArgs e)
    {
        try
        {
            if (Request.QueryString["LeadId"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "")
            {

                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.New) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Open))
                {
                    Response.Redirect("~/Default.aspx");
                }




                objEntityQuotation.QuotationDate = System.DateTime.Now;
                objEntityQuotation.QuotnComment = txtComments.Text.Trim();
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(ddlCurrency.SelectedItem.Value);
                objEntityQuotation.PriceTerm = txtPriceTerm.Text.Trim();
                objEntityQuotation.PaymntTerm = txtPymntTerm.Text.Trim();
                objEntityQuotation.ManufacturerTerm = txtManufacturerTerm.Text.Trim();
                objEntityQuotation.DeliveryTerm = txtDlvryTerm.Text.Trim();
                objEntityQuotation.WarrantyTerm = txtWrntyTerm.Text.Trim();
                objEntityQuotation.ValidityTerm = txtValidityTerm.Text.Trim();
                if (cbxSendMail.Checked == true)
                {
                    objEntityQuotation.MailStatus = 1;
                }
                else
                {
                    objEntityQuotation.MailStatus = 0;
                }
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;
                objEntityQuotation.QuotationStatus = 0;
                objEntityQuotation.ApprovedStatus = 0;

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);

                List<clsEntityLayerQuotationDtl> objEntityQtnGrpDtlsList = new List<clsEntityLayerQuotationDtl>();
                string TotalQtngrps = hiddenTotalProductGrpNames.Value;
                string q = TotalQtngrps.Replace("\"{", "\\{");
                string w = q.Replace("\\n", "\r\n");
                string r = w.Replace("\\", "");
                string t = r.Replace("}\"]", "}]");
                string y = t.Replace("}\",", "},");
                List<clsQtnDtlGrpData> objQtnDatagrpList = new List<clsQtnDtlGrpData>();
                //   UserData  data
                objQtnDatagrpList = JsonConvert.DeserializeObject<List<clsQtnDtlGrpData>>(y);
                foreach (clsQtnDtlGrpData objClsQtnGrpData in objQtnDatagrpList)
                {
                    clsEntityLayerQuotationDtl objEntityQtnGrpDtls = new clsEntityLayerQuotationDtl();
                    if (objClsQtnGrpData.EVTACTION == "INS")
                    {
                        objEntityQtnGrpDtls.PrdctGroupName = objClsQtnGrpData.GRPNAME.ToUpper();
                        objEntityQtnGrpDtls.GrpGrossAmnt = Convert.ToDecimal(objClsQtnGrpData.GROSSAMNT);
                        objEntityQtnGrpDtls.GrpNetAmnt = Convert.ToDecimal(objClsQtnGrpData.NETAMOUNT);
                        objEntityQtnGrpDtls.GrpDiscmode = Convert.ToInt32(objClsQtnGrpData.DISCMODE);
                        objEntityQtnGrpDtls.GrpDiscvalue = Convert.ToDecimal(objClsQtnGrpData.DISCVALUE);
                        objEntityQtnGrpDtls.GrpDiscAmount = Convert.ToDecimal(objClsQtnGrpData.DISCAMNT);
                        objEntityQtnGrpDtlsList.Add(objEntityQtnGrpDtls);
                    }

                }

                List<clsEntityLayerQuotationDtl> objEntityQtnDeatilsList = new List<clsEntityLayerQuotationDtl>();
                string jsonData = HiddenField1.Value;
                string c = jsonData.Replace("\"{", "\\{");
                string d = c.Replace("\\n", "\r\n");
                string g = d.Replace("\\", "");
                string h = g.Replace("}\"]", "}]");
                string i = h.Replace("}\",", "},");
                List<clsQtnData> objQtnDataList = new List<clsQtnData>();
                //   UserData  data
                objQtnDataList = JsonConvert.DeserializeObject<List<clsQtnData>>(i);


                foreach (clsQtnData objClsQtnData in objQtnDataList)
                {
                    if (objClsQtnData.PRDCTMODE != "3")
                    {
                        clsEntityLayerQuotationDtl objEntityQtnDetails = new clsEntityLayerQuotationDtl();


                        objEntityQtnDetails.PrdctGrpId = Convert.ToInt32(objClsQtnData.PRDCTGRPID);
                        objEntityQtnDetails.PrdctGroupName = objClsQtnData.PRDCTGRPNAME.ToUpper();
                        objEntityQtnDetails.ProductId = Convert.ToInt32(objClsQtnData.ITEMID);
                        objEntityQtnDetails.UOMId = Convert.ToInt32(objClsQtnData.UNITID);
                        objEntityQtnDetails.Quantity = Convert.ToDecimal(objClsQtnData.QUANTITY);
                        objEntityQtnDetails.CostPrice = Convert.ToDecimal(objClsQtnData.COSTPRICE);

                        objEntityQtnDetails.Hike = objClsQtnData.HIKE;

                        objEntityQtnDetails.Rate = Convert.ToDecimal(objClsQtnData.RATE);
                        objEntityQtnDetails.ItemDiscntAmnt = Convert.ToDecimal(objClsQtnData.DISCAMNT);
                        objEntityQtnDetails.Amount = Convert.ToDecimal(objClsQtnData.AMOUNT);
                        objEntityQtnDetails.StockSts = Convert.ToInt32(objClsQtnData.PRDCTAVAILABLE);
                        objEntityQtnDetails.CancelSts = 0;
                        objEntityQtnDetails.ItemDescription = Convert.ToString(objClsQtnData.ADDITIONAL);

                        objEntityQtnDetails.ProductName = Convert.ToString(objClsQtnData.ITEMNAME);
                        objEntityQtnDetails.ProductMode = Convert.ToInt32(objClsQtnData.PRDCTMODE);
                        objEntityQtnDetails.Print = Convert.ToInt32(objClsQtnData.PRINTED);
                        objEntityQtnDetails.ProductCategory = objClsQtnData.PRDCTCAT.ToUpper();
                        if (hiddenTaxEnabled.Value == "1")
                        {
                            if (objClsQtnData.TAXID != "" && objClsQtnData.TAXID != "--Select Tax--")
                            {
                                objEntityQtnDetails.TaxId = Convert.ToInt32(objClsQtnData.TAXID);
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(objClsQtnData.TAXPERC);
                                objEntityQtnDetails.TaxAmnt = Convert.ToDecimal(objClsQtnData.TAXAMNT);
                            }
                            else
                            {
                                objEntityQtnDetails.TaxId = 0;
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                                objEntityQtnDetails.TaxAmnt = 0;

                            }
                        }
                        else
                        {
                            objEntityQtnDetails.TaxId = 0;
                            objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                            objEntityQtnDetails.TaxAmnt = 0;

                        }
                        objEntityQtnDetails.OrderNumberId = Convert.ToInt32(objClsQtnData.PRDCTORDERID);
                        objEntityQtnDeatilsList.Add(objEntityQtnDetails);
                    }
                }

                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.SectionId = Convert.ToInt32(clsCommonLibrary.Section.QUOTATION);
                objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                string strNextNum = objBusinessLayer.ReadNextNumberWebForUI(objEntityCommon);

                objEntityQuotation.QuotationId = Convert.ToInt32(strNextNum);

                string strSectnAndCorId = objEntityCommon.SectionId.ToString() + objEntityCommon.CorporateID.ToString();
                int intSectnAndCorIdLength = strSectnAndCorId.Length;
                string strRefSerialId = strNextNum.Substring(intSectnAndCorIdLength);
                objEntityQuotation.QtnRefSerialId = Convert.ToInt32(strRefSerialId);

                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(objEntityQuotation.QtnRefSerialId);

                clsCommonLibrary objCommon = new clsCommonLibrary();

                List<clsEachFileDeatail> objAdditionAttachList = new List<clsEachFileDeatail>();
                if (HiddenField2_FileUpload.Value != "" && HiddenField2_FileUpload.Value != null && HiddenField2_FileUpload.Value != "[]")
                {
                    string jsonDataDltAttch = HiddenField2_FileUpload.Value;
                    string strAtt1 = jsonDataDltAttch.Replace("\"{", "\\{");
                    string strAtt2 = strAtt1.Replace("\\", "");
                    string strAtt3 = strAtt2.Replace("}\"]", "}]");
                    string strAtt4 = strAtt3.Replace("}\",", "},");

                    //   UserData  data
                    objAdditionAttachList = JsonConvert.DeserializeObject<List<clsEachFileDeatail>>(strAtt4);
                }



                List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
                int intSlNumbr = 0;
                for (int intCount = 0; intCount < Request.Files.Count; intCount++)
                {
                    int strAttchSts = 0;
                    foreach (clsEachFileDeatail objAdditionAttach in objAdditionAttachList)
                    {
                        HttpPostedFile PostedFileCount = Request.Files[intCount];
                        HttpPostedFile PostedFileName = Request.Files[objAdditionAttach.UPNAME];
                        if (PostedFileCount == PostedFileName)
                        {
                            strAttchSts = Convert.ToInt32(objAdditionAttach.ATCHSTS);
                        }
                    }
                    HttpPostedFile PostedFile = Request.Files[intCount];

                    if (PostedFile.ContentLength > 0)
                    {
                        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
                        string strFileName = System.IO.Path.GetFileName(PostedFile.FileName);
                        objEntityQtnDetailsAttchmnt.ActualFileName = strFileName;
                        string strFileExt;

                        strFileExt = strFileName.Substring(strFileName.LastIndexOf('.') + 1).ToLower();

                        int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.QUOTATION);
                        int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                        objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intSlNumbr;
                        string strImageName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + objEntityQuotation.QuotationId.ToString() + "_" + intSlNumbr + "." + strFileExt;
                        objEntityQtnDetailsAttchmnt.FileName = strImageName;
                        objEntityQtnDetailsAttchmnt.AttchWthMailsts = strAttchSts;
                        string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                        PostedFile.SaveAs(Server.MapPath(strImagePath) + objEntityQtnDetailsAttchmnt.FileName);

                        objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);

                        //  PostedFile.SaveAs(Server.MapPath("Files\\") + FileName);
                        intSlNumbr++;
                    }

                }


                objBusinessLayerQuotation.InsertQuotation(objEntityQuotation, objEntityQtnDeatilsList, objEntityQtnGrpDtlsList, objEntityQtnAttchmntDeatilsList);
                string strRandomLeadId = "";
                if (Request.QueryString["LeadId"] != null)
                {
                    strRandomLeadId = Request.QueryString["LeadId"].ToString();

                }
                string strPrevUrl = "";
                if (Request.QueryString["Prev"] != null)
                {
                    strPrevUrl = Request.QueryString["Prev"].ToString();
                }

                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Save&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Save&Prev=" + strPrevUrl + "");
                }


            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }
        }
        catch (Exception ex)
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
            throw ex;
        }
    }
    public class clsQtnData
    {
        public string ITEMID { get; set; }
        public string ITEMNAME { get; set; }
        public string UNITID { get; set; }
        public string QUANTITY { get; set; }
        public string COSTPRICE { get; set; }
        public string HIKE { get; set; }
        public string RATE { get; set; }
        public string TAXID { get; set; }
        public string TAXPERC { get; set; }
        public string TAXAMNT { get; set; }
        public string DISCAMNT { get; set; }
        public string AMOUNT { get; set; }
        public string ADDITIONAL { get; set; }
        public string PRDCTAVAILABLE { get; set; }
        public string EVTACTION { get; set; }
        public string DTLID { get; set; }
        public string PRDCTMODE { get; set; }
        public string PRINTED { get; set; }

        public string PRDCTCAT { get; set; }
        public string PRDCTGRPID { get; set; }
        public string PRDCTGRPNAME { get; set; }
        public string PRDCTGRPEVT { get; set; }
        public string PRDCTORDERID { get; set; }
    }

    public class clsQtnDtlGrpData
    {
        // public string FILEPATH { get; set; }
        public string GRPNAME { get; set; }
        public string GRPID { get; set; }
        public string GROSSAMNT { get; set; }
        public string DISCMODE { get; set; }
        public string DISCVALUE { get; set; }
        public string DISCAMNT { get; set; }
        public string NETAMOUNT { get; set; }
        public string EVTACTION { get; set; }

    }

    public class clsQtnDataAttchmnt
    {
        // public string FILEPATH { get; set; }
        public string EVTACTION { get; set; }
        public string DTLID { get; set; }

    }
    public class clsQtnDataDELETEAttchmnt
    {
        public string FILENAME { get; set; }

        public string DTLID { get; set; }

    }


    protected void btnUpdate_Click(object sender, EventArgs e)
    {
        try
        {
            if (hiddenQuotationId.Value != "" && hiddenQuotationId.Value != null && hiddenDfltCurrencyMstrId.Value != "" && hiddenDfltCurrencyMstrId.Value != null && Request.QueryString["LeadId"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "")
            {
                clsCommonLibrary objCommon = new clsCommonLibrary();

                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);
                string CategoryName = "";

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Prepared) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Returned) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_ReOpened))
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityQuotation.QuotationDate = objCommon.textToDateTime(hiddenQuotationDate.Value);

                objEntityQuotation.QuotnComment = txtComments.Text.Trim();
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(ddlCurrency.SelectedItem.Value);
                objEntityQuotation.PriceTerm = txtPriceTerm.Text.Trim();
                objEntityQuotation.PaymntTerm = txtPymntTerm.Text.Trim();
                objEntityQuotation.ManufacturerTerm = txtManufacturerTerm.Text.Trim();

                objEntityQuotation.DeliveryTerm = txtDlvryTerm.Text.Trim();
                objEntityQuotation.WarrantyTerm = txtWrntyTerm.Text.Trim();
                objEntityQuotation.ValidityTerm = txtValidityTerm.Text.Trim();

                if (cbxSendMail.Checked == true)
                {
                    objEntityQuotation.MailStatus = 1;
                }
                else
                {
                    objEntityQuotation.MailStatus = 0;
                }
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);




                List<clsEntityLayerQuotationDtl> objEntityQtnGrpDtlsListAdd = new List<clsEntityLayerQuotationDtl>();
                List<clsEntityLayerQuotationDtl> objEntityQtnGrpDtlsListUpdate = new List<clsEntityLayerQuotationDtl>();

                string TotalQtngrps = hiddenTotalProductGrpNames.Value;
                string q = TotalQtngrps.Replace("\"{", "\\{");
                string w = q.Replace("\\n", "\r\n");
                string r = w.Replace("\\", "");
                string t = r.Replace("}\"]", "}]");
                string y = t.Replace("}\",", "},");
                List<clsQtnDtlGrpData> objQtnDatagrpList = new List<clsQtnDtlGrpData>();
                //   UserData  data
                objQtnDatagrpList = JsonConvert.DeserializeObject<List<clsQtnDtlGrpData>>(y);
                foreach (clsQtnDtlGrpData objClsQtnGrpData in objQtnDatagrpList)
                {
                    clsEntityLayerQuotationDtl objEntityQtnGrpDtls = new clsEntityLayerQuotationDtl();
                    if (objClsQtnGrpData.EVTACTION != "")
                    {
                        objEntityQtnGrpDtls.PrdctGrpId = Convert.ToInt32(objClsQtnGrpData.GRPID);
                        objEntityQtnGrpDtls.PrdctGroupName = objClsQtnGrpData.GRPNAME.ToUpper();
                        objEntityQtnGrpDtls.GrpGrossAmnt = Convert.ToDecimal(objClsQtnGrpData.GROSSAMNT);
                        objEntityQtnGrpDtls.GrpNetAmnt = Convert.ToDecimal(objClsQtnGrpData.NETAMOUNT);
                        objEntityQtnGrpDtls.GrpDiscmode = Convert.ToInt32(objClsQtnGrpData.DISCMODE);
                        objEntityQtnGrpDtls.GrpDiscvalue = Convert.ToDecimal(objClsQtnGrpData.DISCVALUE);
                        objEntityQtnGrpDtls.GrpDiscAmount = Convert.ToDecimal(objClsQtnGrpData.DISCAMNT);

                    }
                    //if (objClsQtnGrpData.EVTACTION == "INS")
                    //{
                    //    objEntityQtnGrpDtlsListAdd.Add(objEntityQtnGrpDtls);
                    //}
                    //else
                    //{
                    //    objEntityQtnGrpDtlsListUpdate.Add(objEntityQtnGrpDtls);
                    //}

                    //Start:New Code

                    if (objClsQtnGrpData.EVTACTION == "INS" || (objClsQtnGrpData.EVTACTION == "UPD" && objEntityQtnGrpDtls.PrdctGrpId==0))
                    {
                        objEntityQtnGrpDtlsListAdd.Add(objEntityQtnGrpDtls);
                    }
                    else
                    {
                        objEntityQtnGrpDtlsListUpdate.Add(objEntityQtnGrpDtls);
                    }

                    //End;-New Code

                }


                List<clsEntityLayerQuotationDtl> objEntityQtnDeatilsINSERTList = new List<clsEntityLayerQuotationDtl>();
                List<clsEntityLayerQuotationDtl> objEntityQtnDeatilsUPDATEList = new List<clsEntityLayerQuotationDtl>();
                string jsonData = HiddenField1.Value;
                string c = jsonData.Replace("\"{", "\\{");
                string d = c.Replace("\\n", "\r\n");
                string g = d.Replace("\\", "");
                string h = g.Replace("}\"]", "}]");
                string i = h.Replace("}\",", "},");
                List<clsQtnData> objQtnDataList = new List<clsQtnData>();
                //   UserData  data
                objQtnDataList = JsonConvert.DeserializeObject<List<clsQtnData>>(i);


                foreach (clsQtnData objClsQtnData in objQtnDataList)
                {
                    if (objClsQtnData.PRDCTMODE == "3")
                    {

                        // CategoryName = objClsQtnData.PRDCTCAT;

                    }


                    if (objClsQtnData.EVTACTION == "INS" && objClsQtnData.PRDCTMODE != "3")
                    {
                        clsEntityLayerQuotationDtl objEntityQtnDetails = new clsEntityLayerQuotationDtl();

                        objEntityQtnDetails.ProductId = Convert.ToInt32(objClsQtnData.ITEMID);
                        objEntityQtnDetails.UOMId = Convert.ToInt32(objClsQtnData.UNITID);
                        objEntityQtnDetails.Quantity = Convert.ToDecimal(objClsQtnData.QUANTITY);
                        objEntityQtnDetails.CostPrice = Convert.ToDecimal(objClsQtnData.COSTPRICE);
                        objEntityQtnDetails.Hike = objClsQtnData.HIKE;
                        objEntityQtnDetails.Rate = Convert.ToDecimal(objClsQtnData.RATE);
                        objEntityQtnDetails.ItemDiscntAmnt = Convert.ToDecimal(objClsQtnData.DISCAMNT);
                        objEntityQtnDetails.Amount = Convert.ToDecimal(objClsQtnData.AMOUNT);
                        objEntityQtnDetails.StockSts = Convert.ToInt32(objClsQtnData.PRDCTAVAILABLE);
                        objEntityQtnDetails.CancelSts = 0;
                        objEntityQtnDetails.ItemDescription = Convert.ToString(objClsQtnData.ADDITIONAL);

                        objEntityQtnDetails.ProductName = Convert.ToString(objClsQtnData.ITEMNAME);
                        objEntityQtnDetails.ProductMode = Convert.ToInt32(objClsQtnData.PRDCTMODE);
                        objEntityQtnDetails.Print = Convert.ToInt32(objClsQtnData.PRINTED);
                        objEntityQtnDetails.ProductCategory = objClsQtnData.PRDCTCAT.ToUpper();
                        objEntityQtnDetails.PrdctGroupName = objClsQtnData.PRDCTGRPNAME.ToUpper();
                        if (hiddenTaxEnabled.Value == "1")
                        {
                            if (objClsQtnData.TAXID != "" && objClsQtnData.TAXID != "--Select Tax--")
                            {
                                objEntityQtnDetails.TaxId = Convert.ToInt32(objClsQtnData.TAXID);
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(objClsQtnData.TAXPERC);
                                objEntityQtnDetails.TaxAmnt = Convert.ToDecimal(objClsQtnData.TAXAMNT);
                            }
                            else
                            {
                                objEntityQtnDetails.TaxId = 0;
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                                objEntityQtnDetails.TaxAmnt = 0;

                            }
                        }
                        else
                        {
                            objEntityQtnDetails.TaxId = 0;
                            objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                            objEntityQtnDetails.TaxAmnt = 0;

                        }
                        objEntityQtnDetails.OrderNumberId = Convert.ToInt32(objClsQtnData.PRDCTORDERID);
                        objEntityQtnDeatilsINSERTList.Add(objEntityQtnDetails);
                    }
                    else if (objClsQtnData.EVTACTION == "UPD" && objClsQtnData.PRDCTMODE != "3")
                    {
                        clsEntityLayerQuotationDtl objEntityQtnDetails = new clsEntityLayerQuotationDtl();

                        objEntityQtnDetails.QtnDtl_Id = Convert.ToInt32(objClsQtnData.DTLID);
                        objEntityQtnDetails.ProductId = Convert.ToInt32(objClsQtnData.ITEMID);
                        objEntityQtnDetails.UOMId = Convert.ToInt32(objClsQtnData.UNITID);
                        objEntityQtnDetails.Quantity = Convert.ToDecimal(objClsQtnData.QUANTITY);
                        objEntityQtnDetails.CostPrice = Convert.ToDecimal(objClsQtnData.COSTPRICE);
                        objEntityQtnDetails.Hike = objClsQtnData.HIKE;
                        objEntityQtnDetails.Rate = Convert.ToDecimal(objClsQtnData.RATE);
                        objEntityQtnDetails.ItemDiscntAmnt = Convert.ToDecimal(objClsQtnData.DISCAMNT);
                        objEntityQtnDetails.Amount = Convert.ToDecimal(objClsQtnData.AMOUNT);
                        objEntityQtnDetails.StockSts = Convert.ToInt32(objClsQtnData.PRDCTAVAILABLE);

                        objEntityQtnDetails.ItemDescription = Convert.ToString(objClsQtnData.ADDITIONAL);

                        objEntityQtnDetails.ProductName = Convert.ToString(objClsQtnData.ITEMNAME);
                        objEntityQtnDetails.ProductMode = Convert.ToInt32(objClsQtnData.PRDCTMODE);
                        objEntityQtnDetails.Print = Convert.ToInt32(objClsQtnData.PRINTED);
                        objEntityQtnDetails.ProductCategory = objClsQtnData.PRDCTCAT.ToUpper();
                        objEntityQtnDetails.PrdctGroupName = objClsQtnData.PRDCTGRPNAME.ToUpper();
                        if (hiddenTaxEnabled.Value == "1")
                        {
                            if (objClsQtnData.TAXID != "" && objClsQtnData.TAXID != "--Select Tax--")
                            {
                                objEntityQtnDetails.TaxId = Convert.ToInt32(objClsQtnData.TAXID);
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(objClsQtnData.TAXPERC);
                                objEntityQtnDetails.TaxAmnt = Convert.ToDecimal(objClsQtnData.TAXAMNT);
                            }
                            else
                            {
                                objEntityQtnDetails.TaxId = 0;
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                                objEntityQtnDetails.TaxAmnt = 0;

                            }
                        }
                        else
                        {
                            objEntityQtnDetails.TaxId = 0;
                            objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                            objEntityQtnDetails.TaxAmnt = 0;

                        }
                        objEntityQtnDetails.OrderNumberId = Convert.ToInt32(objClsQtnData.PRDCTORDERID);
                        objEntityQtnDeatilsUPDATEList.Add(objEntityQtnDetails);


                    }
                }


                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);


                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));




                List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntINSERTDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
                int intSlNumbr = 0;
                if (hiddenAttchmntSlNumber.Value != "")
                {
                    intSlNumbr = Convert.ToInt32(hiddenAttchmntSlNumber.Value);
                    intSlNumbr++;

                }
                List<clsEachFileDeatail> objAdditionAttachList = new List<clsEachFileDeatail>();
                if (HiddenField2_FileUpload.Value != "" && HiddenField2_FileUpload.Value != null && HiddenField2_FileUpload.Value != "[]")
                {
                    string jsonDataDltAttch = HiddenField2_FileUpload.Value;
                    string strAtt1 = jsonDataDltAttch.Replace("\"{", "\\{");
                    string strAtt2 = strAtt1.Replace("\\", "");
                    string strAtt3 = strAtt2.Replace("}\"]", "}]");
                    string strAtt4 = strAtt3.Replace("}\",", "},");

                    //   UserData  data
                    objAdditionAttachList = JsonConvert.DeserializeObject<List<clsEachFileDeatail>>(strAtt4);
                }

                for (int intCount = 0; intCount < Request.Files.Count; intCount++)
                {
                    int strAttchSts = 0;
                    foreach (clsEachFileDeatail objAdditionAttach in objAdditionAttachList)
                    {
                        HttpPostedFile PostedFileCount = Request.Files[intCount];
                        HttpPostedFile PostedFileName = Request.Files[objAdditionAttach.UPNAME];
                        if (PostedFileCount == PostedFileName)
                        {
                            strAttchSts = Convert.ToInt32(objAdditionAttach.ATCHSTS);
                        }
                    }
                    HttpPostedFile PostedFile = Request.Files[intCount];

                    if (PostedFile.ContentLength > 0)
                    {
                        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
                        string strFileName = System.IO.Path.GetFileName(PostedFile.FileName);


                        objEntityQtnDetailsAttchmnt.ActualFileName = strFileName;
                        string strFileExt;

                        strFileExt = strFileName.Substring(strFileName.LastIndexOf('.') + 1).ToLower();

                        int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.QUOTATION);
                        int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                        objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intSlNumbr;
                        string strImageName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + objEntityQuotation.QuotationId.ToString() + "_" + intSlNumbr + "." + strFileExt;
                        objEntityQtnDetailsAttchmnt.FileName = strImageName;
                        objEntityQtnDetailsAttchmnt.AttchWthMailsts = strAttchSts;
                        string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                        PostedFile.SaveAs(Server.MapPath(strImagePath) + objEntityQtnDetailsAttchmnt.FileName);

                        objEntityQtnAttchmntINSERTDeatilsList.Add(objEntityQtnDetailsAttchmnt);

                        //  PostedFile.SaveAs(Server.MapPath("Files\\") + FileName);
                        intSlNumbr++;
                    }

                }



                string strChangeStsDtlId = hiddenFileAtchSts.Value;
                if (strChangeStsDtlId != "")
                {

                    string[] strarrChngstsdtlIds = strChangeStsDtlId.Split('|');

                    objBusinessLayerQuotation.ChangeAttachStatus(objEntityQuotation, strarrChngstsdtlIds);
                }

                string strCanclDtlId = "";
                string[] strarrCancldtlIds = strCanclDtlId.Split(',');
                if (hiddenCanclDtlId.Value != "" && hiddenCanclDtlId.Value != null)
                {
                    strCanclDtlId = hiddenCanclDtlId.Value;
                    strarrCancldtlIds = strCanclDtlId.Split(',');

                }

                string strCanclDtlIdGrp = "";
                string[] strarrCancldtlIdsGrp = strCanclDtlIdGrp.Split(',');
                if (hiddenDeletedPrdctGrps.Value != "" && hiddenDeletedPrdctGrps.Value != null)
                {
                    strCanclDtlIdGrp = hiddenDeletedPrdctGrps.Value;
                    strarrCancldtlIdsGrp = strCanclDtlIdGrp.Split(',');
                }
                else
                {
                    if (HiddenCopiedval.Value != "")
                    {
                        DataTable dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);
                        if (dtQtnCatDtl.Rows.Count > 0)
                        {
                            foreach (DataRow dtCat in dtQtnCatDtl.Rows)
                            {
                                if (dtCat["QUOTNDTLGRP_ID"].ToString() != "")
                                {
                                    string strGrpId = dtCat["QUOTNDTLGRP_ID"].ToString();
                                    strCanclDtlIdGrp = strCanclDtlIdGrp + "," + strGrpId;
                                    strarrCancldtlIdsGrp = strCanclDtlIdGrp.Split(',');
                                }
                            }
                        }
                    }
                }

                List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDELETEDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();

                if (hiddenFileCanclDtlId.Value != "" && hiddenFileCanclDtlId.Value != null)
                {
                    string jsonDataDltAttch = hiddenFileCanclDtlId.Value;
                    string strAtt1 = jsonDataDltAttch.Replace("\"{", "\\{");
                    string strAtt2 = strAtt1.Replace("\\", "");
                    string strAtt3 = strAtt2.Replace("}\"]", "}]");
                    string strAtt4 = strAtt3.Replace("}\",", "},");
                    List<clsQtnDataDELETEAttchmnt> objQtnDataDltAttList = new List<clsQtnDataDELETEAttchmnt>();
                    //   UserData  data
                    objQtnDataDltAttList = JsonConvert.DeserializeObject<List<clsQtnDataDELETEAttchmnt>>(strAtt4);


                    foreach (clsQtnDataDELETEAttchmnt objClsQtnDltAttData in objQtnDataDltAttList)
                    {

                        clsEntityLayerQuotationAttchmntDtl objEntityQtnAttDetails = new clsEntityLayerQuotationAttchmntDtl();

                        objEntityQtnAttDetails.QtnAttchmntDtlId = Convert.ToInt32(objClsQtnDltAttData.DTLID);
                        objEntityQtnAttDetails.FileName = Convert.ToString(objClsQtnDltAttData.FILENAME);

                        objEntityQtnAttchmntDELETEDeatilsList.Add(objEntityQtnAttDetails);


                    }
                }
                objBusinessLayerQuotation.UpdateQuotation(objEntityQuotation, objEntityQtnDeatilsINSERTList, objEntityQtnDeatilsUPDATEList, strarrCancldtlIds, objEntityQtnGrpDtlsListAdd, objEntityQtnGrpDtlsListUpdate, strarrCancldtlIdsGrp, objEntityQtnAttchmntINSERTDeatilsList, objEntityQtnAttchmntDELETEDeatilsList);



                //Delete from location
                foreach (clsEntityLayerQuotationAttchmntDtl objAttchDetail in objEntityQtnAttchmntDELETEDeatilsList)
                {

                    string strImgPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                    string imageLocation = strImgPath + objAttchDetail.FileName;
                    if (File.Exists(MapPath(imageLocation)))
                    {
                        File.Delete(MapPath(imageLocation));
                    }
                }

                string strRandomLeadId = "";
                if (Request.QueryString["LeadId"] != null)
                {
                    strRandomLeadId = Request.QueryString["LeadId"].ToString();

                }
                string strPrevUrl = "";
                if (Request.QueryString["Prev"] != null)
                {
                    strPrevUrl = Request.QueryString["Prev"].ToString();
                }
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Upd&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Upd&Prev=" + strPrevUrl + "");
                }




            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }
        }
        catch (Exception ex)
        {

            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
            throw ex;
        }
    }
    protected void btnConfirm_Click(object sender, EventArgs e)
    {
        try
        {

            if (hiddenQuotationId.Value != "" && hiddenQuotationId.Value != null && hiddenDfltCurrencyMstrId.Value != "" && hiddenDfltCurrencyMstrId.Value != null && Request.QueryString["LeadId"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "")
            {
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();


                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }


                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);


                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Prepared) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_ReOpened) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Returned) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending))
                {
                    Response.Redirect("~/Default.aspx");
                }

                objEntityQuotation.QuotationDate = objCommon.textToDateTime(hiddenQuotationDate.Value);
                objEntityQuotation.QuotnComment = txtComments.Text.Trim();
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.PriceTerm = txtPriceTerm.Text.Trim();
                objEntityQuotation.ManufacturerTerm = txtManufacturerTerm.Text.Trim();

                objEntityQuotation.PaymntTerm = txtPymntTerm.Text.Trim();
                objEntityQuotation.DeliveryTerm = txtDlvryTerm.Text.Trim();
                objEntityQuotation.WarrantyTerm = txtWrntyTerm.Text.Trim();
                objEntityQuotation.ValidityTerm = txtValidityTerm.Text.Trim();

                if (cbxSendMail.Checked == true)
                {
                    objEntityQuotation.MailStatus = 1;
                }
                else
                {
                    objEntityQuotation.MailStatus = 0;
                }
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(ddlCurrency.SelectedItem.Value);
                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                List<clsEntityLayerQuotationDtl> objEntityQtnGrpDtlsListAdd = new List<clsEntityLayerQuotationDtl>();
                List<clsEntityLayerQuotationDtl> objEntityQtnGrpDtlsListUpdate = new List<clsEntityLayerQuotationDtl>();

                string TotalQtngrps = hiddenTotalProductGrpNames.Value;
                string q = TotalQtngrps.Replace("\"{", "\\{");
                string w = q.Replace("\\n", "\r\n");
                string r = w.Replace("\\", "");
                string t = r.Replace("}\"]", "}]");
                string y = t.Replace("}\",", "},");
                List<clsQtnDtlGrpData> objQtnDatagrpList = new List<clsQtnDtlGrpData>();
                //   UserData  data
                objQtnDatagrpList = JsonConvert.DeserializeObject<List<clsQtnDtlGrpData>>(y);

                foreach (clsQtnDtlGrpData objClsQtnGrpData in objQtnDatagrpList)
                {
                    clsEntityLayerQuotationDtl objEntityQtnGrpDtls = new clsEntityLayerQuotationDtl();
                    if (objClsQtnGrpData.EVTACTION != "")
                    {
                        objEntityQtnGrpDtls.PrdctGrpId = Convert.ToInt32(objClsQtnGrpData.GRPID);
                        objEntityQtnGrpDtls.PrdctGroupName = objClsQtnGrpData.GRPNAME.ToUpper();
                        objEntityQtnGrpDtls.GrpGrossAmnt = Convert.ToDecimal(objClsQtnGrpData.GROSSAMNT);
                        objEntityQtnGrpDtls.GrpNetAmnt = Convert.ToDecimal(objClsQtnGrpData.NETAMOUNT);
                        objEntityQtnGrpDtls.GrpDiscmode = Convert.ToInt32(objClsQtnGrpData.DISCMODE);
                        objEntityQtnGrpDtls.GrpDiscvalue = Convert.ToDecimal(objClsQtnGrpData.DISCVALUE);
                        objEntityQtnGrpDtls.GrpDiscAmount = Convert.ToDecimal(objClsQtnGrpData.DISCAMNT);

                    }
                    if (objClsQtnGrpData.EVTACTION == "INS" || (objClsQtnGrpData.EVTACTION == "UPD" && objEntityQtnGrpDtls.PrdctGrpId == 0))
                    {
                        objEntityQtnGrpDtlsListAdd.Add(objEntityQtnGrpDtls);
                    }
                    else
                    {
                        objEntityQtnGrpDtlsListUpdate.Add(objEntityQtnGrpDtls);
                    }

                }


                List<clsEntityLayerQuotationDtl> objEntityQtnDeatilsINSERTList = new List<clsEntityLayerQuotationDtl>();
                List<clsEntityLayerQuotationDtl> objEntityQtnDeatilsUPDATEList = new List<clsEntityLayerQuotationDtl>();
                string jsonData = HiddenField1.Value;
                string c = jsonData.Replace("\"{", "\\{");
                string d = c.Replace("\\n", "\r\n");
                string g = d.Replace("\\", "");
                string h = g.Replace("}\"]", "}]");
                string i = h.Replace("}\",", "},");
                List<clsQtnData> objQtnDataList = new List<clsQtnData>();
                //   UserData  data
                objQtnDataList = JsonConvert.DeserializeObject<List<clsQtnData>>(i);


                foreach (clsQtnData objClsQtnData in objQtnDataList)
                {
                    if (objClsQtnData.EVTACTION == "INS" && objClsQtnData.PRDCTMODE != "3")
                    {
                        clsEntityLayerQuotationDtl objEntityQtnDetails = new clsEntityLayerQuotationDtl();

                        objEntityQtnDetails.ProductId = Convert.ToInt32(objClsQtnData.ITEMID);
                        objEntityQtnDetails.UOMId = Convert.ToInt32(objClsQtnData.UNITID);
                        objEntityQtnDetails.Quantity = Convert.ToDecimal(objClsQtnData.QUANTITY);
                        objEntityQtnDetails.CostPrice = Convert.ToDecimal(objClsQtnData.COSTPRICE);
                        objEntityQtnDetails.Hike = objClsQtnData.HIKE;
                        objEntityQtnDetails.Rate = Convert.ToDecimal(objClsQtnData.RATE);
                        objEntityQtnDetails.ItemDiscntAmnt = Convert.ToDecimal(objClsQtnData.DISCAMNT);
                        objEntityQtnDetails.Amount = Convert.ToDecimal(objClsQtnData.AMOUNT);
                        objEntityQtnDetails.StockSts = Convert.ToInt32(objClsQtnData.PRDCTAVAILABLE);
                        objEntityQtnDetails.CancelSts = 0;
                        objEntityQtnDetails.ItemDescription = Convert.ToString(objClsQtnData.ADDITIONAL);

                        objEntityQtnDetails.ProductName = Convert.ToString(objClsQtnData.ITEMNAME);
                        objEntityQtnDetails.ProductMode = Convert.ToInt32(objClsQtnData.PRDCTMODE);
                        objEntityQtnDetails.Print = Convert.ToInt32(objClsQtnData.PRINTED);
                        objEntityQtnDetails.ProductCategory = objClsQtnData.PRDCTCAT.ToUpper();
                        objEntityQtnDetails.PrdctGroupName = objClsQtnData.PRDCTGRPNAME.ToUpper();
                        if (hiddenTaxEnabled.Value == "1")
                        {
                            if (objClsQtnData.TAXID != "" && objClsQtnData.TAXID != "--Select Tax--")
                            {
                                objEntityQtnDetails.TaxId = Convert.ToInt32(objClsQtnData.TAXID);
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(objClsQtnData.TAXPERC);
                                objEntityQtnDetails.TaxAmnt = Convert.ToDecimal(objClsQtnData.TAXAMNT);
                            }
                            else
                            {
                                objEntityQtnDetails.TaxId = 0;
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                                objEntityQtnDetails.TaxAmnt = 0;

                            }
                        }
                        else
                        {
                            objEntityQtnDetails.TaxId = 0;
                            objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                            objEntityQtnDetails.TaxAmnt = 0;

                        }
                        objEntityQtnDetails.OrderNumberId = Convert.ToInt32(objClsQtnData.PRDCTORDERID);
                        objEntityQtnDeatilsINSERTList.Add(objEntityQtnDetails);
                    }
                    else if (objClsQtnData.EVTACTION == "UPD" && objClsQtnData.PRDCTMODE != "3")
                    {
                        clsEntityLayerQuotationDtl objEntityQtnDetails = new clsEntityLayerQuotationDtl();

                        objEntityQtnDetails.QtnDtl_Id = Convert.ToInt32(objClsQtnData.DTLID);
                        objEntityQtnDetails.ProductId = Convert.ToInt32(objClsQtnData.ITEMID);
                        objEntityQtnDetails.UOMId = Convert.ToInt32(objClsQtnData.UNITID);
                        objEntityQtnDetails.Quantity = Convert.ToDecimal(objClsQtnData.QUANTITY);
                        objEntityQtnDetails.CostPrice = Convert.ToDecimal(objClsQtnData.COSTPRICE);
                        objEntityQtnDetails.Hike = objClsQtnData.HIKE;
                        objEntityQtnDetails.Rate = Convert.ToDecimal(objClsQtnData.RATE);
                        objEntityQtnDetails.ItemDiscntAmnt = Convert.ToDecimal(objClsQtnData.DISCAMNT);
                        objEntityQtnDetails.Amount = Convert.ToDecimal(objClsQtnData.AMOUNT);
                        objEntityQtnDetails.StockSts = Convert.ToInt32(objClsQtnData.PRDCTAVAILABLE);

                        objEntityQtnDetails.ItemDescription = Convert.ToString(objClsQtnData.ADDITIONAL);

                        objEntityQtnDetails.ProductName = Convert.ToString(objClsQtnData.ITEMNAME);
                        objEntityQtnDetails.ProductMode = Convert.ToInt32(objClsQtnData.PRDCTMODE);
                        objEntityQtnDetails.Print = Convert.ToInt32(objClsQtnData.PRINTED);
                        objEntityQtnDetails.ProductCategory = objClsQtnData.PRDCTCAT.ToUpper();
                        objEntityQtnDetails.PrdctGroupName = objClsQtnData.PRDCTGRPNAME.ToUpper();
                        if (hiddenTaxEnabled.Value == "1")
                        {
                            if (objClsQtnData.TAXID != "" && objClsQtnData.TAXID != "--Select Tax--")
                            {
                                objEntityQtnDetails.TaxId = Convert.ToInt32(objClsQtnData.TAXID);
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(objClsQtnData.TAXPERC);
                                objEntityQtnDetails.TaxAmnt = Convert.ToDecimal(objClsQtnData.TAXAMNT);
                            }
                            else
                            {
                                objEntityQtnDetails.TaxId = 0;
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                                objEntityQtnDetails.TaxAmnt = 0;

                            }
                        }
                        else
                        {
                            objEntityQtnDetails.TaxId = 0;
                            objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                            objEntityQtnDetails.TaxAmnt = 0;

                        }
                        objEntityQtnDetails.OrderNumberId = Convert.ToInt32(objClsQtnData.PRDCTORDERID);
                        objEntityQtnDeatilsUPDATEList.Add(objEntityQtnDetails);

                    }
                }


                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);

                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));

                List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntINSERTDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
                int intSlNumbr = 0;
                if (hiddenAttchmntSlNumber.Value != "")
                {
                    intSlNumbr = Convert.ToInt32(hiddenAttchmntSlNumber.Value);
                    intSlNumbr++;

                }
                List<clsEachFileDeatail> objAdditionAttachList = new List<clsEachFileDeatail>();
                if (HiddenField2_FileUpload.Value != "" && HiddenField2_FileUpload.Value != null && HiddenField2_FileUpload.Value != "[]")
                {
                    string jsonDataDltAttch = HiddenField2_FileUpload.Value;
                    string strAtt1 = jsonDataDltAttch.Replace("\"{", "\\{");
                    string strAtt2 = strAtt1.Replace("\\", "");
                    string strAtt3 = strAtt2.Replace("}\"]", "}]");
                    string strAtt4 = strAtt3.Replace("}\",", "},");

                    //   UserData  data
                    objAdditionAttachList = JsonConvert.DeserializeObject<List<clsEachFileDeatail>>(strAtt4);
                }
                for (int intCount = 0; intCount < Request.Files.Count; intCount++)
                {
                    int strAttchSts = 0;
                    foreach (clsEachFileDeatail objAdditionAttach in objAdditionAttachList)
                    {
                        HttpPostedFile PostedFileCount = Request.Files[intCount];
                        HttpPostedFile PostedFileName = Request.Files[objAdditionAttach.UPNAME];
                        if (PostedFileCount == PostedFileName)
                        {
                            strAttchSts = Convert.ToInt32(objAdditionAttach.ATCHSTS);
                        }
                    }

                    HttpPostedFile PostedFile = Request.Files[intCount];

                    if (PostedFile.ContentLength > 0)
                    {
                        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
                        string strFileName = System.IO.Path.GetFileName(PostedFile.FileName);
                        objEntityQtnDetailsAttchmnt.ActualFileName = strFileName;
                        string strFileExt;

                        strFileExt = strFileName.Substring(strFileName.LastIndexOf('.') + 1).ToLower();

                        int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.QUOTATION);
                        int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                        objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intSlNumbr;
                        string strImageName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + objEntityQuotation.QuotationId.ToString() + "_" + intSlNumbr + "." + strFileExt;
                        objEntityQtnDetailsAttchmnt.FileName = strImageName;
                        objEntityQtnDetailsAttchmnt.AttchWthMailsts = strAttchSts;
                        string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                        PostedFile.SaveAs(Server.MapPath(strImagePath) + objEntityQtnDetailsAttchmnt.FileName);

                        objEntityQtnAttchmntINSERTDeatilsList.Add(objEntityQtnDetailsAttchmnt);

                        intSlNumbr++;
                    }

                }
                string strChangeStsDtlId = hiddenFileAtchSts.Value;
                if (strChangeStsDtlId != "")
                {

                    string[] strarrChngstsdtlIds = strChangeStsDtlId.Split('|');

                    objBusinessLayerQuotation.ChangeAttachStatus(objEntityQuotation, strarrChngstsdtlIds);
                }
                string strCanclDtlIdGrp = "";
                string[] strarrCancldtlIdsGrp = strCanclDtlIdGrp.Split(',');
                if (hiddenDeletedPrdctGrps.Value != "" && hiddenDeletedPrdctGrps.Value != null)
                {
                    strCanclDtlIdGrp = hiddenDeletedPrdctGrps.Value;
                    strarrCancldtlIdsGrp = strCanclDtlIdGrp.Split(',');
                }
                else
                {
                    if (HiddenCopiedval.Value != "")
                    {
                        DataTable dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);
                        if (dtQtnCatDtl.Rows.Count > 0)
                        {
                            foreach (DataRow dtCat in dtQtnCatDtl.Rows)
                            {
                                if (dtCat["QUOTNDTLGRP_ID"].ToString() != "")
                                {
                                    string strGrpId = dtCat["QUOTNDTLGRP_ID"].ToString();
                                    strCanclDtlIdGrp = strCanclDtlIdGrp + "," + strGrpId;
                                    strarrCancldtlIdsGrp = strCanclDtlIdGrp.Split(',');
                                }
                            }
                        }
                    }
                }

                string strCanclDtlId = "";
                string[] strarrCancldtlIds = strCanclDtlId.Split(',');
                if (hiddenCanclDtlId.Value != "" && hiddenCanclDtlId.Value != null)
                {
                    strCanclDtlId = hiddenCanclDtlId.Value;
                    strarrCancldtlIds = strCanclDtlId.Split(',');

                }

                List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDELETEDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();

                if (hiddenFileCanclDtlId.Value != "" && hiddenFileCanclDtlId.Value != null)
                {
                    string jsonDataDltAttch = hiddenFileCanclDtlId.Value;
                    string strAtt1 = jsonDataDltAttch.Replace("\"{", "\\{");
                    string strAtt2 = strAtt1.Replace("\\", "");
                    string strAtt3 = strAtt2.Replace("}\"]", "}]");
                    string strAtt4 = strAtt3.Replace("}\",", "},");
                    List<clsQtnDataDELETEAttchmnt> objQtnDataDltAttList = new List<clsQtnDataDELETEAttchmnt>();
                    //   UserData  data
                    objQtnDataDltAttList = JsonConvert.DeserializeObject<List<clsQtnDataDELETEAttchmnt>>(strAtt4);


                    foreach (clsQtnDataDELETEAttchmnt objClsQtnDltAttData in objQtnDataDltAttList)
                    {

                        clsEntityLayerQuotationAttchmntDtl objEntityQtnAttDetails = new clsEntityLayerQuotationAttchmntDtl();

                        objEntityQtnAttDetails.QtnAttchmntDtlId = Convert.ToInt32(objClsQtnDltAttData.DTLID);
                        objEntityQtnAttDetails.FileName = Convert.ToString(objClsQtnDltAttData.FILENAME);

                        objEntityQtnAttchmntDELETEDeatilsList.Add(objEntityQtnAttDetails);


                    }
                }
                objBusinessLayerQuotation.ConfirmQuotation(objEntityQuotation, objEntityQtnDeatilsINSERTList, objEntityQtnDeatilsUPDATEList, strarrCancldtlIds, objEntityQtnGrpDtlsListAdd, objEntityQtnGrpDtlsListUpdate, strarrCancldtlIdsGrp, objEntityQtnAttchmntINSERTDeatilsList, objEntityQtnAttchmntDELETEDeatilsList);

                //Delete from location
                foreach (clsEntityLayerQuotationAttchmntDtl objAttchDetail in objEntityQtnAttchmntDELETEDeatilsList)
                {

                    string strImgPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                    string imageLocation = strImgPath + objAttchDetail.FileName;
                    if (File.Exists(MapPath(imageLocation)))
                    {
                        File.Delete(MapPath(imageLocation));
                    }
                }

                //start mail sending on conirmation to team head


                int intMailSendSucessFullSend = 1;//show msg only on unsuccessfull send

                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();

                objEntityLead.LeadId = objEntityQuotation.Lead_Id;

                objEntityLead.User_Id = intUserId;


                objEntityQuotation.Lead_Id = Convert.ToInt32(HiddenLeadId.Value);
                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                DataTable dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                //DataTable dtUserDetails = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                if (dtFromMail.Rows.Count > 0 && dtTeamHeadDtl.Rows.Count > 0)
                {
                    clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                    objEntityMail.Email_Subject = " APPROVAL PENDING Enquiry - ";
                    objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtTeamHeadDtl.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                    string StrMailContent = "Dear " + dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                    if (lblTitle.Text == "")
                    {
                        StrMailContent = StrMailContent + " I would like to request Approval for the Approval Pending Quotation " + Environment.NewLine + Environment.NewLine;
                    }
                    else
                    {
                        StrMailContent = StrMailContent + "I would like to request Approval for the Approval Pending Quotation for " + lblTitle.Text + Environment.NewLine + Environment.NewLine;
                    }
                    StrMailContent = StrMailContent + "Quotation Reference Number: " + lblRefNumbr.Text + Environment.NewLine + Environment.NewLine;

                    objEntityMail.Email_Content = StrMailContent + "Thanking you and looking forward for your Approval." + Environment.NewLine;

                    objEntityMail.To_Email_Address = dtTeamHeadDtl.Rows[0]["USR_EMAIL"].ToString();
                    objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                    objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                    objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                    objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                    objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                    objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                    objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;
                    objEntityMail.User_Id = objEntityLead.User_Id;


                    objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                    objEntityMail.D_Date = System.DateTime.Now;



                    List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                    List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                    List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                    //if (dtUserDetails.Rows.Count > 0)
                    //{
                    //    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                    //    objEntityMailCcBCc.BCcMail = dtUserDetails.Rows[0]["USR_EMAIL"].ToString();
                    //    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                    //}
                    try
                    {
                        MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                        objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);

                    }
                    catch
                    {
                        intMailSendSucessFullSend = 2;//eeror while sending
                    }
                }
                else
                {
                    intMailSendSucessFullSend = 3;// no proper mail id


                }

                //end mail sending

                string strRandomLeadId = "";
                if (Request.QueryString["LeadId"] != null)
                {
                    strRandomLeadId = Request.QueryString["LeadId"].ToString();

                }
                string strPrevUrl = "";
                if (Request.QueryString["Prev"] != null)
                {
                    strPrevUrl = Request.QueryString["Prev"].ToString();
                }
                if (intMailSendSucessFullSend != 2 && intMailSendSucessFullSend != 3)
                {// if mail send successfully
                    objBusinessLayerQuotation.Update_Adtnl_Mail(objEntityQuotation);
                    if (Request.QueryString["L_MODE"] != null)
                    {

                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Cnfrm&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Cnfrm&Prev=" + strPrevUrl + "");
                    }
                }
                else
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=CnfrmNM&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=CnfrmNM&Prev=" + strPrevUrl + "");
                    }

                }

            }
            else
            {
                Response.Redirect("~/Default.aspx");

            }
        }
        catch( Exception ex)
        {
            throw ex;
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    private void PdfGeneration()
    {
        try
        {
            if (Request.QueryString["LeadId"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationId.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                //000888
                int Printneed = 0;
                string strProductSts = "";
                string strItemDescription = "";
                double dItmDesc = 0;
                //00088 
                string StrComments = "";
                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 10, XFontStyle.Regular);


                //00088
                XFont fontEntryAmntInWords = null;
                fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);


                //  tf.Alignment = XParagraphAlignment.Center;
                //  tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, 170, 555, pdfPage.Height.Point), XStringFormats.TopLeft);

                graph.DrawString("CUSTOMER QUOTATION", font, XBrushes.Black, new XRect(0, 170, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopCenter);

                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "corporate-logo.jpg";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 450, 60);
                    xImg.Dispose();
                }
                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();


                    //00088
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();


                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }


                int intCorpYindex = 70;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, 555, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;

                if (strCorpZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCorpZipCode, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCorpYindex = intCorpYindex + 15;
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpCountry, fontCustmrDtl, XBrushes.Black, new XRect(40, intCorpYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCorpYindex = intCorpYindex + 15;







                int intCstmrYindex = 225;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 360, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REFERENCE NUMBER", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 16;


                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontTermsDtl, 280);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 340, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE", fontRefDate, XBrushes.Black, new XRect(400, intCstmrYindex, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(450, intCstmrYindex, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr2);
                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontTermsDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }

                    intCstmrYindex = intCstmrYindex + 5 + Convert.ToInt32(dCustAddr3);
                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }

                    intCstmrYindex = intCstmrYindex + 15;
                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, intCstmrYindex, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    intCstmrYindex = intCstmrYindex + 15;
                }



                //start
                yPoint = yPoint + 370;
                yLine = yLine + 365;
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                {
                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                    graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                    xImgCurrencySymbl.Dispose();
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNetAmountWithComma + " (As Per List Attached)", fontTermsDtl, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 21;
                yLine = yLine + 21;


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);



                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }
                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }
                string strActUserDtl = "";
                string strActMobDtl = " (Mob. " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    strActUserDtl = strActUserName + strActMobDtl;
                }
                else
                {
                    strActUserDtl = strActUserName;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(162, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 378, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 21 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 21 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 50;
                yLine = yLine + 50;

                if (yPoint >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.DrawString(dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString(), fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 10;
                yLine = yLine + 10;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["DSGN_NAME"].ToString() + " ( " + dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString() + " Division )";
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "You can view the Bill of Materials in the Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 795)
                {
                    pdfPage = pdf.AddPage();
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Note : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint + 1, 380, pdfPage.Height.Point), XStringFormats.TopLeft);



                //stop
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;


                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("BILL OF MATERIALS", fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 253, yPoint - 18.5, 341.5, yPoint - 18.5);
                if (hiddenTaxEnabled.Value == "1")
                {
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                //column line7
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                //intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                            {
                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                            }
                            else
                            {

                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                            }
                            //000888
                            strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                            strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                            Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                            dItmDesc = 0;

                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                            if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                            {
                                strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                            }
                            else
                            {
                                strTaxName = "";
                                strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                //////
                                strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                            }
                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                            //000888
                            if (strItemDescription != "")
                            {
                                int intItemDescLength = strItemDescription.Length;

                                dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                            MaxDescTax:
                                if (dItmDesc > 580 && intItemDescLength > 0)
                                {

                                    strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                    intItemDescLength = strItemDescription.Length;
                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                    goto MaxDescTax;


                                }

                            }

                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                            //000888

                            double dItmsts = 0;
                            dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                            if (strProductSts != "" && strProductSts != "")
                            {
                                strProductSts = "( " + strProductSts + " )";
                                double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            if (Printneed == 1)
                            {
                                if (strItemDescription != "")
                                {
                                    //strItemDescription = "( " + strItemDescription + " )";
                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                    // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                }

                            }

                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point
                            //000888
                            yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);

                            yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);

                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }

                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }


                    //for toatal amount section OF TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 380, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 380, yLine - 25, 380, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    //00088
                    //000888
                    double dItmComments = 0;
                    if (StrComments != "")
                    {
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                        graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        // StrComments
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    //000888
                    yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                    yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                }
                else
                {
                    //NO TAX

                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                    //     tf.Alignment = XParagraphAlignment.Right;
                    //    tf.DrawString("Tax", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;

                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                    if (dtQtnDtl.Rows.Count > 0)
                    {
                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                        {


                            if (yPoint >= 795)
                            {

                                //column line0
                                graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                //column line1
                                graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                                //column line2
                                graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                                //column line3
                                graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                                //column line4
                                graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                                //column line5
                                graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                                //column line6
                                graph.DrawLine(XPens.Black, 555, 65, 555, yLine);



                                pdfPage = pdf.AddPage();
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                //intCounter++;
                            }









                            //    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                            //    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                            if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                            {
                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                            }
                            else
                            {

                                strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                            }
                            //000888
                            strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                            Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());

                            strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                            strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                            strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                            strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                            strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                            strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                            strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                            strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                            strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                            strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                            //     drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                            //000888
                            if (strItemDescription != "")
                            {
                                int intItemDescLength = strItemDescription.Length;

                                dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                            MaxDescTax:
                                if (dItmDesc > 580 && intItemDescLength > 0)
                                {

                                    strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                    intItemDescLength = strItemDescription.Length;
                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                    goto MaxDescTax;


                                }

                            }


                            //   drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_STOCK_STATUS"].ToString());
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;


                            //000888


                            double dItmsts = 0;
                            dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                            if (strProductSts != "" && strProductSts != "")
                            {
                                strProductSts = "( " + strProductSts + " )";
                                double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            if (Printneed == 1)
                            {
                                if (strItemDescription != "")
                                {
                                    //strItemDescription = "( " + strItemDescription + " )";
                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                    // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                }

                            }


                            tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                            //      tf.Alignment = XParagraphAlignment.Right;
                            //     tf.DrawString(strTaxAmount, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                            // pdfPage.Width.Point

                            //000888
                            yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);

                            yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                            //row line
                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                        }

                        //column line0
                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, 65, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, 65, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, 65, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, 65, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, 65, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 555, 65, 555, yLine);




                    }
                    //for toatal amount section OF NO TAX SECTION

                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    if (yPoint >= 795)
                    {
                        pdfPage = pdf.AddPage();
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Right;

                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                        xImgCurrencySymbl.Dispose();
                    }

                    tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    //row line
                    graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);
                    //column line4
                    graph.DrawLine(XPens.Black, 340, yLine - 25, 340, yLine);
                    //column line6
                    graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                    //column line7
                    graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                    //00088
                    //000888
                    double dItmComments = 0;
                    if (StrComments != "")
                    {
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                        graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        // StrComments
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                    yLine = yLine + 22 + Convert.ToInt32(dItmComments);
                }



                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";




                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                //     Process[] _proceses = null;
                //     _proceses = Process.GetProcesses();

                //foreach (Process proces in _proceses)
                //{
                //    if (proces.MainWindowTitle == pdfFilename + " - Adobe Reader")
                //    {
                //        proces.Kill();
                //        
                //    }
                //}

                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
                //  Process.Start(Server.MapPath(strImagePath) + pdfFilename);


            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    protected void ButtonShowPDF_Click(object sender, EventArgs e)
    {
        try
        {
            if (Request.QueryString["LeadId"] != null && hiddenDfltQuotationFormatId.Value != "")
            {
                int intLead_Id = 0;
                int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
                if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
                {
                    PdfGeneration();
                }
                else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
                {
                    PdfAdvancedGeneration();
                }
                else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
                {
                    PdfCorporateAdvancedGeneration();
                }
                else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
                {
                    PdfTermsToLastCorporateAdvancedGeneration();
                }
                clsCommonLibrary objComm = new clsCommonLibrary();
                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                intLead_Id = Convert.ToInt32(strId);
                string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                string strFileName = "Enquiry-" + intLead_Id + "_Quotation.pdf";

                string pageurl = strFilePath + strFileName;
                //   Response.Write( "<script> window.open( '"+pageurl+"','_blank' ); </script>");
                //    Response.End();


                ScriptManager.RegisterStartupScript(this, GetType(), "PreviewPDF", "PreviewPDF('" + pageurl + "');", true);
            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }

    public double MeasureHeight(PdfSharp.Drawing.XGraphics gfx, string text, PdfSharp.Drawing.XFont font, int width)
    {
        var nlines = text.Split('\n');
        var rlines = text.Split('\r');
        int intNline = nlines.Length;
        int intRline = rlines.Length;

        double totalHeight = 0;
        if (intRline > intNline)
        {
            foreach (string line in rlines)
            {
                var size = gfx.MeasureString(line, font);
                double height = size.Height + (size.Height * Math.Floor(size.Width / width));
                if (height == 0)
                {
                    height = Convert.ToDouble(font.Height.ToString());
                }

                totalHeight += height;
            }
        }
        else
        {
            foreach (string line in nlines)
            {
                var size = gfx.MeasureString(line, font);
                double height = size.Height + (size.Height * Math.Floor(size.Width / width));
                if (height == 0)
                {
                    height = Convert.ToDouble(font.Height.ToString());
                }
                totalHeight += height;
            }
        }
        return totalHeight;
    }

    protected void btnApprove_Click(object sender, EventArgs e)
    {
        try
        {
            if (hiddenQuotationId.Value != "" && hiddenQuotationId.Value != null && hiddenDfltCurrencyMstrId.Value != "" && hiddenDfltCurrencyMstrId.Value != null && Request.QueryString["LeadId"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
            {
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }


                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);



                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                //Read user details
                DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending))
                {
                    Response.Redirect("~/Default.aspx");
                }
                objEntityQuotation.QuotationDate = objCommon.textToDateTime(hiddenQuotationDate.Value);
                objEntityQuotation.QuotnComment = txtComments.Text.Trim();
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(ddlCurrency.SelectedItem.Value);
                objEntityQuotation.PriceTerm = txtPriceTerm.Text.Trim();
                objEntityQuotation.ManufacturerTerm = txtManufacturerTerm.Text.Trim();
                objEntityQuotation.PaymntTerm = txtPymntTerm.Text.Trim();
                objEntityQuotation.DeliveryTerm = txtDlvryTerm.Text.Trim();
                objEntityQuotation.WarrantyTerm = txtWrntyTerm.Text.Trim();
                objEntityQuotation.ValidityTerm = txtValidityTerm.Text.Trim();
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(ddlCurrency.SelectedItem.Value);

                if (cbxSendMail.Checked == true)
                {
                    objEntityQuotation.MailStatus = 1;
                }
                else
                {
                    objEntityQuotation.MailStatus = 0;
                }

                int intMailSendSucessFullSend = 1;//show msg only on unseccssfull send
                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();

                objEntityLead.LeadId = objEntityQuotation.Lead_Id;
                objEntityLead.User_Id = intUserId;

                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);

                //for reading Active user information
                DataTable dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
               
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;
                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                List<clsEntityLayerQuotationDtl> objEntityQtnGrpDtlsListAdd = new List<clsEntityLayerQuotationDtl>();
                List<clsEntityLayerQuotationDtl> objEntityQtnGrpDtlsListUpdate = new List<clsEntityLayerQuotationDtl>();

                string TotalQtngrps = hiddenTotalProductGrpNames.Value;
                string q = TotalQtngrps.Replace("\"{", "\\{");
                string w = q.Replace("\\n", "\r\n");
                string r = w.Replace("\\", "");
                string t = r.Replace("}\"]", "}]");
                string y = t.Replace("}\",", "},");
                List<clsQtnDtlGrpData> objQtnDatagrpList = new List<clsQtnDtlGrpData>();
                //   UserData  data
                objQtnDatagrpList = JsonConvert.DeserializeObject<List<clsQtnDtlGrpData>>(y);
                foreach (clsQtnDtlGrpData objClsQtnGrpData in objQtnDatagrpList)
                {
                    clsEntityLayerQuotationDtl objEntityQtnGrpDtls = new clsEntityLayerQuotationDtl();
                    if (objClsQtnGrpData.EVTACTION != "")
                    {
                        objEntityQtnGrpDtls.PrdctGrpId = Convert.ToInt32(objClsQtnGrpData.GRPID);
                        objEntityQtnGrpDtls.PrdctGroupName = objClsQtnGrpData.GRPNAME.ToUpper();
                        objEntityQtnGrpDtls.GrpGrossAmnt = Convert.ToDecimal(objClsQtnGrpData.GROSSAMNT);
                        objEntityQtnGrpDtls.GrpNetAmnt = Convert.ToDecimal(objClsQtnGrpData.NETAMOUNT);
                        objEntityQtnGrpDtls.GrpDiscmode = Convert.ToInt32(objClsQtnGrpData.DISCMODE);
                        objEntityQtnGrpDtls.GrpDiscvalue = Convert.ToDecimal(objClsQtnGrpData.DISCVALUE);
                        objEntityQtnGrpDtls.GrpDiscAmount = Convert.ToDecimal(objClsQtnGrpData.DISCAMNT);

                    }
                    if (objClsQtnGrpData.EVTACTION == "INS" || (objClsQtnGrpData.EVTACTION == "UPD" && objEntityQtnGrpDtls.PrdctGrpId == 0))
                    {
                        objEntityQtnGrpDtlsListAdd.Add(objEntityQtnGrpDtls);
                    }
                    else
                    {
                        objEntityQtnGrpDtlsListUpdate.Add(objEntityQtnGrpDtls);
                    }

                }


                List<clsEntityLayerQuotationDtl> objEntityQtnDeatilsINSERTList = new List<clsEntityLayerQuotationDtl>();
                List<clsEntityLayerQuotationDtl> objEntityQtnDeatilsUPDATEList = new List<clsEntityLayerQuotationDtl>();
                string jsonData = HiddenField1.Value;
                string c = jsonData.Replace("\"{", "\\{");
                string d = c.Replace("\\n", "\r\n");
                string g = d.Replace("\\", "");
                string h = g.Replace("}\"]", "}]");
                string i = h.Replace("}\",", "},");
                List<clsQtnData> objQtnDataList = new List<clsQtnData>();
                //   UserData  data
                objQtnDataList = JsonConvert.DeserializeObject<List<clsQtnData>>(i);


                foreach (clsQtnData objClsQtnData in objQtnDataList)
                {
                    if (objClsQtnData.PRDCTMODE == "3")
                    {

                    }

                    if (objClsQtnData.EVTACTION == "INS" && objClsQtnData.PRDCTMODE != "3")
                    {
                        clsEntityLayerQuotationDtl objEntityQtnDetails = new clsEntityLayerQuotationDtl();

                        objEntityQtnDetails.ProductId = Convert.ToInt32(objClsQtnData.ITEMID);
                        objEntityQtnDetails.UOMId = Convert.ToInt32(objClsQtnData.UNITID);
                        objEntityQtnDetails.Quantity = Convert.ToDecimal(objClsQtnData.QUANTITY);
                        objEntityQtnDetails.CostPrice = Convert.ToDecimal(objClsQtnData.COSTPRICE);
                        objEntityQtnDetails.Hike = objClsQtnData.HIKE;
                        objEntityQtnDetails.Rate = Convert.ToDecimal(objClsQtnData.RATE);
                        objEntityQtnDetails.ItemDiscntAmnt = Convert.ToDecimal(objClsQtnData.DISCAMNT);
                        objEntityQtnDetails.Amount = Convert.ToDecimal(objClsQtnData.AMOUNT);
                        objEntityQtnDetails.StockSts = Convert.ToInt32(objClsQtnData.PRDCTAVAILABLE);
                        objEntityQtnDetails.CancelSts = 0;
                        objEntityQtnDetails.ItemDescription = Convert.ToString(objClsQtnData.ADDITIONAL);

                        objEntityQtnDetails.ProductName = Convert.ToString(objClsQtnData.ITEMNAME);
                        objEntityQtnDetails.ProductMode = Convert.ToInt32(objClsQtnData.PRDCTMODE);
                        objEntityQtnDetails.Print = Convert.ToInt32(objClsQtnData.PRINTED);
                        objEntityQtnDetails.ProductCategory = objClsQtnData.PRDCTCAT.ToUpper();
                        objEntityQtnDetails.PrdctGroupName = objClsQtnData.PRDCTGRPNAME.ToUpper();
                        if (hiddenTaxEnabled.Value == "1")
                        {
                            if (objClsQtnData.TAXID != "" && objClsQtnData.TAXID != "--Select Tax--")
                            {
                                objEntityQtnDetails.TaxId = Convert.ToInt32(objClsQtnData.TAXID);
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(objClsQtnData.TAXPERC);
                                objEntityQtnDetails.TaxAmnt = Convert.ToDecimal(objClsQtnData.TAXAMNT);
                            }
                            else
                            {
                                objEntityQtnDetails.TaxId = 0;
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                                objEntityQtnDetails.TaxAmnt = 0;

                            }
                        }
                        else
                        {
                            objEntityQtnDetails.TaxId = 0;
                            objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                            objEntityQtnDetails.TaxAmnt = 0;

                        }
                        objEntityQtnDetails.OrderNumberId = Convert.ToInt32(objClsQtnData.PRDCTORDERID);
                        objEntityQtnDeatilsINSERTList.Add(objEntityQtnDetails);
                    }
                    else if (objClsQtnData.EVTACTION == "UPD" && objClsQtnData.PRDCTMODE != "3")
                    {
                        clsEntityLayerQuotationDtl objEntityQtnDetails = new clsEntityLayerQuotationDtl();

                        objEntityQtnDetails.QtnDtl_Id = Convert.ToInt32(objClsQtnData.DTLID);
                        objEntityQtnDetails.ProductId = Convert.ToInt32(objClsQtnData.ITEMID);
                        objEntityQtnDetails.UOMId = Convert.ToInt32(objClsQtnData.UNITID);
                        objEntityQtnDetails.Quantity = Convert.ToDecimal(objClsQtnData.QUANTITY);
                        objEntityQtnDetails.CostPrice = Convert.ToDecimal(objClsQtnData.COSTPRICE);
                        objEntityQtnDetails.Hike = objClsQtnData.HIKE;
                        objEntityQtnDetails.Rate = Convert.ToDecimal(objClsQtnData.RATE);
                        objEntityQtnDetails.ItemDiscntAmnt = Convert.ToDecimal(objClsQtnData.DISCAMNT);
                        objEntityQtnDetails.Amount = Convert.ToDecimal(objClsQtnData.AMOUNT);
                        objEntityQtnDetails.StockSts = Convert.ToInt32(objClsQtnData.PRDCTAVAILABLE);

                        objEntityQtnDetails.ItemDescription = Convert.ToString(objClsQtnData.ADDITIONAL);

                        objEntityQtnDetails.ProductName = Convert.ToString(objClsQtnData.ITEMNAME);
                        objEntityQtnDetails.ProductMode = Convert.ToInt32(objClsQtnData.PRDCTMODE);
                        objEntityQtnDetails.Print = Convert.ToInt32(objClsQtnData.PRINTED);
                        objEntityQtnDetails.ProductCategory = objClsQtnData.PRDCTCAT.ToUpper();
                        objEntityQtnDetails.PrdctGroupName = objClsQtnData.PRDCTGRPNAME.ToUpper();
                        if (hiddenTaxEnabled.Value == "1")
                        {
                            if (objClsQtnData.TAXID != "" && objClsQtnData.TAXID != "--Select Tax--")
                            {
                                objEntityQtnDetails.TaxId = Convert.ToInt32(objClsQtnData.TAXID);
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(objClsQtnData.TAXPERC);
                                objEntityQtnDetails.TaxAmnt = Convert.ToDecimal(objClsQtnData.TAXAMNT);
                            }
                            else
                            {
                                objEntityQtnDetails.TaxId = 0;
                                objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                                objEntityQtnDetails.TaxAmnt = 0;

                            }
                        }
                        else
                        {
                            objEntityQtnDetails.TaxId = 0;
                            objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(0);
                            objEntityQtnDetails.TaxAmnt = 0;

                        }
                        objEntityQtnDetails.OrderNumberId = Convert.ToInt32(objClsQtnData.PRDCTORDERID);
                        objEntityQtnDeatilsUPDATEList.Add(objEntityQtnDetails);


                    }
                }

                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);


                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));

                List<clsEachFileDeatail> objAdditionAttachList = new List<clsEachFileDeatail>();
                if (HiddenField2_FileUpload.Value != "" && HiddenField2_FileUpload.Value != null && HiddenField2_FileUpload.Value != "[]")
                {
                    string jsonDataDltAttch = HiddenField2_FileUpload.Value;
                    string strAtt1 = jsonDataDltAttch.Replace("\"{", "\\{");
                    string strAtt2 = strAtt1.Replace("\\", "");
                    string strAtt3 = strAtt2.Replace("}\"]", "}]");
                    string strAtt4 = strAtt3.Replace("}\",", "},");

                    //   UserData  data
                    objAdditionAttachList = JsonConvert.DeserializeObject<List<clsEachFileDeatail>>(strAtt4);
                }

                List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntINSERTDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
                int intSlNumbr = 0;
                if (hiddenAttchmntSlNumber.Value != "")
                {
                    intSlNumbr = Convert.ToInt32(hiddenAttchmntSlNumber.Value);
                    intSlNumbr++;

                }
                for (int intCount = 0; intCount < Request.Files.Count; intCount++)
                {
                    int strAttchSts = 0;
                    foreach (clsEachFileDeatail objAdditionAttach in objAdditionAttachList)
                    {
                        HttpPostedFile PostedFileCount = Request.Files[intCount];
                        HttpPostedFile PostedFileName = Request.Files[objAdditionAttach.UPNAME];
                        if (PostedFileCount == PostedFileName)
                        {
                            strAttchSts = Convert.ToInt32(objAdditionAttach.ATCHSTS);
                        }
                    }
                    HttpPostedFile PostedFile = Request.Files[intCount];

                    if (PostedFile.ContentLength > 0)
                    {
                        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
                        string strFileName = System.IO.Path.GetFileName(PostedFile.FileName);
                        objEntityQtnDetailsAttchmnt.ActualFileName = strFileName;
                        string strFileExt;

                        strFileExt = strFileName.Substring(strFileName.LastIndexOf('.') + 1).ToLower();

                        int intAppModSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.Section.QUOTATION);
                        int intImageSection = Convert.ToInt32(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                        objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = intSlNumbr;
                        string strImageName = intAppModSection.ToString() + "_" + intImageSection.ToString() + "_" + objEntityQuotation.QuotationId.ToString() + "_" + intSlNumbr + "." + strFileExt;
                        objEntityQtnDetailsAttchmnt.FileName = strImageName;
                        objEntityQtnDetailsAttchmnt.AttchWthMailsts = strAttchSts;
                        string strImagePath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                        PostedFile.SaveAs(Server.MapPath(strImagePath) + objEntityQtnDetailsAttchmnt.FileName);

                        objEntityQtnAttchmntINSERTDeatilsList.Add(objEntityQtnDetailsAttchmnt);

                        //  PostedFile.SaveAs(Server.MapPath("Files\\") + FileName);
                        intSlNumbr++;
                    }

                }
                string strChangeStsDtlId = hiddenFileAtchSts.Value;
                if (strChangeStsDtlId != "")
                {

                    string[] strarrChngstsdtlIds = strChangeStsDtlId.Split('|');

                    objBusinessLayerQuotation.ChangeAttachStatus(objEntityQuotation, strarrChngstsdtlIds);
                }
                string strCanclDtlIdGrp = "";
                string[] strarrCancldtlIdsGrp = strCanclDtlIdGrp.Split(',');
                if (hiddenDeletedPrdctGrps.Value != "" && hiddenDeletedPrdctGrps.Value != null)
                {
                    strCanclDtlIdGrp = hiddenDeletedPrdctGrps.Value;
                    strarrCancldtlIdsGrp = strCanclDtlIdGrp.Split(',');
                }
                else
                {
                    if (HiddenCopiedval.Value != "")
                    {
                        DataTable dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);
                        if (dtQtnCatDtl.Rows.Count > 0)
                        {
                            foreach (DataRow dtCat in dtQtnCatDtl.Rows)
                            {
                                if (dtCat["QUOTNDTLGRP_ID"].ToString() != "")
                                {
                                    string strGrpId = dtCat["QUOTNDTLGRP_ID"].ToString();
                                    strCanclDtlIdGrp = strCanclDtlIdGrp + "," + strGrpId;
                                    strarrCancldtlIdsGrp = strCanclDtlIdGrp.Split(',');
                                }
                            }
                        }
                    }
                }

                string strCanclDtlId = "";
                string[] strarrCancldtlIds = strCanclDtlId.Split(',');
                if (hiddenCanclDtlId.Value != "" && hiddenCanclDtlId.Value != null)
                {
                    strCanclDtlId = hiddenCanclDtlId.Value;
                    strarrCancldtlIds = strCanclDtlId.Split(',');

                }

                List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDELETEDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();

                if (hiddenFileCanclDtlId.Value != "" && hiddenFileCanclDtlId.Value != null)
                {
                    string jsonDataDltAttch = hiddenFileCanclDtlId.Value;
                    string strAtt1 = jsonDataDltAttch.Replace("\"{", "\\{");
                    string strAtt2 = strAtt1.Replace("\\", "");
                    string strAtt3 = strAtt2.Replace("}\"]", "}]");
                    string strAtt4 = strAtt3.Replace("}\",", "},");
                    List<clsQtnDataDELETEAttchmnt> objQtnDataDltAttList = new List<clsQtnDataDELETEAttchmnt>();
                    //   UserData  data
                    objQtnDataDltAttList = JsonConvert.DeserializeObject<List<clsQtnDataDELETEAttchmnt>>(strAtt4);


                    foreach (clsQtnDataDELETEAttchmnt objClsQtnDltAttData in objQtnDataDltAttList)
                    {

                        clsEntityLayerQuotationAttchmntDtl objEntityQtnAttDetails = new clsEntityLayerQuotationAttchmntDtl();

                        objEntityQtnAttDetails.QtnAttchmntDtlId = Convert.ToInt32(objClsQtnDltAttData.DTLID);
                        objEntityQtnAttDetails.FileName = Convert.ToString(objClsQtnDltAttData.FILENAME);

                        objEntityQtnAttchmntDELETEDeatilsList.Add(objEntityQtnAttDetails);


                    }


                }
                objBusinessLayerQuotation.ApproveQuotation(objEntityQuotation, objEntityQtnDeatilsINSERTList, objEntityQtnDeatilsUPDATEList, strarrCancldtlIds, objEntityQtnGrpDtlsListAdd, objEntityQtnGrpDtlsListUpdate, strarrCancldtlIdsGrp, objEntityQtnAttchmntINSERTDeatilsList, objEntityQtnAttchmntDELETEDeatilsList);





                if (dtActvUsrDtl.Rows.Count > 0 && dtFromMail.Rows.Count > 0)
                {
                    if (dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString() != "")
                    {
                        clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                        objEntityMail.Email_Subject = "Request Approved";
                        objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                        clsEntityCommon objEntityCommon = new clsEntityCommon();
                        objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                        objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                        objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                        DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);

                        string StrMailContent = "Dear " + dtActvUsrDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                        StrMailContent = StrMailContent + "We are pleased to inform you that we had approved the quotation." + Environment.NewLine + Environment.NewLine;
                        StrMailContent = StrMailContent + "Quotation Reference Number." + lblRefNumbr.Text + Environment.NewLine + Environment.NewLine;

                        StrMailContent = StrMailContent + "Thanking you." + Environment.NewLine;
                        objEntityMail.Email_Content = StrMailContent;
                        objEntityMail.To_Email_Address = dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                        objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                        objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                        objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                        objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                        objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                        objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                        objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

                        List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                        List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                        List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                        try
                        {
                            MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                            objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);

                        }
                        catch
                        {
                        }
                    }
                }

                if (cbxSendMail.Checked == true)
                {
                    if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
                    {
                        //for sending additional files
                        int intQid = Convert.ToInt32(hiddenQuotationId.Value);
                        objEntityLead.Quotation_Id = intQid;
                        objEntityLead.QtnFile_Type = 1;
                        DataTable dtQtnAtchmntDtl = new DataTable();
                        dtQtnAtchmntDtl = objBusinessLayerIndividual.ReadQuotationAttchmnt(objEntityLead);
                        string strFilePathAddtn = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);


                        clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                        objEntityMail.Email_Subject = "Enquiry - ";
                        objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                        clsEntityCommon objEntityCommon = new clsEntityCommon();
                        objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                        objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                        objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                        DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);

                        string StrMailContent = "Dear " + lblCustomerName.Text + " ," + Environment.NewLine + Environment.NewLine;

                        if (lblTitle.Text == "")
                        {
                            StrMailContent = StrMailContent + "Please find attached Quotation " + Environment.NewLine + Environment.NewLine;
                        }
                        else
                        {
                            StrMailContent = StrMailContent + "Please find attached Quotation for " + lblTitle.Text + Environment.NewLine + Environment.NewLine;
                        }
                        StrMailContent = StrMailContent + "Quotation Reference Number: " + lblRefNumbr.Text + Environment.NewLine + Environment.NewLine;
                        if (dtMailContent.Rows.Count > 0)
                        {
                            StrMailContent = StrMailContent + dtMailContent.Rows[0]["CMTMPLT_MESSAGE"].ToString() + Environment.NewLine;
                        }
                        else
                        {
                            StrMailContent = StrMailContent + "" + Environment.NewLine;
                        }

                        if (dtQtnAtchmntDtl.Rows.Count > 0)
                        {
                            StrMailContent = StrMailContent + "You can find the additional files in the attachment. " + Environment.NewLine;
                        }
                        objEntityMail.Email_Content = StrMailContent;
                        objEntityMail.To_Email_Address = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();
                        objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                        objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                        objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                        objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                        objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                        objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                        objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;
                        objEntityMail.User_Id = objEntityLead.User_Id;

                        objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                        objEntityMail.D_Date = System.DateTime.Now;

                        List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();

                        int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
                        if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
                        {
                            PdfGeneration();
                        }
                        else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
                        {
                            PdfAdvancedGeneration();
                        }
                        else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
                        {
                            PdfCorporateAdvancedGeneration();
                        }
                        else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
                        {
                            PdfTermsToLastCorporateAdvancedGeneration();
                        }

                        clsCommonLibrary objComm = new clsCommonLibrary();
                        string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                        string strFileName = "Enquiry-" + objEntityQuotation.Lead_Id + "_Quotation.pdf";
                        string strFileLocation = strFilePath + strFileName;
                        if (File.Exists(Server.MapPath(strFileLocation)))
                        {
                            clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                            objEntityAttach.Email_Real_Name = strFileName;
                            objEntityAttach.Email_File_Name = strFileName;
                            objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                            objEntityMailAttachList.Add(objEntityAttach);
                        }




                        if (dtQtnAtchmntDtl.Rows.Count > 0)
                        {
                            for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                            {
                                string strFileNameAddtn = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                                string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                                string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                                string MailSndSts = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ATCH_MAIL_STS"].ToString();
                                string strFileLocationAddtnl = strFilePathAddtn + strFileNameAddtn;
                                if (MailSndSts.ToString() == "1")
                                {
                                    clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                                    objEntityAttach.Email_Real_Name = strActualFileName;
                                    objEntityAttach.Email_File_Name = strFileNameAddtn;
                                    objEntityAttach.Attch_Path = Server.MapPath(strFileLocationAddtnl);
                                    objEntityMailAttachList.Add(objEntityAttach);
                                }
                            }
                        }

                        List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                        List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                        if (dtAdtnlMail.Rows.Count > 0)
                        {
                            string strToFullId = dtAdtnlMail.Rows[0]["TO_MAIL"].ToString();
                            if (strToFullId != "" && strToFullId != null)
                            {
                                string[] strToSplitId = strToFullId.Split(',');
                                int intSplitCountTo = strToSplitId.Length;


                                for (int intCount = 0; intCount < intSplitCountTo; intCount++)
                                {
                                    classEntityToMailAddress objEntityToMailAddress = new classEntityToMailAddress();
                                    objEntityToMailAddress.ToAddress = strToSplitId[intCount].ToString().Trim();
                                    objEntityToMailAddressList.Add(objEntityToMailAddress);
                                }
                            }

                            string strCcFullId = dtAdtnlMail.Rows[0]["CC_MAIL"].ToString();
                            if (strCcFullId != "" && strCcFullId != null)
                            {
                                string[] strCCSplitId = strCcFullId.Split(',');
                                int intSplitCountCc = strCCSplitId.Length;

                                for (int intCount = 0; intCount < intSplitCountCc; intCount++)
                                {
                                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                                    objEntityMailCcBCc.CcMail = strCCSplitId[intCount].ToString().Trim();
                                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                                }
                            }
                            string strBCcFullId = dtAdtnlMail.Rows[0]["BCC_MAIL"].ToString();
                            if (strBCcFullId != "" && strBCcFullId != null)
                            {
                                string[] strBCCSplitId = strBCcFullId.Split(',');
                                int intSplitCountBCc = strBCCSplitId.Length;
                                for (int intCount = 0; intCount < intSplitCountBCc; intCount++)
                                {
                                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                                    objEntityMailCcBCc.BCcMail = strBCCSplitId[intCount].ToString().Trim();
                                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                                }
                            }
                        }
                        else
                        {
                            foreach (DataRow row in dtToMail.Rows)
                            {
                                if (row["LDCNT_MAIL_ALWD"].ToString() == "1")
                                {
                                    clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                                    objEntityMailCcBCc.CcMail = row["LDCNT_EMAIL"].ToString();
                                    objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                                }

                            }

                        }
                        if (dtActvUsrDtl.Rows.Count > 0 && dtFromMail.Rows.Count > 0)
                        {
                            if (dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString() != "")
                            {
                                classEntityToMailAddress objEntityToMailAddress = new classEntityToMailAddress();
                                objEntityToMailAddress.ToAddress = dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString().Trim();
                                objEntityToMailAddressList.Add(objEntityToMailAddress);
                            }
                        }
                        try
                        {
                            MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                            objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);
                            //passing 1 for sucessfull mail send
                            objEntityQuotation.MailStatus = 1;
                        }
                        catch
                        {
                            intMailSendSucessFullSend = 2;//eeror while sending
                            //passing 2 for lost mail send
                            objEntityQuotation.MailStatus = 0;
                        }
                    }
                    else
                    {
                        intMailSendSucessFullSend = 3;// no proper mail id
                        cbxSendMail.Checked = false;
                        cbxSendMail.Enabled = false;
                        lblEditMailWindow.Visible = false;
                        //lblSendMailError.Text = "(Please Review  E-Mail Settings of-Employee,Division And Customer)";
                        lblSendMailError.Visible = true;
                        objEntityQuotation.MailStatus = 0;

                        btnReSendMail.Visible = false;
                        btnReSendMailTop.Visible = false;
                    }
                }
                else
                {
                    objEntityQuotation.MailStatus = 0;
                }


                //To insert into backup table
                int intBackupID = 0;
                intBackupID = backupAdd();
                if (intBackupID != 0)
                {
                    BackUpEmailOnApprove(intBackupID);
                }

                //Delete from location
                foreach (clsEntityLayerQuotationAttchmntDtl objAttchDetail in objEntityQtnAttchmntDELETEDeatilsList)
                {
                    string strImgPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
                    string imageLocation = strImgPath + objAttchDetail.FileName;
                    if (File.Exists(MapPath(imageLocation)))
                    {
                        File.Delete(MapPath(imageLocation));
                    }
                }

                string strRandomLeadId = "";
                if (Request.QueryString["LeadId"] != null)
                {
                    strRandomLeadId = Request.QueryString["LeadId"].ToString();
                }
                string strPrevUrl = "";
                if (Request.QueryString["Prev"] != null)
                {
                    strPrevUrl = Request.QueryString["Prev"].ToString();
                }
                if (intMailSendSucessFullSend != 2 && intMailSendSucessFullSend != 3)
                {
                    if (objEntityQuotation.MailStatus == 0)
                    {
                        if (Request.QueryString["L_MODE"] != null)
                        {
                            string strL_MODE = Request.QueryString["L_MODE"].ToString();
                            Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Aprv&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                        }
                        else
                        {
                            Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Aprv&Prev=" + strPrevUrl + "");
                        }
                    }
                    else
                    {
                        if (Request.QueryString["L_MODE"] != null)
                        {
                            string strL_MODE = Request.QueryString["L_MODE"].ToString();
                            Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=AprvDlvr&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                        }
                        else
                        {
                            Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=AprvDlvr&Prev=" + strPrevUrl + "");
                        }
                    }
                }
                else
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=AprvNM&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=AprvNM&Prev=" + strPrevUrl + "");
                    }
                }
            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    protected void btnReturn_Click(object sender, EventArgs e)
    {
        try
        {
            if (hiddenQuotationId.Value != "" && hiddenQuotationId.Value != null && Request.QueryString["LeadId"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "")
            {

                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approval_Pending))
                {
                    Response.Redirect("~/Default.aspx");
                }

                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;

                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);

                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));


                objBusinessLayerQuotation.ReturnQuotation(objEntityQuotation);


                clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
                clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();

                objEntityLead.LeadId = objEntityQuotation.Lead_Id;
                objEntityLead.User_Id = intUserId;

                DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
                DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);

                //for reading Active user information
                DataTable dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                if (dtActvUsrDtl.Rows.Count > 0 && dtFromMail.Rows.Count > 0)
                {
                    if (dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString() != "")
                    {
                        clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                        objEntityMail.Email_Subject = "Quotation Approval Request Denied ";
                        objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";


                        string StrMailContent = "Dear " + dtActvUsrDtl.Rows[0]["USR_NAME"].ToString() + " ," + Environment.NewLine + Environment.NewLine;

                        StrMailContent = StrMailContent + "Thank you for submitting detailed quotation. We're sorry to inform you that the request is rejected this time. " + Environment.NewLine + Environment.NewLine;
                        StrMailContent = StrMailContent + "Quotation Reference Number: " + lblRefNumbr.Text + Environment.NewLine + Environment.NewLine;
                        StrMailContent = StrMailContent + "We appreciate you for the time it took for to submit a quotation. we will keep you in mind for the future." + Environment.NewLine + Environment.NewLine;
                        StrMailContent = StrMailContent + "For further clarification please contact your division head ." + Environment.NewLine + Environment.NewLine;
                        StrMailContent = StrMailContent + "Thanking You." + Environment.NewLine + Environment.NewLine;
                        objEntityMail.Email_Content = StrMailContent;
                        objEntityMail.To_Email_Address = dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                        objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                        objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                        objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                        objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                        objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                        objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                        objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

                        List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();
                        List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                        List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                        try
                        {
                            MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                            objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);

                        }
                        catch
                        {
                        }
                    }
                }


                string strRandomLeadId = "";
                if (Request.QueryString["LeadId"] != null)
                {
                    strRandomLeadId = Request.QueryString["LeadId"].ToString();

                }
                string strPrevUrl = "";
                if (Request.QueryString["Prev"] != null)
                {
                    strPrevUrl = Request.QueryString["Prev"].ToString();
                }

                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Rtrn&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Rtrn&Prev=" + strPrevUrl + "");
                }


            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }


    protected void btnReopenReasonSave_Click(object sender, EventArgs e)
    {
        try
        {
            if (hiddenQuotationId.Value != "" && hiddenQuotationId.Value != null && Request.QueryString["LeadId"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenReopenReasonId.Value != null && hiddenReopenReasonId.Value != "")
            {


                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

                objEntityQuotation.ReopenRsn_Id = Convert.ToInt32(hiddenReopenReasonId.Value);
                if (txtReopenReasonDescptn.Text.Trim().Length > 999)
                {
                    objEntityQuotation.ReopenRsnDescrptn = txtReopenReasonDescptn.Text.Trim().Substring(0, 999);

                }
                else
                {
                    objEntityQuotation.ReopenRsnDescrptn = txtReopenReasonDescptn.Text.Trim();
                }
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
                {
                    Response.Redirect("~/Default.aspx");
                }


                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;

                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);

                if (hiddenQtnRevisionVersn.Value != "")
                {
                    int intRevsnVrsn = Convert.ToInt32(hiddenQtnRevisionVersn.Value);
                    intRevsnVrsn = intRevsnVrsn + 1;
                    objEntityQuotation.QtnRevisionVersn = intRevsnVrsn;
                    hiddenQtnRevisionVersn.Value = intRevsnVrsn.ToString();
                }
                else
                {
                    objEntityQuotation.QtnRevisionVersn = 1;
                    hiddenQtnRevisionVersn.Value = "1";
                }



                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));



                objBusinessLayerQuotation.ReOpenQuotation(objEntityQuotation);
                string strRandomLeadId = "";
                if (Request.QueryString["LeadId"] != null)
                {
                    strRandomLeadId = Request.QueryString["LeadId"].ToString();

                }
                string strPrevUrl = "";
                if (Request.QueryString["Prev"] != null)
                {
                    strPrevUrl = Request.QueryString["Prev"].ToString();
                }

                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=ReOpn&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=ReOpn&Prev=" + strPrevUrl + "");
                }


            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }
        }
        catch (Exception EX)
        {
            throw EX;
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }

    }


    protected void btnDelivered_Click(object sender, EventArgs e)
    {
        try
        {
            if (hiddenQuotationId.Value != "" && hiddenQuotationId.Value != null && Request.QueryString["LeadId"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "")
            {

                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                if (Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_Canceled) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Project_On_Hold) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Technical_Submission) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Negotiation) && Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]) != Convert.ToInt32(clsCommonLibrary.LeadStatus.Under_Review))
                {
                    Response.Redirect("~/Default.aspx");
                }


                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;

                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);


                objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));


                objBusinessLayerQuotation.DeliverQuotation(objEntityQuotation);
                string strRandomLeadId = "";
                if (Request.QueryString["LeadId"] != null)
                {
                    strRandomLeadId = Request.QueryString["LeadId"].ToString();

                }
                string strPrevUrl = "";
                if (Request.QueryString["Prev"] != null)
                {
                    strPrevUrl = Request.QueryString["Prev"].ToString();
                }

                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Dlvr&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=Dlvr&Prev=" + strPrevUrl + "");
                }
            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }
    protected void btnReSendMail_Click(object sender, EventArgs e)
    {


        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

        if (Request.QueryString["LeadId"] != null && (hiddenQuotationId.Value != "") && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
        {
            objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);


            objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));

            int intUserId = 0;
            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            if (hiddenOrganisationId.Value == "")
            {
                if (Session["ORGID"] != null)
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                }
                else if (Session["ORGID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
            }
            if (Session["USERID"] != null)
            {
                intUserId = Convert.ToInt32(Session["USERID"]);

            }
            else if (Session["USERID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
            objEntityQuotation.User_Id = intUserId;
            objEntityQuotation.D_Date = System.DateTime.Now;
            string strRandomMixedId = Request.QueryString["LeadId"].ToString();
            string strLenghtofId = strRandomMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomMixedId.Substring(2, intLenghtofId);
            objEntityQuotation.Lead_Id = Convert.ToInt32(strId);
            clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
            objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

            int intLeadStatus = 0;
            if (dtLeadStatus.Rows.Count > 0)
            {
                intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
            }
            if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered))
            {
                Response.Redirect("~/Default.aspx");
            }
            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();


            objEntityLead.LeadId = objEntityQuotation.Lead_Id;



            objEntityLead.User_Id = intUserId;
            objEntityQuotation.Lead_Id = Convert.ToInt32(HiddenLeadId.Value);
            DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
            DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);
            DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
            if (dtFromMail.Rows.Count > 0 && dtToMail.Rows.Count > 0)
            {

                clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
                objEntityMail.Email_Subject = "Enquiry - ";
                objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
                objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

                DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);

                string StrMailContent = "Dear " + lblCustomerName.Text + " ," + Environment.NewLine + Environment.NewLine;

                if (lblTitle.Text == "")
                {
                    StrMailContent = StrMailContent + "Please find attached Quotation " + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    StrMailContent = StrMailContent + "Please find attached Quotation for " + lblTitle.Text + Environment.NewLine + Environment.NewLine;
                }
                StrMailContent = StrMailContent + "Quotation Reference Number: " + lblRefNumbr.Text + Environment.NewLine + Environment.NewLine;
                if (dtMailContent.Rows.Count > 0)
                {

                    objEntityMail.Email_Content = StrMailContent + dtMailContent.Rows[0]["CMTMPLT_MESSAGE"].ToString() + Environment.NewLine;

                }
                else
                {
                    objEntityMail.Email_Content = StrMailContent + "" + Environment.NewLine;
                }
                objEntityMail.To_Email_Address = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();
                objEntityMail.From_Email_Address = dtFromMail.Rows[0]["MLCNFG_EMAIL"].ToString();
                objEntityMail.Out_Service_Name = dtFromMail.Rows[0]["MLCNFG_OUT_SERVICE_NAME"].ToString();
                objEntityMail.Out_Port_Number = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_OUT_PORT_NUMBER"]);
                objEntityMail.SSL_Status = Convert.ToInt32(dtFromMail.Rows[0]["MLCNFG_SSL_STATUS"]);
                objEntityMail.Password = dtFromMail.Rows[0]["MLCNFG_PASSWORD"].ToString();
                objEntityMail.User_Id = objEntityLead.User_Id;
                objEntityMail.Signature = dtFromMail.Rows[0]["MLCNFG_SIGNATURE"].ToString();
                objEntityMail.Email_Content = objEntityMail.Email_Content + objEntityMail.Signature;

                objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
                objEntityMail.D_Date = System.DateTime.Now;



                List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();


                int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
                if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
                {
                    PdfGeneration();
                }
                else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
                {
                    PdfAdvancedGeneration();
                }
                else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
                {
                    PdfCorporateAdvancedGeneration();
                }
                else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
                {
                    PdfTermsToLastCorporateAdvancedGeneration();
                }
                clsCommonLibrary objComm = new clsCommonLibrary();
                string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                string strFileName = "Enquiry-" + objEntityQuotation.Lead_Id + "_Quotation.pdf";
                string strFileLocation = strFilePath + strFileName;
                if (File.Exists(Server.MapPath(strFileLocation)))
                {
                    clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                    objEntityAttach.Email_Real_Name = strFileName;
                    objEntityAttach.Email_File_Name = strFileName;
                    objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                    objEntityMailAttachList.Add(objEntityAttach);
                }

                //for sending additional files
                int intQid = Convert.ToInt32(hiddenQuotationId.Value);
                objEntityLead.Quotation_Id = intQid;
                objEntityLead.QtnFile_Type = 1;
                DataTable dtQtnAtchmntDtl = new DataTable();
                dtQtnAtchmntDtl = objBusinessLayerIndividual.ReadQuotationAttchmnt(objEntityLead);
                string strFilePathAddtn = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                if (dtQtnAtchmntDtl.Rows.Count > 0)
                {
                    for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                    {
                        string strFileNameAddtn = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                        string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                        string strQtnFileId = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ID"].ToString();
                        string MailSndSts = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ATCH_MAIL_STS"].ToString();
                        string strFileLocationAddtnl = strFilePathAddtn + strFileNameAddtn;
                        if (MailSndSts.ToString() == "1")
                        {
                            clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();


                            objEntityAttach.Email_Real_Name = strActualFileName;
                            objEntityAttach.Email_File_Name = strFileNameAddtn;
                            objEntityAttach.Attch_Path = Server.MapPath(strFileLocationAddtnl);
                            objEntityMailAttachList.Add(objEntityAttach);
                        }
                    }
                }

                List<clsEntityMailCcBCc> objEntityMailCcBCcList = new List<clsEntityMailCcBCc>();
                List<classEntityToMailAddress> objEntityToMailAddressList = new List<classEntityToMailAddress>();

                //EVM0012 Fix no countcheck
                if (dtAdtnlMail.Rows.Count > 0)
                {
                    string strToFullId = dtAdtnlMail.Rows[0]["TO_MAIL"].ToString();
                    if (strToFullId != "" && strToFullId != null)
                    {
                        string[] strToSplitId = strToFullId.Split(',');
                        int intSplitCountTo = strToSplitId.Length;


                        for (int intCount = 0; intCount < intSplitCountTo; intCount++)
                        {

                            classEntityToMailAddress objEntityToMailAddress = new classEntityToMailAddress();
                            objEntityToMailAddress.ToAddress = strToSplitId[intCount].ToString().Trim();
                            objEntityToMailAddressList.Add(objEntityToMailAddress);

                        }
                    }

                    string strCcFullId = dtAdtnlMail.Rows[0]["CC_MAIL"].ToString();
                    if (strCcFullId != "" && strCcFullId != null)
                    {
                        string[] strCCSplitId = strCcFullId.Split(',');
                        int intSplitCountCc = strCCSplitId.Length;

                        for (int intCount = 0; intCount < intSplitCountCc; intCount++)
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.CcMail = strCCSplitId[intCount].ToString().Trim();

                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }
                    }
                    string strBCcFullId = dtAdtnlMail.Rows[0]["BCC_MAIL"].ToString();
                    if (strBCcFullId != "" && strBCcFullId != null)
                    {
                        string[] strBCCSplitId = strBCcFullId.Split(',');
                        int intSplitCountBCc = strBCCSplitId.Length;

                        for (int intCount = 0; intCount < intSplitCountBCc; intCount++)
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.BCcMail = strBCCSplitId[intCount].ToString().Trim();
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }
                    }
                }
                else
                {
                    foreach (DataRow row in dtToMail.Rows)
                    {
                        if (row["LDCNT_MAIL_ALWD"].ToString() == "1")
                        {
                            clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                            objEntityMailCcBCc.CcMail = row["LDCNT_EMAIL"].ToString();
                            objEntityMailCcBCcList.Add(objEntityMailCcBCc);
                        }

                    }

                }

               

                try
                {
                    MailUtility_ERP.clsMail objMail = new MailUtility_ERP.clsMail();
                    objMail.SendMail(objEntityMail, objEntityMailAttachList, objEntityMailCcBCcList, objEntityToMailAddressList);

                    objEntityQuotation.MailStatus = 1;
                }
                catch
                {
                    objEntityQuotation.MailStatus = 0;
                }
            }
            else
            {

                cbxSendMail.Checked = false;
                cbxSendMail.Enabled = false;
                lblEditMailWindow.Visible = false;
                //lblSendMailError.Text = "(Please Review  E-Mail Settings of-Employee,Division And Customer)";
                lblSendMailError.Visible = true;
                objEntityQuotation.MailStatus = 0;
            }

            string strPrevUrl = "";
            if (Request.QueryString["Prev"] != null)
            {
                strPrevUrl = Request.QueryString["Prev"].ToString();
            }
            if (objEntityQuotation.MailStatus == 0)
            {
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomMixedId + "&InsUpd=MailNS&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomMixedId + "&InsUpd=MailNS&Prev=" + strPrevUrl + "");
                }

            }
            else
            {
                objBusinessLayerQuotation.ReSendMailQuotation(objEntityQuotation);
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomMixedId + "&InsUpd=Mail&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomMixedId + "&InsUpd=Mail&Prev=" + strPrevUrl + "");
                }

            }


        }
        else
        {

            Response.Redirect("~/Default.aspx");

        }
    }


    protected void btnClose_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["Prev"] != null)
        {
            string strPrevUrl = Request.QueryString["Prev"].ToString();
            if (strPrevUrl == "Indvl")
            {
                if (Request.QueryString["LeadId"] != null)
                {
                    string strRandomLeadMixedId = Request.QueryString["LeadId"].ToString();
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("/Transaction/gen_Lead/gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "&L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("/Transaction/gen_Lead/gen_LeadIndividualList.aspx?Id=" + strRandomLeadMixedId + "");
                    }

                }
                else
                {
                    if (Request.QueryString["L_MODE"] != null)
                    {
                        string strL_MODE = Request.QueryString["L_MODE"].ToString();
                        Response.Redirect("/Transaction/gen_Lead/gen_LeadList.aspx?L_MODE=" + strL_MODE + "");
                    }
                    else
                    {
                        Response.Redirect("/Transaction/gen_Lead/gen_LeadList.aspx");
                    }

                }

            }
            else
            {
                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("/Transaction/gen_Lead/gen_LeadList.aspx?L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("/Transaction/gen_Lead/gen_LeadList.aspx");
                }

            }
        }

        else
        {
            if (Request.QueryString["L_MODE"] != null)
            {
                string strL_MODE = Request.QueryString["L_MODE"].ToString();
                Response.Redirect("/Transaction/gen_Lead/gen_LeadList.aspx?L_MODE=" + strL_MODE + "");
            }
            else
            {
                Response.Redirect("/Transaction/gen_Lead/gen_LeadList.aspx");
            }
        }
    }
    protected void btnListTop_Click(object sender, EventArgs e)
    {

    }

    private void PdfAdvancedGeneration()
    {// in PdfAdvancedGeneration only choice for Currency code & currency symbol is done
        try
        {
            if (Request.QueryString["LeadId"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationId.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();
                DataTable dtProjectDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);
                dtProjectDtl = objBusinessLayerQuotation.ReadProjectDtlForPDF(objEntityQuotation);

                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);

                string strProductSts = "";
                double dItmDesc = 0;
                string strItemDescription = "";
                int Printneed = 0;
                string StrComments = "";

                string strPartNumber = "";
                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strCustmrPhone = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strProject = "";
                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);

                XFont fontEntry = null;
                XFont fontEntryNetAmnt = null;
                XFont fontEntryAmntInWords = null;
                XFont fontEntryHeading = null;
               
                if (hiddenTaxEnabled.Value == "1")
                {
                    fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                }
                else
                {
                    fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    fontEntryNetAmnt = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryAmntInWords = new XFont("Calibri", 10, XFontStyle.Bold);
                    fontEntryHeading = new XFont("Calibri", 10, XFontStyle.Bold);

                }

                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDearSir = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 11, XFontStyle.Underline);
                XFont fontWithRef = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontProjectHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontDocAttchd = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 11, XFontStyle.Regular);

                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtProjectDtl.Rows.Count > 0)
                {
                    if (dtProjectDtl.Rows[0]["PROJECT_ID"].ToString() == "")
                    {
                        strProject = dtProjectDtl.Rows[0]["LEADS_PROJECT_NAME"].ToString();

                    }
                    else
                    {
                        strProject = dtProjectDtl.Rows[0]["PROJECT_NAME"].ToString();
                    }

                }
                if (dtQtn.Rows.Count > 0)
                {
                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                    strCustmrPhone = dtCustmrDtl.Rows[0]["LEADS_MOBILE"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 180;
                yLine = yLine + 175;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("DATE : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("REF    : ", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(72, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                double dCustAddr1 = MeasureHeight(graph, strCustmrAddr1, fontCustmrDtl, 480);
                tf.Alignment = XParagraphAlignment.Left;
                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    tf.DrawString(strCustmrAddr1 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                }
                else
                {
                    tf.DrawString(strCustmrAddr1 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                }

                yPoint = yPoint + Convert.ToInt32(dCustAddr1);
                yLine = yLine + Convert.ToInt32(dCustAddr1);

                if (strCustmrAddr2 != "")
                {
                    double dCustAddr2 = MeasureHeight(graph, strCustmrAddr2, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr2 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr2 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr2);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr2);

                }

                if (strCustmrAddr3 != "")
                {
                    double dCustAddr3 = MeasureHeight(graph, strCustmrAddr3, fontCustmrDtl, 480);
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrAddr3 + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    {
                        tf.DrawString(strCustmrAddr3 + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    yPoint = yPoint + 1 + Convert.ToInt32(dCustAddr3);
                    yLine = yLine + 1 + Convert.ToInt32(dCustAddr3);

                }

                if (strCustmrZipCode != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    if ((strCustmrCountry != ""))
                    {
                        tf.DrawString(strCustmrZipCode + ",", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    else
                    {
                        tf.DrawString(strCustmrZipCode + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);

                    }
                    yPoint = yPoint + 13;
                    yLine = yLine + 13;

                }

                if (strCustmrCountry != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strCustmrCountry + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                if (strCustmrPhone != "")
                {
                    tf.Alignment = XParagraphAlignment.Left;

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PHONE : " + strCustmrPhone + ".", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 15;
                    yLine = yLine + 15;
                }

                yPoint = yPoint + 8;
                yLine = yLine + 8;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Dear Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 17;
                yLine = yLine + 17;

                string strSubjContent = "QUOTATION";
                if (lblTitle.Text != "")
                {

                    strSubjContent = strSubjContent + " FOR " + lblTitle.Text.ToUpper();

                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("SUBJECT", fontSubject, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontSubject, XBrushes.Black, new XRect(85, yPoint, 10, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                XRect xrt = new XRect(100, yPoint, 470, pdfPage.Height.Point);

                tf.DrawString(strSubjContent, fontSubject, XBrushes.Black, xrt, XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("PROJECT", fontProjectHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(":", fontSubject, XBrushes.Black, new XRect(85, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strProject, fontProjectHeading, XBrushes.Black, new XRect(100, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 24;
                yLine = yLine + 24;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontWithRef, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 32;
                yLine = yLine + 32;

                //START
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;



                if (strProject != "")
                {

                    double dProject = MeasureHeight(graph, strProject, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dProject) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }



                }

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                if (dtQtnDtlGroup.Rows.Count > 0)
                {
                    foreach (DataRow dT in dtQtnDtlGroup.Rows)
                    {
                        string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                        StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                        string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();
                        tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                        if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                        {
                            if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                            {
                                XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                                xImgCurrencySymbl.Dispose();
                            }
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(StrGrpNetAmount + " (As Per  " + strAttchdBy + "  List)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }
                        else
                        { //display code
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString(hiddenCurrencyCode.Value + " " + StrGrpNetAmount + " (As Per  " + strAttchdBy + " List )", fontOffer, XBrushes.Black, new XRect(160, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }

                        yPoint = yPoint + 18;
                        yLine = yLine + 18;
                    }
                }
                else
                {
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                    {
                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);
                            xImgCurrencySymbl.Dispose();
                        }
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmountWithComma + " (As Per List Attached)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                    else
                    { //display code
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(hiddenCurrencyCode.Value + " " + strNetAmountWithComma + " (As Per List Attached)", fontOffer, XBrushes.Black, new XRect(160, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                    }
                }

                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 775)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 4 + Convert.ToInt32(dPrice);
                    yLine = yLine + 4 + Convert.ToInt32(dPrice);

                }
                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dPayment);
                    yLine = yLine + 4 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dValidity);
                    yLine = yLine + 4 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 4 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 775)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 70;
                        yLine = yLine + 65;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 40, 25);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(155, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 410, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 4 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 4 + Convert.ToInt32(dWarranty);
                }


                bool blnShrinkFormat = false;
                if (yPoint <= 570)
                {
                    blnShrinkFormat = true;
                }

                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 40;
                    yLine = yLine + 40;
                }
                //----------------footer//////////////////
                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "( EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + " )";
                    strActUserDtl = strActUserName + " " + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(171, yPoint + Convert.ToInt32(dFooterMsg) - 12.5, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 9 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 9 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Best Regards,", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strDivName = dtTeamHeadDtl.Rows[0]["CPRDIV_NAME"].ToString();

                yPoint = yPoint + 11;
                yLine = yLine + 11;

                if (yPoint >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint + .5, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 45;
                yLine = yLine + 45;
                string strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString() + " ( " + strDivName + " Division )";
                double dTeamDtl = MeasureHeight(graph, strTeamDtl, fontNote, 380);
                if (yPoint + Convert.ToInt32(dTeamDtl) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                strTeamDtl = dtTeamHeadDtl.Rows[0]["USR_NAME"].ToString();
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strTeamDtl, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 9;
                yLine = yLine + 9;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("MANAGER, " + strDivName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 640, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE

                if (blnShrinkFormat == true)
                {
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }
                else
                {
                    yPoint = yPoint + 11;
                    yLine = yLine + 11;
                }
                string strNote = "Please view the Bill Of Quantities with price in next page. As per our standard terms of sales.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 775)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(73, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;

                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();
                }
                //STOP
                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 70;
                yLine = yLine + 65;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                    xImgCmpnyNameBOQHeader.Dispose();
                }

                int COUNT = 0;

                if (dtQtnDtlGroup.Rows.Count > 0)
                {
                    foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                    {
                        COUNT++;

                        //for calculate total for group
                        strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                        strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                        strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                        strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                        strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                        strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                        strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);



                        if (COUNT > 1)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }

                            //NEW PAGE
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                            {
                                XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                                graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                                xImgCmpnyNameBOQHeader.Dispose();
                            }


                        }

                        string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                        tf.Alignment = XParagraphAlignment.Center;
                        tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 25, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                        graph.DrawLine(XPens.Black, 251, yPoint - 12, 344, yPoint - 12);


                        if (hiddenTaxEnabled.Value == "1")
                        {
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(280, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);


                            //column line0
                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 22);

                            //column line1
                            graph.DrawLine(XPens.Black, 190, yLine, 190, yLine + 22);

                            //column line2
                            graph.DrawLine(XPens.Black, 260, yLine, 260, yLine + 22);

                            //column line3
                            graph.DrawLine(XPens.Black, 310, yLine, 310, yLine + 22);

                            //column line4
                            graph.DrawLine(XPens.Black, 380, yLine, 380, yLine + 22);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, yLine, 435, yLine + 22);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 22);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);



                            yPoint = yPoint + 22;

                            yLine = yLine + 22;

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {

                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);


                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);

                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;


                                        }
                                        else
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine +22+ Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine +22+ Convert.ToInt32(CatHeight));

                                            yPoint = yPoint +22+ Convert.ToInt32(CatHeight);

                                            yLine = yLine +22+ Convert.ToInt32(CatHeight);
                                        }

                                        

                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;

                                       
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount +Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;
                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);
                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);
                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);
                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);
                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);
                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);




                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();

                                                        }
                                                        //intCounter++;
                                                        //row line
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 22);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 22);

                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, yLine, 190, yLine + 22);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, yLine, 260, yLine + 22);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, yLine, 310, yLine + 22);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, yLine, 380, yLine + 22);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, yLine, 435, yLine + 22);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 22);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 22);

                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        CatLineStart = yLine;
                                                    }

                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;


                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                    if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                    {
                                                        strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    else
                                                    {
                                                        strTaxName = "";
                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        //////
                                                        strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    double dItmName = 0;

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;

                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmName), 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);




                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {
                                                        yPoint = yPoint + 22  + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint  + 22+ Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }
                                                   
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                        }


                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine + 18);
                                        graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine +18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {

                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;
                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 190, 65, 190, yLine);
                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 260, 65, 260, yLine);
                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 310, 65, 310, yLine);
                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 380, 65, 380, yLine);
                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);
                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();

                                                        }
                                                        //intCounter++;
                                                        //row line
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }
                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;


                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                    if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                    {
                                                        strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    else
                                                    {
                                                        strTaxName = "";
                                                        strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                        //////
                                                        strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                        strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                    }
                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    double dItmName = 0;

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;

                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmName), 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);




                                                    dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                                    if (Printneed == 1)
                                                    {
                                                        yPoint = yPoint + 22  + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }
                                                   
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }

                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line0
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line1
                                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                                        }
                                    }
                                }
                            }

                            //for toatal amount section OF TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);



                            yPoint = yPoint + 22;
                            yLine = yLine + 22;

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                            if (yPoint >= 700)
                            { //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(350, yPoint, 127, pdfPage.Height.Point), XStringFormats.TopLeft);


                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }


                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;

                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);



                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            else
                            { //display code

                                tf.Alignment = XParagraphAlignment.Right;


                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);


                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }


                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {//FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);

                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                        }
                        else
                        {
                            //NO TAX

                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Left;
                            tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                            //column line1
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                            //column line2
                            graph.DrawLine(XPens.Black, 125, 65, 125, yLine + 22);

                            //column line3
                            graph.DrawLine(XPens.Black, 305, 65, 305, yLine + 22);

                            //column line4
                            graph.DrawLine(XPens.Black, 385, 65, 385, yLine + 22);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                            //column line6
                            graph.DrawLine(XPens.Black, 505, 65, 505, yLine + 22);

                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);

                            yPoint = yPoint + 22;

                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            int intSl = 0;
                            foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                            {
                                decimal decAmount = 0;
                                if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                                {
                                    if (dtcat["CATGRY_NAME"].ToString() != "")
                                    {
                                        string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(25, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(75, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);


                                        double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                        if (CatHeight < 22)
                                        {
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine+22);
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine+22);
                                            yPoint = yPoint + 22;

                                            yLine = yLine + 22;
                                        }
                                        else
                                        { //column line0
                                            graph.DrawLine(XPens.Black, 20, yLine, 20, yLine +22+ Convert.ToInt32(CatHeight));
                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, yLine, 575, yLine +22+ Convert.ToInt32(CatHeight));

                                            yPoint = yPoint +22+ Convert.ToInt32(CatHeight);

                                            yLine = yLine +22+ Convert.ToInt32(CatHeight);
                                        }

                                       

                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                        int CatLineStart = yLine;

                                        if (dtQtnDtl.Rows.Count > 0)
                                        {
                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                                {
                                                    decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                    intSl++;


                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 125, CatLineStart, 125, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 305, CatLineStart, 305, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 385, CatLineStart, 385, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 505, CatLineStart, 505, yLine);

                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }
                                                        // intCounter++;

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine + 22);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine + 22);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 125, 65, 125, yLine + 22);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 305, 65, 305, yLine + 22);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 385, 65, 385, yLine + 22);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine + 22);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 505, 65, 505, yLine + 22);

                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine + 22);

                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                        CatLineStart = yLine;
                                                    }

                                                    strPartNumber = dtQtnDtl.Rows[intcnt]["PRDT_CODE"].ToString();
                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }


                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    double dItmName = MeasureHeight(graph, strItemName, fontEntry, 147);

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (strPartNumber.Length > 12)
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(0, 12), fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(12), fontEntry, XBrushes.Black, new XRect(45, yPoint + 10, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    else
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber, fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    // pdfPage.Width.Point
                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint +22+ Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }
                                                   
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);



                                                }
                                            }
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);
                                            //column line1
                                            graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 125, CatLineStart, 125, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 305, CatLineStart, 305, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 385, CatLineStart, 385, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 505, CatLineStart, 505, yLine);

                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);

                                        }

                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(355, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                                        tf.Alignment = XParagraphAlignment.Right;
                                        tf.DrawString(decAmount.ToString(), fontEntry, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                        //column line6
                                        graph.DrawLine(XPens.Black, 505, CatLineStart, 505, yLine+18);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                        yPoint = yPoint + 18;

                                        yLine = yLine + 18;
                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    }
                                    else
                                    {
                                        if (dtQtnDtl.Rows.Count > 0)
                                        {
                                            for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                            {
                                                if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                                {
                                                    intSl++;


                                                    if (yPoint >= 700)
                                                    {
                                                        //FOOTER
                                                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                        {
                                                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                            graph.DrawImage(xImgFoot, 40, 775);
                                                            xImgFoot.Dispose();
                                                        }
                                                        //column line0
                                                        graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                                        //column line1
                                                        graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                                        //column line2
                                                        graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                                                        //column line3
                                                        graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                                                        //column line4
                                                        graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                                                        //column line5
                                                        graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                                        //column line6
                                                        graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                                                        //column line7
                                                        graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                                                        pdfPage = pdf.AddPage();
                                                        /////
                                                        pdfPage.Orientation = PageOrientation.Portrait;

                                                        pdfPage.Width = size.Width;
                                                        pdfPage.Height = size.Height;
                                                        pdfPage.TrimMargins.Top = 5;
                                                        pdfPage.TrimMargins.Right = 5;
                                                        pdfPage.TrimMargins.Bottom = 5;
                                                        pdfPage.TrimMargins.Left = 5;

                                                        ////
                                                        graph.Dispose();
                                                        graph = XGraphics.FromPdfPage(pdfPage);
                                                        tf = new XTextFormatter(graph);
                                                        yPoint = 0;
                                                        yLine = 0;
                                                        yPoint = yPoint + 70;
                                                        yLine = yLine + 65;

                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                        //COMPANY NAME
                                                        intPageCount = intPageCount + 1;
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                        {
                                                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                            graph.DrawImage(xImgCmpnyName, 40, 25);
                                                            xImgCmpnyName.Dispose();
                                                        }
                                                        // intCounter++;

                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        tf.Alignment = XParagraphAlignment.Right;
                                                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        yPoint = yPoint + 22;

                                                        yLine = yLine + 22;
                                                        //row line
                                                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    }

                                                    strPartNumber = dtQtnDtl.Rows[intcnt]["PRDT_CODE"].ToString();
                                                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                    {
                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                    }
                                                    else
                                                    {

                                                        strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                    }


                                                    strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                    Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                    strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                    dItmDesc = 0;

                                                    double dItmName = MeasureHeight(graph, strItemName, fontEntry, 147);

                                                    strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                    strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                    strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                    strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                    strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                    strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                    strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                    strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                    strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                    strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                    if (strItemDescription != "")
                                                    {
                                                        int intItemDescLength = strItemDescription.Length;

                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                    MaxDescTax:
                                                        if (dItmDesc > 580 && intItemDescLength > 0)
                                                        {

                                                            strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                            intItemDescLength = strItemDescription.Length;
                                                            dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                            goto MaxDescTax;


                                                        }

                                                    }

                                                    tf.Alignment = XParagraphAlignment.Center;
                                                    tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    if (strPartNumber.Length > 12)
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(0, 12), fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber.Substring(12), fontEntry, XBrushes.Black, new XRect(45, yPoint + 10, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    else
                                                    {
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strPartNumber, fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    double dItmsts = 0;
                                                    dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                    if (strProductSts != "" && strProductSts != "")
                                                    {
                                                        strProductSts = "( " + strProductSts + " )";
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    }
                                                    if (Printneed == 1)
                                                    {
                                                        if (strItemDescription != "")
                                                        {
                                                            double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                            tf.Alignment = XParagraphAlignment.Left;
                                                            tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                        }

                                                    }
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    if (Printneed == 1)
                                                    {

                                                        yPoint = yPoint +22+ Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                    }
                                                    else
                                                    {
                                                        yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                        yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                                    }
                                                  
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }
                                            }
                                            //column line0
                                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                            //column line1
                                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                            //column line2
                                            graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                                            //column line3
                                            graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                                            //column line4
                                            graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                                            //column line5
                                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                            //column line6
                                            graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                                            //column line7
                                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);



                                        }
                                    }
                                }
                            }
                            //for toatal amount section OF NO TAX SECTION

                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(365, yPoint, 130, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(320, yPoint, 175, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                            if (yPoint >= 700)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                            {
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                                {
                                    XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                    graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                                    xImgCurrencySymbl.Dispose();
                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }
                            else
                            { //display code
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(508, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                            }

                            yPoint = yPoint + 22;
                            yLine = yLine + 22;
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                            //column line6
                            graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                            string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                            double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                            if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                            {
                                //FOOTER
                                string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                {
                                    XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                    graph.DrawImage(xImgFoot, 40, 775);
                                    xImgFoot.Dispose();
                                }
                                pdfPage = pdf.AddPage();
                                /////
                                pdfPage.Orientation = PageOrientation.Portrait;

                                pdfPage.Width = size.Width;
                                pdfPage.Height = size.Height;
                                pdfPage.TrimMargins.Top = 5;
                                pdfPage.TrimMargins.Right = 5;
                                pdfPage.TrimMargins.Bottom = 5;
                                pdfPage.TrimMargins.Left = 5;

                                ////
                                graph.Dispose();
                                graph = XGraphics.FromPdfPage(pdfPage);
                                tf = new XTextFormatter(graph);
                                yPoint = 0;
                                yLine = 0;
                                yPoint = yPoint + 70;
                                yLine = yLine + 65;

                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                //COMPANY NAME
                                intPageCount = intPageCount + 1;
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                {
                                    XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                    graph.DrawImage(xImgCmpnyName, 40, 25);
                                    xImgCmpnyName.Dispose();
                                }
                            }

                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                            yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                            yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                            //row line
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            //column line4
                            graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                        }

                        yPoint = yPoint + 30;
                        yLine = yLine + 30;

                    }
                }
                else
                {
                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 120, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(280, yPoint, 95, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        if (dtQtnDtl.Rows.Count > 0)
                        {
                            for (int intcnt = 0, intSl = 1; intcnt < dtQtnDtl.Rows.Count; intcnt++, intSl++)
                            {


                                if (yPoint >= 700)
                                {
                                    //FOOTER
                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                    {
                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                        graph.DrawImage(xImgFoot, 40, 775);
                                        xImgFoot.Dispose();
                                    }
                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                    //column line0
                                    graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                    //column line1
                                    graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                                    //column line2
                                    graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                                    //column line3
                                    graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                                    //column line4
                                    graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                                    //column line5
                                    graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                    //column line6
                                    graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, 65, 575, yLine);




                                    pdfPage = pdf.AddPage();
                                    /////
                                    pdfPage.Orientation = PageOrientation.Portrait;

                                    pdfPage.Width = size.Width;
                                    pdfPage.Height = size.Height;
                                    pdfPage.TrimMargins.Top = 5;
                                    pdfPage.TrimMargins.Right = 5;
                                    pdfPage.TrimMargins.Bottom = 5;
                                    pdfPage.TrimMargins.Left = 5;

                                    ////
                                    graph.Dispose();
                                    graph = XGraphics.FromPdfPage(pdfPage);
                                    tf = new XTextFormatter(graph);
                                    yPoint = 0;
                                    yLine = 0;
                                    yPoint = yPoint + 70;
                                    yLine = yLine + 65;

                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    //COMPANY NAME
                                    intPageCount = intPageCount + 1;
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                    {
                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                        graph.DrawImage(xImgCmpnyName, 40, 25);
                                        xImgCmpnyName.Dispose();

                                    }
                                    //intCounter++;
                                    //row line
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(261, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(278, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    yPoint = yPoint + 22;

                                    yLine = yLine + 22;
                                    //row line
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                {
                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                }
                                else
                                {

                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDCT NAME"].ToString();
                                }

                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                dItmDesc = 0;


                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                {
                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                }
                                else
                                {
                                    strTaxName = "";
                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                    //////
                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                }
                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                if (strItemDescription != "")
                                {
                                    int intItemDescLength = strItemDescription.Length;

                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                MaxDescTax:
                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                    {

                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                        intItemDescLength = strItemDescription.Length;
                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                        goto MaxDescTax;


                                    }

                                }
                                double dItmName = 0;

                                tf.Alignment = XParagraphAlignment.Center;
                                tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint + Convert.ToInt32(dItmName), 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Left;

                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmName), 140, pdfPage.Height.Point), XStringFormats.TopLeft);


                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                double dItmsts = 0;
                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                if (strProductSts != "" && strProductSts != "")
                                {
                                    strProductSts = "( " + strProductSts + " )";
                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                }
                                if (Printneed == 1)
                                {
                                    if (strItemDescription != "")
                                    {
                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    }

                                }
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                                dItmName = MeasureHeight(graph, strItemName, fontEntry, 142);

                                if (Printneed == 1)
                                {

                                    yPoint = yPoint +22+ Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                }
                                else
                                {
                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                }
                               
                                //row line
                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            }
                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                            //column line0
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                            //column line1
                            graph.DrawLine(XPens.Black, 190, 65, 190, yLine);

                            //column line2
                            graph.DrawLine(XPens.Black, 260, 65, 260, yLine);

                            //column line3
                            graph.DrawLine(XPens.Black, 310, 65, 310, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 380, 65, 380, yLine);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 495, 65, 495, yLine);
                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                        }

                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;

                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);



                        yPoint = yPoint + 22;
                        yLine = yLine + 22;

                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);

                        if (yPoint >= 700)
                        { //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;

                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(350, yPoint, 127, pdfPage.Height.Point), XStringFormats.TopLeft);


                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line4
                        //    graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }


                        if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                        {
                            tf.Alignment = XParagraphAlignment.Right;

                            tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);



                            if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                            {
                                XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                                xImgCurrencySymbl.Dispose();
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 72, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }
                        else
                        { //display code

                            tf.Alignment = XParagraphAlignment.Right;


                            tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(370, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);


                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(497, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }


                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);

                    }
                    else
                    {
                        //NO TAX
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        if (dtQtnDtl.Rows.Count > 0)
                        {
                            for (int intcnt = 0, intSl = 1; intcnt < dtQtnDtl.Rows.Count; intcnt++, intSl++)
                            {


                                if (yPoint >= 700)
                                {
                                    //FOOTER
                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                    {
                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                        graph.DrawImage(xImgFoot, 40, 775);
                                        xImgFoot.Dispose();
                                    }
                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                                    //column line1
                                    graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                                    //column line2
                                    graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                                    //column line3
                                    graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                                    //column line4
                                    graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                                    //column line5
                                    graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                                    //column line6
                                    graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, 65, 575, yLine);


                                    pdfPage = pdf.AddPage();
                                    /////
                                    pdfPage.Orientation = PageOrientation.Portrait;

                                    pdfPage.Width = size.Width;
                                    pdfPage.Height = size.Height;
                                    pdfPage.TrimMargins.Top = 5;
                                    pdfPage.TrimMargins.Right = 5;
                                    pdfPage.TrimMargins.Bottom = 5;
                                    pdfPage.TrimMargins.Left = 5;

                                    ////
                                    graph.Dispose();
                                    graph = XGraphics.FromPdfPage(pdfPage);
                                    tf = new XTextFormatter(graph);
                                    yPoint = 0;
                                    yLine = 0;
                                    yPoint = yPoint + 70;
                                    yLine = yLine + 65;

                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                    //COMPANY NAME
                                    intPageCount = intPageCount + 1;
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                    {
                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                        graph.DrawImage(xImgCmpnyName, 40, 25);
                                        xImgCmpnyName.Dispose();
                                    }

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("SL#", fontEntryHeading, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("PART NUMBER", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("UNIT CODE", fontEntryHeading, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    yPoint = yPoint + 22;

                                    yLine = yLine + 22;
                                    //row line
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }

                                strPartNumber = dtQtnDtl.Rows[intcnt]["PRDT_CODE"].ToString();
                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                {
                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                }
                                else
                                {

                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                }


                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                dItmDesc = 0;

                                double dItmName = MeasureHeight(graph, strItemName, fontEntry, 147);

                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                if (strItemDescription != "")
                                {
                                    int intItemDescLength = strItemDescription.Length;

                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                    MaxDescTax:
                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                    {
                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                        intItemDescLength = strItemDescription.Length;
                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                        goto MaxDescTax;

                                    }

                                }

                                tf.Alignment = XParagraphAlignment.Center;
                                tf.DrawString(intSl.ToString(), fontEntry, XBrushes.Black, new XRect(22, yPoint, 15, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (strPartNumber.Length > 12)
                                {
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strPartNumber.Substring(0, 12), fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strPartNumber.Substring(12), fontEntry, XBrushes.Black, new XRect(45, yPoint + 10, 75, pdfPage.Height.Point), XStringFormats.TopLeft);

                                }
                                else
                                {
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strPartNumber, fontEntry, XBrushes.Black, new XRect(45, yPoint, 75, pdfPage.Height.Point), XStringFormats.TopLeft);
                                }
                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(130, yPoint, 170, pdfPage.Height.Point), XStringFormats.TopLeft);

                                double dItmsts = 0;
                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                if (strProductSts != "" && strProductSts != "")
                                {
                                    strProductSts = "( " + strProductSts + " )";
                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                }
                                if (Printneed == 1)
                                {
                                    if (strItemDescription != "")
                                    {
                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                        tf.Alignment = XParagraphAlignment.Left;
                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(130, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    }

                                }
                                tf.Alignment = XParagraphAlignment.Left;
                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(310, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(390, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                tf.Alignment = XParagraphAlignment.Right;
                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);

                                if (Printneed == 1)
                                {

                                    yPoint = yPoint  +22+ Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                }
                                else
                                {
                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                    yLine = yLine + 22 + Convert.ToInt32(dItmName) + Convert.ToInt32(dItmsts);
                                }
                                
                                //row line
                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                            }
                            //column line0
                            graph.DrawLine(XPens.Black, 20, 65, 20, yLine);
                            //column line1
                            graph.DrawLine(XPens.Black, 40, 65, 40, yLine);

                            //column line2
                            graph.DrawLine(XPens.Black, 125, 65, 125, yLine);

                            //column line3
                            graph.DrawLine(XPens.Black, 305, 65, 305, yLine);

                            //column line4
                            graph.DrawLine(XPens.Black, 385, 65, 385, yLine);

                            //column line5
                            graph.DrawLine(XPens.Black, 435, 65, 435, yLine);

                            //column line6
                            graph.DrawLine(XPens.Black, 505, 65, 505, yLine);

                            //column line7
                            graph.DrawLine(XPens.Black, 575, 65, 575, yLine);

                        }

                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(365, yPoint, 130, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(320, yPoint, 175, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 700)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        if (hiddenDfltCurrencyDisplay.Value == "0")// display symbol
                        {
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                            {
                                XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                                graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                                xImgCurrencySymbl.Dispose();
                            }
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(510, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }
                        else
                        { //display code
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString("NET AMOUNT (" + hiddenCurrencyCode.Value + ")", fontEntryNetAmnt, XBrushes.Black, new XRect(335, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(508, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        }

                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 505, yLine - 25, 505, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 770)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 70;
                            yLine = yLine + 65;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 40, 25);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(65, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                    }
                }

                double dItmComments = 0;
                if (StrComments != "")
                {
                    dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                    yPoint = yPoint + 22;
                    yLine = yLine + 22;
                    // StrComments
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                }
                yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }

                }

                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 700)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 70;
                    yLine = yLine + 65;

                    // graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header-sub.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 40, 25);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";

                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);

                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();


            }
        }
        catch(Exception ex)
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }

    public string ConvertCurrencyToWords(string NetAmount)
    {
        clsEntityCommon ObjClsentityCommon = new clsEntityCommon();
        clsBusinessLayer ObjClsBussines = new clsBusinessLayer();

        if (hiddenDfltCurrencyMstrId.Value != null && hiddenDfltCurrencyMstrId.Value != "")
        {
            ObjClsentityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
        }
        string NumberToWord = ObjClsBussines.ConvertCurrencyToWords(ObjClsentityCommon, NetAmount);
        return NumberToWord;
    }



    public string RefNumGeneralFormat(int intQtnSerialId)
    {
        clsBusinessLayer objBussiness = new clsBusinessLayer();
        clsEntityCommon objEntity = new clsEntityCommon();

        if (hiddenCorporateId.Value != "")
        {
            objEntity.CorporateID = Convert.ToInt32(hiddenCorporateId.Value);
        }

        if (hiddenOrganisationId.Value != "")
        {
            objEntity.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        if (hiddenCorporateDivId.Value != "")
        {
            objEntity.CorporateDivId = Convert.ToInt32(hiddenCorporateDivId.Value);
        }
        if (hiddenDivisionCode.Value != "")
        {
            objEntity.CorpDivisionCode = hiddenDivisionCode.Value;
        }

        if (hiddenMonthMM.Value != "")
        {
            objEntity.MonthRef = Convert.ToInt32(hiddenMonthMM.Value);
        }
        if (hiddenYearYYYY.Value != "")
        {
            objEntity.YearRef = Convert.ToInt32(hiddenYearYYYY.Value);
        }
        if (hiddenUserCode.Value != "")
        {
            objEntity.UserCodeRef = hiddenUserCode.Value.ToString();
        }

        objEntity.QtnId = intQtnSerialId;

        if (hiddenQtnRevisionVersn.Value != "")
        {
            objEntity.RvsnVrsnRef = hiddenQtnRevisionVersn.Value.ToString();
        }

        string strRealFormat = objBussiness.strRefFormat(objEntity);

        return strRealFormat;
    }


    private void PdfCorporateAdvancedGeneration()
    {
        try
        {
            if (Request.QueryString["LeadId"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationId.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);

                int Printneed = 0;
                string strProductSts = "";
                string strItemDescription = "";
                double dItmDesc = 0;

                string StrComments = "";


                string strItemName = "";
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int intCounter = 0;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);

                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();

                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {
                    if ((strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }
                }

                if (strCustmrCountry != "")
                {
                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";
                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {

                    if (yPoint >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);

                        xImgCurrencySymbl.Dispose();
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;
                }

                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }





                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                yPoint = yPoint + 30;
                yLine = yLine + 30;
                string strNote = "Please view the Bill Of Quantities with Price in Next Page.";
                double dNote = MeasureHeight(graph, strNote, fontNote, 380);
                if (yPoint + Convert.ToInt32(dNote) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("NOTE : ", fontNoteHeading, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strNote, fontNote, XBrushes.Black, new XRect(70, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 15;
                yLine = yLine + 15;

                //FOOTER
                string strImageFooterLocBottom = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottom)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottom));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();
                }
                //STOP



                //BILL OF MATERIAL 
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }


                 int COUNT = 0;
                 foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                 {
                     COUNT++;
                     //for calculate total for group
                     strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                     strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                     strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                     strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                     strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                     strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                     strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);

                     if (COUNT > 1)
                     {
                         //FOOTER
                         string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                         if (File.Exists(Server.MapPath(strImageFooterLoc)))
                         {
                             XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                             graph.DrawImage(xImgFoot, 40, 775);
                             xImgFoot.Dispose();
                         }

                         //NEW PAGE
                         pdfPage = pdf.AddPage();
                         /////
                         pdfPage.Orientation = PageOrientation.Portrait;

                         pdfPage.Width = size.Width;
                         pdfPage.Height = size.Height;
                         pdfPage.TrimMargins.Top = 5;
                         pdfPage.TrimMargins.Right = 5;
                         pdfPage.TrimMargins.Bottom = 5;
                         pdfPage.TrimMargins.Left = 5;

                         ////
                         graph.Dispose();
                         graph = XGraphics.FromPdfPage(pdfPage);
                         tf = new XTextFormatter(graph);
                         //fontEntry = new XFont("Calibri", 10, XFontStyle.Regular);
                         yPoint = 0;
                         yLine = 0;
                         yPoint = yPoint + 150;
                         yLine = yLine + 145;

                         //COMPANY NAME
                         intPageCount = intPageCount + 1;
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                         if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                         {
                             XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                             graph.DrawImage(xImgCmpnyNameBOQHeader, 40, 25);
                             xImgCmpnyNameBOQHeader.Dispose();
                         }


                     }

                     string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                     tf.Alignment = XParagraphAlignment.Center;
                     tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint - 30, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                     graph.DrawLine(XPens.Black, 251, yPoint - 17.5, 344, yPoint - 17.5);
                     if (hiddenTaxEnabled.Value == "1")
                     {
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                         tf.Alignment = XParagraphAlignment.Left;
                         tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Left;
                         tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                         //column line0
                         graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);

                         //column line1
                         graph.DrawLine(XPens.Black, 190, 145, 190, yLine + 22);

                         //column line2
                         graph.DrawLine(XPens.Black, 260, 145, 260, yLine + 22);

                         //column line3
                         graph.DrawLine(XPens.Black, 310, 145, 310, yLine + 22);

                         //column line4
                         graph.DrawLine(XPens.Black, 380, 145, 380, yLine + 22);

                         //column line5
                         graph.DrawLine(XPens.Black, 435, 145, 435, yLine + 22);

                         //column line6
                         graph.DrawLine(XPens.Black, 495, 145, 495, yLine + 22);
                         //column line7
                         graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                         yPoint = yPoint + 22;

                         yLine = yLine + 22;
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                         foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                         {
                             decimal decAmount = 0;
                             if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                             {
                                 if (dtcat["CATGRY_NAME"].ToString() != "")
                                 {
                                     string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                     tf.Alignment = XParagraphAlignment.Left;
                                     tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                     tf.Alignment = XParagraphAlignment.Left;
                                     tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint+1.5, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                     double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                     if (CatHeight < 22)
                                     {
                                         //column line0
                                         graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                         //column line7
                                         graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                                         yPoint = yPoint + 22;

                                         yLine = yLine + 22;
                                     }
                                     else
                                     { //column line0
                                         graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                         //column line7
                                         graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));

                                         yPoint = yPoint + 22 + Convert.ToInt32(CatHeight);

                                         yLine = yLine + 22 + Convert.ToInt32(CatHeight);
                                     }

                                    

                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                     int CatLineStart = yLine;
                                     if (dtQtnDtl.Rows.Count > 0)
                                     {
                                         for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                         {
                                             if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                             {
                                                 decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                 if (yPoint >= 758)
                                                 {
                                                     //FOOTER
                                                     string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                     if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                     {
                                                         XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                         graph.DrawImage(xImgFoot, 40, 775);
                                                         xImgFoot.Dispose();
                                                     }
                                                     //column line0
                                                     graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                     //column line1
                                                     graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                                     //column line2
                                                     graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                                     //column line3
                                                     graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                                     //column line4
                                                     graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                                     //column line5
                                                     graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                                     //column line6
                                                     graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                                     //column line7
                                                     graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);




                                                     pdfPage = pdf.AddPage();
                                                     /////
                                                     pdfPage.Orientation = PageOrientation.Portrait;

                                                     pdfPage.Width = size.Width;
                                                     pdfPage.Height = size.Height;
                                                     pdfPage.TrimMargins.Top = 5;
                                                     pdfPage.TrimMargins.Right = 5;
                                                     pdfPage.TrimMargins.Bottom = 5;
                                                     pdfPage.TrimMargins.Left = 5;

                                                     ////
                                                     graph.Dispose();
                                                     graph = XGraphics.FromPdfPage(pdfPage);
                                                     tf = new XTextFormatter(graph);
                                                     fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                     yPoint = 0;
                                                     yLine = 0;
                                                     yPoint = yPoint + 150;
                                                     yLine = yLine + 145;

                                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                     //COMPANY NAME
                                                     intPageCount = intPageCount + 1;
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                     if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                     {
                                                         XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                         graph.DrawImage(xImgCmpnyName, 0, 30);
                                                         xImgCmpnyName.Dispose();

                                                     }
                                                     //intCounter++;
                                                     //row line
                                                     //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     yPoint = yPoint + 22;

                                                     yLine = yLine + 22;

                                                     //column line0
                                                     graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                     //column line1
                                                     graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                     //column line2
                                                     graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                     //column line3
                                                     graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                     //column line4
                                                     graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                     //column line5
                                                     graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                     //column line6
                                                     graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                     //column line7
                                                     graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                     //row line
                                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                     CatLineStart = yLine;
                                                 }


                                                 if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                 {
                                                     strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                 }
                                                 else
                                                 {

                                                     strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                 }

                                                 strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                 strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                 Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                 dItmDesc = 0;

                                                 strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                 strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                 strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                 strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                 strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                 strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                 if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                 {
                                                     strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                     strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                     strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                 }
                                                 else
                                                 {
                                                     strTaxName = "";
                                                     strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                     //////
                                                     strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                     strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                 }
                                                 strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                 strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                 strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                 strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                 if (strItemDescription != "")
                                                 {
                                                     int intItemDescLength = strItemDescription.Length;

                                                     dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                 MaxDescTax:
                                                     if (dItmDesc > 580 && intItemDescLength > 0)
                                                     {

                                                         strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                         intItemDescLength = strItemDescription.Length;
                                                         dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                         goto MaxDescTax;


                                                     }

                                                 }

                                                 tf.Alignment = XParagraphAlignment.Left;
                                                 tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 double dItmsts = 0;
                                                 dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                 if (strProductSts != "" && strProductSts != "")
                                                 {
                                                     strProductSts = "( " + strProductSts + " )";
                                                     double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 }
                                                 if (Printneed == 1)
                                                 {
                                                     if (strItemDescription != "")
                                                     {
                                                         //strItemDescription = "( " + strItemDescription + " )";
                                                         double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                         // dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 50);
                                                         tf.Alignment = XParagraphAlignment.Left;
                                                         tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                     }

                                                 }
                                                 tf.Alignment = XParagraphAlignment.Left;
                                                 tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 if (Printneed == 1)
                                                 {

                                                     yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                 }
                                                 else
                                                 {
                                                     yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                 }
                                                 if (Printneed == 1)
                                                 {
                                                     yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                 }
                                                 else
                                                 {
                                                     yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                 }
                                                 //row line
                                                 graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);



                                             }
                                         }

                                         //column line0
                                         graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                         //column line1
                                         graph.DrawLine(XPens.Black, 190, CatLineStart, 190, yLine);

                                         //column line2
                                         graph.DrawLine(XPens.Black, 260, CatLineStart, 260, yLine);

                                         //column line3
                                         graph.DrawLine(XPens.Black, 310, CatLineStart, 310, yLine);

                                         //column line4
                                         graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine);

                                         //column line5
                                         graph.DrawLine(XPens.Black, 435, CatLineStart, 435, yLine);

                                         //column line6
                                         graph.DrawLine(XPens.Black, 495, CatLineStart, 495, yLine);
                                         //column line7
                                         graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);




                                     }

                                     tf.Alignment = XParagraphAlignment.Right;
                                     tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                     tf.Alignment = XParagraphAlignment.Right;
                                     tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                     //column line0
                                     graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                     graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                     graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                     //column line7
                                     graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                     yPoint = yPoint + 18;

                                     yLine = yLine + 18;
                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                 }
                                 else
                                 {
                                     if (dtQtnDtl.Rows.Count > 0)
                                     {
                                         for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                         {
                                             if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                             {

                                                 if (yPoint >= 758)
                                                 {
                                                     //FOOTER
                                                     string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                     if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                     {
                                                         XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                         graph.DrawImage(xImgFoot, 40, 775);
                                                         xImgFoot.Dispose();
                                                     }
                                                     //column line0
                                                     graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                     //column line1
                                                     graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                                     //column line2
                                                     graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                                     //column line3
                                                     graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                                     //column line4
                                                     graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                                     //column line5
                                                     graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                                     //column line6
                                                     graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                                     //column line7
                                                     graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                                     pdfPage = pdf.AddPage();
                                                     /////
                                                     pdfPage.Orientation = PageOrientation.Portrait;

                                                     pdfPage.Width = size.Width;
                                                     pdfPage.Height = size.Height;
                                                     pdfPage.TrimMargins.Top = 5;
                                                     pdfPage.TrimMargins.Right = 5;
                                                     pdfPage.TrimMargins.Bottom = 5;
                                                     pdfPage.TrimMargins.Left = 5;

                                                     ////
                                                     graph.Dispose();
                                                     graph = XGraphics.FromPdfPage(pdfPage);
                                                     tf = new XTextFormatter(graph);
                                                     fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                     yPoint = 0;
                                                     yLine = 0;
                                                     yPoint = yPoint + 150;
                                                     yLine = yLine + 145;

                                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                                     //COMPANY NAME
                                                     intPageCount = intPageCount + 1;
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                     if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                     {
                                                         XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                         graph.DrawImage(xImgCmpnyName, 0, 30);
                                                         xImgCmpnyName.Dispose();

                                                     }
                                                     //intCounter++;
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     yPoint = yPoint + 22;

                                                     yLine = yLine + 22;
                                                     //row line
                                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                 }


                                                 if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                 {
                                                     strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                 }
                                                 else
                                                 {

                                                     strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                 }

                                                 strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                 strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                 Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                 dItmDesc = 0;

                                                 strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                 strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                 strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                 strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                 strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                 strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);
                                                 if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                 {
                                                     strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();

                                                     strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                     strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                 }
                                                 else
                                                 {
                                                     strTaxName = "";
                                                     strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                     //////
                                                     strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                     strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                 }
                                                 strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                 strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                 strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                 strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);


                                                 if (strItemDescription != "")
                                                 {
                                                     int intItemDescLength = strItemDescription.Length;

                                                     dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                 MaxDescTax:
                                                     if (dItmDesc > 580 && intItemDescLength > 0)
                                                     {

                                                         strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                         intItemDescLength = strItemDescription.Length;
                                                         dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                         goto MaxDescTax;


                                                     }

                                                 }

                                                 tf.Alignment = XParagraphAlignment.Left;
                                                 tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 140, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 double dItmsts = 0;
                                                 dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                 if (strProductSts != "" && strProductSts != "")
                                                 {
                                                     strProductSts = "( " + strProductSts + " )";
                                                     double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 }
                                                 if (Printneed == 1)
                                                 {
                                                     if (strItemDescription != "")
                                                     {
                                                         double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                         tf.Alignment = XParagraphAlignment.Left;
                                                         tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                     }

                                                 }
                                                 tf.Alignment = XParagraphAlignment.Left;
                                                 tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(195, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(265, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(315, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(385, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(440, yPoint, 50, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 if (Printneed == 1)
                                                 {

                                                     yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                 }
                                                 else
                                                 {
                                                     yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                 }
                                                 if (Printneed == 1)
                                                 {
                                                     yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                 }
                                                 else
                                                 {
                                                     yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                 }
                                                 //row line
                                                 graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                             }
                                         }

                                         //column line0
                                         graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                         //column line1
                                         graph.DrawLine(XPens.Black, 190, 145, 190, yLine);

                                         //column line2
                                         graph.DrawLine(XPens.Black, 260, 145, 260, yLine);

                                         //column line3
                                         graph.DrawLine(XPens.Black, 310, 145, 310, yLine);

                                         //column line4
                                         graph.DrawLine(XPens.Black, 380, 145, 380, yLine);

                                         //column line5
                                         graph.DrawLine(XPens.Black, 435, 145, 435, yLine);

                                         //column line6
                                         graph.DrawLine(XPens.Black, 495, 145, 495, yLine);
                                         //column line7
                                         graph.DrawLine(XPens.Black, 555, 145, 555, yLine);

                                     }
                                 }

                             }
                         }

                         //for toatal amount section OF TAX SECTION

                         if (yPoint >= 758)
                         {
                             //FOOTER
                             string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                             if (File.Exists(Server.MapPath(strImageFooterLoc)))
                             {
                                 XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                 graph.DrawImage(xImgFoot, 40, 775);
                                 xImgFoot.Dispose();
                             }
                             pdfPage = pdf.AddPage();
                             /////
                             pdfPage.Orientation = PageOrientation.Portrait;

                             pdfPage.Width = size.Width;
                             pdfPage.Height = size.Height;
                             pdfPage.TrimMargins.Top = 5;
                             pdfPage.TrimMargins.Right = 5;
                             pdfPage.TrimMargins.Bottom = 5;
                             pdfPage.TrimMargins.Left = 5;

                             ////
                             graph.Dispose();
                             graph = XGraphics.FromPdfPage(pdfPage);
                             tf = new XTextFormatter(graph);
                             fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                             yPoint = 0;
                             yLine = 0;
                             yPoint = yPoint + 150;
                             yLine = yLine + 145;

                             graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                             //COMPANY NAME
                             intPageCount = intPageCount + 1;
                             tf.Alignment = XParagraphAlignment.Right;
                             tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                             string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                             if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                             {
                                 XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                 graph.DrawImage(xImgCmpnyName, 0, 30);
                                 xImgCmpnyName.Dispose();
                             }
                         }
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                         yPoint = yPoint + 22;
                         yLine = yLine + 22;
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                         //column line4
                         graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                         //column line6
                         graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                         //column line7
                         graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);

                         if (yPoint >= 758)
                         { //FOOTER
                             string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                             if (File.Exists(Server.MapPath(strImageFooterLoc)))
                             {
                                 XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                 graph.DrawImage(xImgFoot, 40, 775);
                                 xImgFoot.Dispose();
                             }
                             pdfPage = pdf.AddPage();
                             /////
                             pdfPage.Orientation = PageOrientation.Portrait;

                             pdfPage.Width = size.Width;
                             pdfPage.Height = size.Height;
                             pdfPage.TrimMargins.Top = 5;
                             pdfPage.TrimMargins.Right = 5;
                             pdfPage.TrimMargins.Bottom = 5;
                             pdfPage.TrimMargins.Left = 5;

                             ////
                             graph.Dispose();
                             graph = XGraphics.FromPdfPage(pdfPage);
                             tf = new XTextFormatter(graph);
                             fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                             yPoint = 0;
                             yLine = 0;
                             yPoint = yPoint + 150;
                             yLine = yLine + 145;
                             graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                             //COMPANY NAME
                             intPageCount = intPageCount + 1;
                             tf.Alignment = XParagraphAlignment.Right;
                             tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                             string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                             if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                             {
                                 XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                 graph.DrawImage(xImgCmpnyName, 0, 30);
                                 xImgCmpnyName.Dispose();
                             }
                         }
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                         yPoint = yPoint + 22;
                         yLine = yLine + 22;
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                         //column line4
                         graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                         //column line6
                         graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                         //column line7
                         graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                         if (yPoint >= 758)
                         {
                             //FOOTER
                             string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                             if (File.Exists(Server.MapPath(strImageFooterLoc)))
                             {
                                 XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                 graph.DrawImage(xImgFoot, 40, 775);
                                 xImgFoot.Dispose();
                             }
                             pdfPage = pdf.AddPage();
                             /////
                             pdfPage.Orientation = PageOrientation.Portrait;

                             pdfPage.Width = size.Width;
                             pdfPage.Height = size.Height;
                             pdfPage.TrimMargins.Top = 5;
                             pdfPage.TrimMargins.Right = 5;
                             pdfPage.TrimMargins.Bottom = 5;
                             pdfPage.TrimMargins.Left = 5;

                             ////
                             graph.Dispose();
                             graph = XGraphics.FromPdfPage(pdfPage);
                             tf = new XTextFormatter(graph);
                             fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                             yPoint = 0;
                             yLine = 0;
                             yPoint = yPoint + 150;
                             yLine = yLine + 145;

                             graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                             //COMPANY NAME
                             intPageCount = intPageCount + 1;
                             tf.Alignment = XParagraphAlignment.Right;
                             tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                             string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                             if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                             {
                                 XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                 graph.DrawImage(xImgCmpnyName, 0, 30);
                                 xImgCmpnyName.Dispose();
                             }
                         }
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;

                         if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                         {
                             XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                             graph.DrawImage(xImgCurrencySymbl, 497, yPoint + 2);
                             xImgCurrencySymbl.Dispose();
                         }

                         tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                         yPoint = yPoint + 22;
                         yLine = yLine + 22;
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                         //column line4
                         graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                         //column line6
                         graph.DrawLine(XPens.Black, 495, yLine - 25, 495, yLine);
                         //column line7
                         graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);
                         string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                         double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                         if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                         {//FOOTER
                             string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                             if (File.Exists(Server.MapPath(strImageFooterLoc)))
                             {
                                 XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                 graph.DrawImage(xImgFoot, 40, 775);
                                 xImgFoot.Dispose();
                             }
                             pdfPage = pdf.AddPage();
                             /////
                             pdfPage.Orientation = PageOrientation.Portrait;

                             pdfPage.Width = size.Width;
                             pdfPage.Height = size.Height;
                             pdfPage.TrimMargins.Top = 5;
                             pdfPage.TrimMargins.Right = 5;
                             pdfPage.TrimMargins.Bottom = 5;
                             pdfPage.TrimMargins.Left = 5;

                             ////
                             graph.Dispose();
                             graph = XGraphics.FromPdfPage(pdfPage);
                             tf = new XTextFormatter(graph);
                             fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                             yPoint = 0;
                             yLine = 0;
                             yPoint = yPoint + 150;
                             yLine = yLine + 145;

                             graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                             //COMPANY NAME
                             intPageCount = intPageCount + 1;
                             tf.Alignment = XParagraphAlignment.Right;
                             tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                             string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                             if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                             {
                                 XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                 graph.DrawImage(xImgCmpnyName, 0, 30);
                                 xImgCmpnyName.Dispose();
                             }
                         }

                         tf.Alignment = XParagraphAlignment.Left;
                         tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                         yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                         yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                         //column line4
                         graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                         //column line7
                         graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);

                     }
                     else
                     {
                         //NO TAX
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                         tf.Alignment = XParagraphAlignment.Left;
                         tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Left;
                         tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                         yPoint = yPoint + 22;

                         yLine = yLine + 22;
                         //column line0
                         graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                         //column line1
                         graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                         //column line2
                         graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                         //column line3
                         graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                         //column line4
                         graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                         //column line5
                         graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                         //column line6
                         graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                         foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                         {
                             decimal decAmount = 0;
                             if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                             {
                                 if (dtcat["CATGRY_NAME"].ToString() != "")
                                 {
                                     string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                     tf.Alignment = XParagraphAlignment.Left;
                                     tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                     tf.Alignment = XParagraphAlignment.Left;
                                     tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint+1.5, 300, pdfPage.Height.Point), XStringFormats.TopLeft);
                                     double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                     if (CatHeight < 22)
                                     {
                                         //column line0
                                         graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22);
                                         //column line7
                                         graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22);

                                         yPoint = yPoint + 22;

                                         yLine = yLine + 22;
                                     }
                                     else
                                     { //column line0
                                         graph.DrawLine(XPens.Black, 40, 145, 40, yLine + 22 + Convert.ToInt32(CatHeight));
                                         //column line7
                                         graph.DrawLine(XPens.Black, 555, 145, 555, yLine + 22 + Convert.ToInt32(CatHeight));
                                         yPoint = yPoint+22 + Convert.ToInt32(CatHeight);

                                         yLine = yLine +22+ Convert.ToInt32(CatHeight);
                                     }

                                     

                                    
                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                     int CatLineStart = yLine;

                                     if (dtQtnDtl.Rows.Count > 0)
                                     {
                                         for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                         {
                                             if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                             {
                                                 decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                 if (yPoint >= 758)
                                                 {
                                                     //FOOTER
                                                     string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                     if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                     {
                                                         XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                         graph.DrawImage(xImgFoot, 40, 775);
                                                         xImgFoot.Dispose();
                                                     }
                                                     //column line0
                                                     graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                                     //column line1
                                                     graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                     //column line2
                                                     graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                     //column line3
                                                     graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                     //column line4
                                                     graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                     //column line5
                                                     graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                     //column line6
                                                     graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);


                                                     pdfPage = pdf.AddPage();
                                                     /////
                                                     pdfPage.Orientation = PageOrientation.Portrait;

                                                     pdfPage.Width = size.Width;
                                                     pdfPage.Height = size.Height;
                                                     pdfPage.TrimMargins.Top = 5;
                                                     pdfPage.TrimMargins.Right = 5;
                                                     pdfPage.TrimMargins.Bottom = 5;
                                                     pdfPage.TrimMargins.Left = 5;

                                                     ////
                                                     graph.Dispose();
                                                     graph = XGraphics.FromPdfPage(pdfPage);
                                                     tf = new XTextFormatter(graph);
                                                     fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                     yPoint = 0;
                                                     yLine = 0;
                                                     yPoint = yPoint + 150;
                                                     yLine = yLine + 145;

                                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                     //COMPANY NAME
                                                     intPageCount = intPageCount + 1;
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                     if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                     {
                                                         XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                         graph.DrawImage(xImgCmpnyName, 0, 30);
                                                         xImgCmpnyName.Dispose();
                                                     }
                                                     // intCounter++;
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     yPoint = yPoint + 22;

                                                     yLine = yLine + 22;
                                                     //column line0
                                                     graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                     //column line1
                                                     graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                     //column line2
                                                     graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                     //column line3
                                                     graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                     //column line4
                                                     graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                     //column line5
                                                     graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                     //column line6
                                                     graph.DrawLine(XPens.Black, 555, 145, 555, yLine);
                                                     //row line

                                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                     CatLineStart = yLine;
                                                 }

                                                 if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                 {
                                                     strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                 }
                                                 else
                                                 {

                                                     strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                 }

                                                 strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                 strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                 Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                 dItmDesc = 0;

                                                 strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                 strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                 strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                 strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                 strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                 strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                 strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                 strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                 strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                 strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                 if (strItemDescription != "")
                                                 {
                                                     int intItemDescLength = strItemDescription.Length;

                                                     dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                 MaxDescTax:
                                                     if (dItmDesc > 580 && intItemDescLength > 0)
                                                     {

                                                         strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                         intItemDescLength = strItemDescription.Length;
                                                         dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                         goto MaxDescTax;


                                                     }

                                                 }

                                                 tf.Alignment = XParagraphAlignment.Left;
                                                 tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 double dItmsts = 0;
                                                 dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                 if (strProductSts != "" && strProductSts != "")
                                                 {
                                                     strProductSts = "( " + strProductSts + " )";
                                                     double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 }
                                                 if (Printneed == 1)
                                                 {
                                                     if (strItemDescription != "")
                                                     {
                                                         double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);

                                                         tf.Alignment = XParagraphAlignment.Left;
                                                         tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                     }

                                                 }

                                                 tf.Alignment = XParagraphAlignment.Left;
                                                 tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                 if (Printneed == 1)
                                                 {

                                                     yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                 }
                                                 else
                                                 {
                                                     yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                 }
                                                 if (Printneed == 1)
                                                 {
                                                     yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                 }
                                                 else
                                                 {
                                                     yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                 }
                                                 // yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);

                                                 // yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                 //row line
                                                 graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                             }

                                         }

                                         //column line0
                                         graph.DrawLine(XPens.Black, 40, CatLineStart, 40, yLine);

                                         //column line1
                                         graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                         //column line2
                                         graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                         //column line3
                                         graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                         //column line4
                                         graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                         //column line5
                                         graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                         //column line6
                                         graph.DrawLine(XPens.Black, 555, CatLineStart, 555, yLine);


                                     }
                                     tf.Alignment = XParagraphAlignment.Right;
                                     tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                     tf.Alignment = XParagraphAlignment.Right;
                                     tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                     //column line0
                                     graph.DrawLine(XPens.Black, 40, yLine, 40, yLine + 18);
                                     graph.DrawLine(XPens.Black, 380, CatLineStart, 380, yLine + 18);
                                     graph.DrawLine(XPens.Black, 495, yLine, 495, yLine + 18);
                                     //column line7
                                     graph.DrawLine(XPens.Black, 555, yLine, 555, yLine + 18);

                                     yPoint = yPoint + 18;

                                     yLine = yLine + 18;
                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                 }
                                 else
                                 {
                                     if (dtQtnDtl.Rows.Count > 0)
                                     {
                                         for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                         {
                                             if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString())
                                             {

                                                 if (yPoint >= 758)
                                                 {
                                                     //FOOTER
                                                     string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                     if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                     {
                                                         XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                         graph.DrawImage(xImgFoot, 40, 775);
                                                         xImgFoot.Dispose();
                                                     }
                                                     //column line0
                                                     graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                                     //column line1
                                                     graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                                     //column line2
                                                     graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                                     //column line3
                                                     graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                                     //column line4
                                                     graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                                     //column line5
                                                     graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                                     //column line6
                                                     graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                                     pdfPage = pdf.AddPage();
                                                     /////
                                                     pdfPage.Orientation = PageOrientation.Portrait;

                                                     pdfPage.Width = size.Width;
                                                     pdfPage.Height = size.Height;
                                                     pdfPage.TrimMargins.Top = 5;
                                                     pdfPage.TrimMargins.Right = 5;
                                                     pdfPage.TrimMargins.Bottom = 5;
                                                     pdfPage.TrimMargins.Left = 5;

                                                     ////
                                                     graph.Dispose();
                                                     graph = XGraphics.FromPdfPage(pdfPage);
                                                     tf = new XTextFormatter(graph);
                                                     fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                     yPoint = 0;
                                                     yLine = 0;
                                                     yPoint = yPoint + 150;
                                                     yLine = yLine + 145;

                                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                     //COMPANY NAME
                                                     intPageCount = intPageCount + 1;
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                     if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                     {
                                                         XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                         graph.DrawImage(xImgCmpnyName, 0, 30);
                                                         xImgCmpnyName.Dispose();
                                                     }
                                                     // intCounter++;
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     tf.Alignment = XParagraphAlignment.Right;
                                                     tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                     yPoint = yPoint + 22;

                                                     yLine = yLine + 22;
                                                     //row line
                                                     graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                 }

                                                 if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                 {
                                                     strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                 }
                                                 else
                                                 {

                                                     strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                 }

                                                 strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                 strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                 Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                                                 dItmDesc = 0;

                                                 strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                 strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                 strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                 strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                 strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                 strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                 strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                 strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                 strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                 strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                 if (strItemDescription != "")
                                                 {
                                                     int intItemDescLength = strItemDescription.Length;

                                                     dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                 MaxDescTax:
                                                     if (dItmDesc > 580 && intItemDescLength > 0)
                                                     {

                                                         strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                         intItemDescLength = strItemDescription.Length;
                                                         dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                         goto MaxDescTax;


                                                     }

                                                 }

                                                 tf.Alignment = XParagraphAlignment.Left;
                                                 tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(45, yPoint, 160, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 double dItmsts = 0;
                                                 dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                 if (strProductSts != "" && strProductSts != "")
                                                 {
                                                     strProductSts = "( " + strProductSts + " )";
                                                     double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                     tf.Alignment = XParagraphAlignment.Left;
                                                     tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 }
                                                 if (Printneed == 1)
                                                 {
                                                     if (strItemDescription != "")
                                                     {
                                                         double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);

                                                         tf.Alignment = XParagraphAlignment.Left;
                                                         tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(45, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                     }

                                                 }

                                                 tf.Alignment = XParagraphAlignment.Left;
                                                 tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                 tf.Alignment = XParagraphAlignment.Right;
                                                 tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);


                                                 if (Printneed == 1)
                                                 {

                                                     yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                 }
                                                 else
                                                 {
                                                     yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                 }
                                                 if (Printneed == 1)
                                                 {
                                                     yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                 }
                                                 else
                                                 {
                                                     yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                 }
                                                 //row line
                                                 graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                                             }

                                         }

                                         //column line0
                                         graph.DrawLine(XPens.Black, 40, 145, 40, yLine);

                                         //column line1
                                         graph.DrawLine(XPens.Black, 210, 145, 210, yLine);

                                         //column line2
                                         graph.DrawLine(XPens.Black, 290, 145, 290, yLine);

                                         //column line3
                                         graph.DrawLine(XPens.Black, 340, 145, 340, yLine);

                                         //column line4
                                         graph.DrawLine(XPens.Black, 415, 145, 415, yLine);

                                         //column line5
                                         graph.DrawLine(XPens.Black, 480, 145, 480, yLine);

                                         //column line6
                                         graph.DrawLine(XPens.Black, 555, 145, 555, yLine);


                                     }
                                 }
                             }
                         }
                         //for toatal amount section OF NO TAX SECTION

                         if (yPoint >= 758)
                         {
                             //FOOTER
                             string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                             if (File.Exists(Server.MapPath(strImageFooterLoc)))
                             {
                                 XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                 graph.DrawImage(xImgFoot, 40, 775);
                                 xImgFoot.Dispose();
                             }
                             pdfPage = pdf.AddPage();
                             /////
                             pdfPage.Orientation = PageOrientation.Portrait;

                             pdfPage.Width = size.Width;
                             pdfPage.Height = size.Height;
                             pdfPage.TrimMargins.Top = 5;
                             pdfPage.TrimMargins.Right = 5;
                             pdfPage.TrimMargins.Bottom = 5;
                             pdfPage.TrimMargins.Left = 5;

                             ////
                             graph.Dispose();
                             graph = XGraphics.FromPdfPage(pdfPage);
                             tf = new XTextFormatter(graph);
                             fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                             yPoint = 0;
                             yLine = 0;
                             yPoint = yPoint + 150;
                             yLine = yLine + 145;

                             graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                             //COMPANY NAME
                             intPageCount = intPageCount + 1;
                             tf.Alignment = XParagraphAlignment.Right;
                             tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                             string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                             if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                             {
                                 XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                 graph.DrawImage(xImgCmpnyName, 0, 30);
                                 xImgCmpnyName.Dispose();
                             }
                         }
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                         yPoint = yPoint + 22;
                         yLine = yLine + 22;
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                         //column line4
                         graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                         //column line6
                         graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                         //column line7
                         graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);





                         if (yPoint >= 758)
                         {
                             //FOOTER
                             string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                             if (File.Exists(Server.MapPath(strImageFooterLoc)))
                             {
                                 XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                 graph.DrawImage(xImgFoot, 40, 775);
                                 xImgFoot.Dispose();
                             }
                             pdfPage = pdf.AddPage();
                             /////
                             pdfPage.Orientation = PageOrientation.Portrait;

                             pdfPage.Width = size.Width;
                             pdfPage.Height = size.Height;
                             pdfPage.TrimMargins.Top = 5;
                             pdfPage.TrimMargins.Right = 5;
                             pdfPage.TrimMargins.Bottom = 5;
                             pdfPage.TrimMargins.Left = 5;

                             ////
                             graph.Dispose();
                             graph = XGraphics.FromPdfPage(pdfPage);
                             tf = new XTextFormatter(graph);
                             fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                             yPoint = 0;
                             yLine = 0;
                             yPoint = yPoint + 150;
                             yLine = yLine + 145;

                             graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                             //COMPANY NAME
                             intPageCount = intPageCount + 1;
                             tf.Alignment = XParagraphAlignment.Right;
                             tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                             string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                             if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                             {
                                 XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                 graph.DrawImage(xImgCmpnyName, 0, 30);
                                 xImgCmpnyName.Dispose();
                             }
                         }
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                         yPoint = yPoint + 22;
                         yLine = yLine + 22;
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                         //column line4
                         graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                         //column line6
                         graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                         //column line7
                         graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);


                         if (yPoint >= 758)
                         {
                             //FOOTER
                             string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                             if (File.Exists(Server.MapPath(strImageFooterLoc)))
                             {
                                 XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                 graph.DrawImage(xImgFoot, 40, 775);
                                 xImgFoot.Dispose();
                             }
                             pdfPage = pdf.AddPage();
                             /////
                             pdfPage.Orientation = PageOrientation.Portrait;

                             pdfPage.Width = size.Width;
                             pdfPage.Height = size.Height;
                             pdfPage.TrimMargins.Top = 5;
                             pdfPage.TrimMargins.Right = 5;
                             pdfPage.TrimMargins.Bottom = 5;
                             pdfPage.TrimMargins.Left = 5;

                             ////
                             graph.Dispose();
                             graph = XGraphics.FromPdfPage(pdfPage);
                             tf = new XTextFormatter(graph);
                             fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                             yPoint = 0;
                             yLine = 0;
                             yPoint = yPoint + 150;
                             yLine = yLine + 145;

                             graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                             //COMPANY NAME
                             intPageCount = intPageCount + 1;
                             tf.Alignment = XParagraphAlignment.Right;
                             tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                             string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                             if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                             {
                                 XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                 graph.DrawImage(xImgCmpnyName, 0, 30);
                                 xImgCmpnyName.Dispose();
                             }
                         }
                         tf.Alignment = XParagraphAlignment.Right;
                         tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                         tf.Alignment = XParagraphAlignment.Right;

                         if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                         {
                             XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                             graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                             xImgCurrencySymbl.Dispose();
                         }

                         tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 67, pdfPage.Height.Point), XStringFormats.TopLeft);
                         yPoint = yPoint + 22;
                         yLine = yLine + 22;
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                         //column line4
                         graph.DrawLine(XPens.Black, 40, yLine - 25, 40, yLine);
                         //column line6
                         graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                         //column line7
                         graph.DrawLine(XPens.Black, 555, yLine - 25, 555, yLine);
                         string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                         double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 380);
                         if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                         {
                             //FOOTER
                             string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                             if (File.Exists(Server.MapPath(strImageFooterLoc)))
                             {
                                 XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                 graph.DrawImage(xImgFoot, 40, 775);
                                 xImgFoot.Dispose();
                             }
                             pdfPage = pdf.AddPage();
                             /////
                             pdfPage.Orientation = PageOrientation.Portrait;

                             pdfPage.Width = size.Width;
                             pdfPage.Height = size.Height;
                             pdfPage.TrimMargins.Top = 5;
                             pdfPage.TrimMargins.Right = 5;
                             pdfPage.TrimMargins.Bottom = 5;
                             pdfPage.TrimMargins.Left = 5;

                             ////
                             graph.Dispose();
                             graph = XGraphics.FromPdfPage(pdfPage);
                             tf = new XTextFormatter(graph);
                             fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                             yPoint = 0;
                             yLine = 0;
                             yPoint = yPoint + 150;
                             yLine = yLine + 145;

                             graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);

                             //COMPANY NAME
                             intPageCount = intPageCount + 1;
                             tf.Alignment = XParagraphAlignment.Right;
                             tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                             string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                             if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                             {
                                 XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                 graph.DrawImage(xImgCmpnyName, 0, 30);
                                 xImgCmpnyName.Dispose();
                             }
                         }

                         tf.Alignment = XParagraphAlignment.Left;
                         tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(45, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);

                         yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                         yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                         //row line
                         graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                         //column line4
                         graph.DrawLine(XPens.Black, 40, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 40, yLine);
                         //column line7
                         graph.DrawLine(XPens.Black, 555, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 555, yLine);


                     }

                     yPoint = yPoint + 30;
                     yLine = yLine + 30;
                 }


                 double dItmComments = 0;
                 if (StrComments != "")
                 {
                     dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                     yPoint = yPoint + 22;
                     yLine = yLine + 22;
                     graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                     graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                     yPoint = yPoint + 22;
                     yLine = yLine + 22;
                     // StrComments
                     tf.Alignment = XParagraphAlignment.Left;
                     tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                 }

                 yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                 yLine = yLine + 22 + Convert.ToInt32(dItmComments);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 75;
                yLine = yLine + 75;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    // graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomNotax = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomNotax)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomNotax));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";




                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);

                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();
            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }

    private void PdfTermsToLastCorporateAdvancedGeneration()
    {
        try
        {
            if (Request.QueryString["LeadId"] != null)
            {
                clsCommonLibrary objComm = new clsCommonLibrary();
                ////////////////
                int intQtnId = Convert.ToInt32(hiddenQuotationId.Value);
                clsCommonLibrary objCommon = new clsCommonLibrary();
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                clsBusinessLayer objBusiness = new clsBusinessLayer();
                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.CurrencyId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.QuotationId = intQtnId;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }

                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtCustmrDtl = new DataTable();
                DataTable dtCorpDtl = new DataTable();
                DataTable dtActvUsrDtl = new DataTable();
                DataTable dtTeamHeadDtl = new DataTable();

                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);

                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                dtActvUsrDtl = objBusinessLayerQuotation.ReadActvUsrDtlForPDF(objEntityQuotation);
                dtTeamHeadDtl = objBusinessLayerQuotation.ReadTeamHeadDtlForPDF(objEntityQuotation);
                dtCustmrDtl = objBusinessLayerQuotation.ReadCstmrDtlForPDF(objEntityQuotation);

                dtCorpDtl = objBusinessLayerQuotation.ReadCorpDtlForPDF(objEntityQuotation);


                /////
                PdfSharp.Drawing.XSize size = PageSizeConverter.ToSize(PdfSharp.PageSize.A4);


                string strItemName = "";
                string strProductSts = "";
                string StrComments = "";
                int Printneed = 0;

                string strItemDescription = "";
                double dItmDesc = 0;
                string strUnitName = "";
                string strQuantity = "";
                string strCostPrice = "";
                string strHikePerc = "";
                string strRate = "";
                string strRateWithComma = "";
                string strTaxName = "";
                string strTaxPerc = "";
                string strTaxAmount = "";
                string strTaxAmountWithComma = "";
                string strDiscAmnt = "";
                string strDiscAmntWithComma = "";
                string strAmount = "";
                string strAmountWithComma = "";
                string strCustmrName = "";
                string strCustmrAddr = "";
                string strCustmrAddr1 = "";
                string strCustmrAddr2 = "";
                string strCustmrAddr3 = "";
                string strCustmrZipCode = "";
                string strCustmrCountry = "";
                string strQtnRefNumber = "";
                string strQtnDate = "";

                string strActvUsrName = "";
                string strActvUsrDsgn = "";

                string strGrossAmount = "";
                string strTotalDiscAmnt = "";
                string strNetAmount = "";
                string strNetAmountWithComma = "";
                string strGrossAmountWithComma = "";
                string strTotalDiscAmntWithComma = "";

                string strCorpName = "";
                string strCorpAddr = "";
                string strCorpZipCode = "";
                string strCorpCountry = "";

                string strPriceTerm = "";
                string strManufacturerTerm = "";
                string strPaymentTerm = "";
                string strDeliveryPeriod = "";
                string strDeliveryTerm = "";
                string strValidityTerm = "";
                string strWarrantyTerm = "";
                string strCurrencySymbolPath = "";

                int intPageCount = 1;
                int yPoint = 0;
                int yLine = 0;
                PdfDocument pdf = new PdfDocument();
                pdf.Info.Title = "Compzit-QOT-";
                PdfPage pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                XFont fontCategory = new XFont("Calibri", 9, XFontStyle.Bold);
                XGraphics graph = XGraphics.FromPdfPage(pdfPage);
                XTextFormatter tf = new XTextFormatter(graph);
                XFont font = new XFont("Calibri", 18, XFontStyle.Bold);
                XFont fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                XFont fontEntryNetAmnt = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontEntryAmntInWords = new XFont("Calibri", 8, XFontStyle.Bold);
                XFont fontEntryHeading = new XFont("Calibri", 9, XFontStyle.Bold);
                XFont fontCustmrName = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontCustmrDtl = new XFont("Calibri", 10, XFontStyle.Regular);
                XFont fontRefDate = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontBillMaterialHeading = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontSubject = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontSubjectContent = new XFont("Calibri", 10, XFontStyle.Underline);
                XFont fontTermsAndConditionHeading = new XFont("Calibri", 12, XFontStyle.Bold);
                XFont fontFooterMsg = new XFont("Calibri", 11, XFontStyle.Regular);
                XFont fontFooterActvUsr = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontFooterTeamHeadDtl = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtlHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontOffer = new XFont("Calibri", 11, XFontStyle.Bold);
                XFont fontTermsDtl = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontNoteHeading = new XFont("Calibri", 10, XFontStyle.Bold);
                XFont fontNote = new XFont("Calibri", 9, XFontStyle.Regular);
                XFont fontPageNumber = new XFont("Calibri", 9, XFontStyle.Regular);

                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString("1", fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageLoc)))
                {
                    XImage xImg = XImage.FromFile(Server.MapPath(strImageLoc));
                    graph.DrawImage(xImg, 0, 30);
                    xImg.Dispose();
                }
                if (dtQtn.Rows.Count > 0)
                {

                    strGrossAmount = dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtQtn.Rows[0]["LDQUOT_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    strQtnDate = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
                    strQtnRefNumber = dtQtn.Rows[0]["LDQUOT_REF_NUMBER"].ToString();
                    pdf.Info.Title = "Compzit-QOT-" + strQtnRefNumber;
                    strPriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                    strManufacturerTerm = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
                    strPaymentTerm = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
                    strDeliveryPeriod = dtQtn.Rows[0]["LDQUOT_DLVRY_PERIOD"].ToString();
                    strDeliveryTerm = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
                    strValidityTerm = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
                    strWarrantyTerm = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
                    StrComments = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();
                }

                if (dtCustmrDtl.Rows.Count > 0)
                {
                    if (dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() != "")
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["NAMEPRFX_NAME"].ToString() + ". " + dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();

                    }
                    else
                    {
                        strCustmrName = dtCustmrDtl.Rows[0]["LEADS_CSTMR_NAME"].ToString();
                    }

                    strCustmrAddr1 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS1"].ToString();
                    strCustmrAddr2 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS2"].ToString();
                    strCustmrAddr3 = dtCustmrDtl.Rows[0]["LEADS_ADDRESS3"].ToString();
                    strCustmrZipCode = dtCustmrDtl.Rows[0]["LEADS_ZIP_CODE"].ToString();
                    strCustmrCountry = dtCustmrDtl.Rows[0]["CNTRY_NAME"].ToString();
                }
                if (dtCorpDtl.Rows.Count > 0)
                {
                    strCorpName = dtCorpDtl.Rows[0]["CORPRT_NAME"].ToString();
                    strCorpAddr = dtCorpDtl.Rows[0]["CORPRT_ADDR1"].ToString();
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR2"].ToString();
                    }
                    if (dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString() != "")
                    {
                        strCorpAddr = strCorpAddr + "," + dtCorpDtl.Rows[0]["CORPRT_ADDR3"].ToString();
                    }
                    strCorpZipCode = dtCorpDtl.Rows[0]["CORPRT_ZIP"].ToString();
                    strCorpCountry = dtCorpDtl.Rows[0]["CNTRY_NAME"].ToString();

                }

                yPoint = yPoint + 140;
                yLine = yLine + 135;

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Date :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnDate, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 16;
                yLine = yLine + 16;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Ref  :", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strQtnRefNumber, fontCustmrDtl, XBrushes.Black, new XRect(70, yPoint, 470, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 25;
                yLine = yLine + 25;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("To ,", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 30, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCustmrName, fontCustmrName, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 15;
                yLine = yLine + 15;

                if ((strCustmrAddr2 != "") || (strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                {
                    strCustmrAddr = strCustmrAddr1 + ",";

                }
                else
                {
                    strCustmrAddr = strCustmrAddr1 + ".";

                }
                if (strCustmrAddr2 != "")
                {

                    if ((strCustmrAddr3 != "") || (strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ",";

                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr2 + ".";
                    }

                }
                if (strCustmrAddr3 != "")
                {

                    if ((strCustmrZipCode != "") || (strCustmrCountry != ""))
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ",";
                    }
                    else
                    {
                        strCustmrAddr = strCustmrAddr + strCustmrAddr3 + ".";
                    }


                }
                if (strCustmrZipCode != "")
                {

                    if ((strCustmrCountry != ""))
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ",";
                    }
                    else
                    {

                        strCustmrAddr = strCustmrAddr + strCustmrZipCode + ".";
                    }


                }

                if (strCustmrCountry != "")
                {

                    strCustmrAddr = strCustmrAddr + strCustmrCountry + ".";

                }

                double dCustAddr = MeasureHeight(graph, strCustmrAddr, fontCustmrDtl, 160);
                tf.Alignment = XParagraphAlignment.Left;

                tf.DrawString(strCustmrAddr, fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 200, pdfPage.Height.Point), XStringFormats.TopLeft);



                yPoint = yPoint + Convert.ToInt32(dCustAddr);
                yLine = yLine + Convert.ToInt32(dCustAddr);

                yPoint = yPoint + 12;
                yLine = yLine + 12;
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("Sir,", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 20;
                yLine = yLine + 20;



                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("With reference to your enquiry for the subject matter,we are pleased to submit our most competitive offer as follows:-", fontCustmrDtl, XBrushes.Black, new XRect(40, yPoint, 500, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 22;
                yLine = yLine + 22;
                //START

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;


                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                
                int COUNT = 0;
                foreach (DataRow dtGroupRow in dtQtnDtlGroup.Rows)
                {
                    COUNT++;
                    //for calculate total for group
                    strGrossAmount = dtGroupRow["QTNDTLGRP_GROSS_AMT"].ToString();
                    strTotalDiscAmnt = dtGroupRow["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString();
                    strNetAmount = dtGroupRow["QTNDTLGRP_NET_AMT"].ToString();

                    strCurrencySymbolPath = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CURRENCY_SYMBOL) + hiddenCurrencySymbol.Value;
                    strNetAmountWithComma = objBusiness.AddCommasForNumberSeperation(strNetAmount, objEntityCommon);
                    strGrossAmountWithComma = objBusiness.AddCommasForNumberSeperation(strGrossAmount, objEntityCommon);
                    strTotalDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strTotalDiscAmnt, objEntityCommon);
                    if (COUNT > 1)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;
                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }

                    }

                    string strGroupName = dtGroupRow["QTNDTLGRP_NAME"].ToString().ToUpper();

                    tf.Alignment = XParagraphAlignment.Center;
                    tf.DrawString("BILL OF QUANTITIES AS " + strGroupName, fontBillMaterialHeading, XBrushes.Black, new XRect(0, yPoint, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                    yPoint = yPoint + 13;
                    graph.DrawLine(XPens.Black, 251, yPoint, 344, yPoint);
                    yLine = yLine + 22;
                    int yLineStart = yPoint + 3;
                    yPoint = yPoint + 9;

                    if (hiddenTaxEnabled.Value == "1")
                    {
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;

                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                        //column line8
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();

                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    {
                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine+22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine+22);
                                        yPoint = yPoint + 22;
                                        yLine = yLine + 22;
                                    }
                                    else
                                    {//column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint +22+ Convert.ToInt32(CatHeight);
                                        yLine = yLine+22 + Convert.ToInt32(CatHeight);
                                    }
                                    

                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxPerc = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    yLineStart = 145;

                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    //row line
                                                    //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    graph.DrawLine(XPens.Black, 20, 145, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, 145, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, 145, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, 145, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, 145, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, 145, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, 145, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, 145, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, 145, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);


                                                    CatLineStart = yLine;
                                                }


                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, CatLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, CatLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, CatLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, CatLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, CatLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, CatLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {

                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());


                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();
                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                                                {
                                                    strTaxName = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);
                                                }
                                                else
                                                {
                                                    strTaxName = "";
                                                    strTaxPerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString();
                                                    strTaxAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString();
                                                    //////
                                                    strTaxAmount = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxPerc = objComm.Format(Convert.ToInt32(hiddenFloatingValueTaxPercentage.Value), "0");
                                                    strTaxAmountWithComma = objBusiness.AddCommasForNumberSeperation(strTaxAmount, objEntityCommon);

                                                }
                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);
                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);

                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;
                                                    yLineStart = 145;
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();

                                                    }
                                                    //intCounter++;
                                                    //row line
                                                    //  graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX %", fontEntryHeading, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TAX", fontEntryHeading, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;

                                                    graph.DrawLine(XPens.Black, 20, 145, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 175, 145, 175, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 245, 145, 245, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 295, 145, 295, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 365, 145, 365, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 410, 145, 410, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 460, 145, 460, yLine);
                                                    //column line7
                                                    graph.DrawLine(XPens.Black, 515, 145, 515, yLine);
                                                    //column line8
                                                    graph.DrawLine(XPens.Black, 575, 145, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                }


                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(180, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(250, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(300, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxPerc, fontEntry, XBrushes.Black, new XRect(370, yPoint, 35, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strTaxAmountWithComma, fontEntry, XBrushes.Black, new XRect(415, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(465, yPoint, 45, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                //row line
                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 175, yLineStart, 175, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 245, yLineStart, 245, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 295, yLineStart, 295, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 365, yLineStart, 365, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 410, yLineStart, 410, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 460, yLineStart, 460, yLine);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 515, yLineStart, 515, yLine);
                                        //column line8
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    }
                                }
                            }
                        }


                        //for toatal amount section OF TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 758)
                        { //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;
                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(400, yPoint, 105, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 517, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(520, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 515, yLine - 25, 515, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {//FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;


                        ///////////////////
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 550, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                    }
                    else
                    {
                        //NO TAX

                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;

                        yLine = yLine + 22;

                        //column line0
                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                        //column line1
                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                        //column line2
                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                        //column line3
                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                        //column line5
                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                        //column line6
                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        foreach (DataRow dtcat in dtQtnCatDtl.Rows)
                        {
                            if (dtcat["QUOTNDTLGRP_ID"].ToString() == dtGroupRow["QUOTNDTLGRP_ID"].ToString())
                            {
                                decimal decAmount = 0;
                                if (dtcat["CATGRY_NAME"].ToString() != "")
                                {
                                    string CategaryName = dtcat["CATGRY_NAME"].ToString();
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString("CATEGORY : ", fontCategory, XBrushes.Black, new XRect(45, yPoint, 60, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Left;
                                    tf.DrawString(CategaryName, fontEntry, XBrushes.Black, new XRect(95, yPoint, 300, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    double CatHeight = MeasureHeight(graph, CategaryName, fontEntry, 300);


                                    if (CatHeight < 22)
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine+22);
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine+22);
                                        yPoint = yPoint + 22;

                                        yLine = yLine + 22;
                                    }
                                    else
                                    { //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine + 22 + Convert.ToInt32(CatHeight));
                                        //column line7
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine + 22 + Convert.ToInt32(CatHeight));
                                        yPoint = yPoint+22 + Convert.ToInt32(CatHeight);

                                        yLine = yLine+22 + Convert.ToInt32(CatHeight);
                                    }

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                    int CatLineStart = yLine;
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                decAmount = decAmount + Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"]);
                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());

                                                dItmDesc = 0;

                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                                    yLineStart = 145;


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    CatLineStart = yLine;
                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }

                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, CatLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, CatLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, CatLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, CatLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, CatLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, CatLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, CatLineStart, 575, yLine);


                                    }
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString("SUB TOTAL AMOUNT: ", fontCategory, XBrushes.Black, new XRect(385, yPoint, 107, pdfPage.Height.Point), XStringFormats.TopLeft);
                                    tf.Alignment = XParagraphAlignment.Right;
                                    tf.DrawString(decAmount.ToString(), fontCategory, XBrushes.Black, new XRect(500, yPoint, 52, pdfPage.Height.Point), XStringFormats.TopLeft);

                                    //column line0
                                    graph.DrawLine(XPens.Black, 20, yLine, 20, yLine + 18);
                                    graph.DrawLine(XPens.Black, 460, CatLineStart, 460, yLine + 18);
                                    graph.DrawLine(XPens.Black, 515, yLine, 515, yLine + 18);
                                    //column line7
                                    graph.DrawLine(XPens.Black, 575, yLine, 575, yLine + 18);

                                    yPoint = yPoint + 18;

                                    yLine = yLine + 18;
                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                }
                                else
                                {
                                    if (dtQtnDtl.Rows.Count > 0)
                                    {
                                        for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                                        {
                                            if (dtGroupRow["QUOTNDTLGRP_ID"].ToString() == dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() && dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString() == dtcat["CATGRY_NAME"].ToString())
                                            {
                                                if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                                                {
                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                                                }
                                                else
                                                {

                                                    strItemName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                                                }
                                                strItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                                                strProductSts = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                                                Printneed = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());

                                                dItmDesc = 0;

                                                dItmDesc = 0;
                                                strUnitName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();

                                                strQuantity = dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString();
                                                strCostPrice = dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString();
                                                strHikePerc = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                                                strRate = dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString();
                                                strRateWithComma = objBusiness.AddCommasForNumberSeperation(strRate, objEntityCommon);

                                                strDiscAmnt = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString();
                                                strDiscAmntWithComma = objBusiness.AddCommasForNumberSeperation(strDiscAmnt, objEntityCommon);
                                                strAmount = dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString();
                                                strAmountWithComma = objBusiness.AddCommasForNumberSeperation(strAmount, objEntityCommon);

                                                if (strItemDescription != "")
                                                {
                                                    int intItemDescLength = strItemDescription.Length;

                                                    dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                MaxDescNoTax:
                                                    if (dItmDesc > 580 && intItemDescLength > 0)
                                                    {

                                                        strItemDescription = strItemDescription.Substring(0, intItemDescLength - 100);
                                                        intItemDescLength = strItemDescription.Length;
                                                        dItmDesc = MeasureHeight(graph, strItemDescription, fontEntry, 117);
                                                        goto MaxDescNoTax;

                                                    }
                                                }
                                                if (yPoint + Convert.ToInt32(dItmDesc) >= 758)
                                                {
                                                    //FOOTER
                                                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                                                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                                                    {
                                                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                                        graph.DrawImage(xImgFoot, 40, 775);
                                                        xImgFoot.Dispose();
                                                    }
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                                    yLineStart = 145;


                                                    pdfPage = pdf.AddPage();
                                                    /////
                                                    pdfPage.Orientation = PageOrientation.Portrait;

                                                    pdfPage.Width = size.Width;
                                                    pdfPage.Height = size.Height;
                                                    pdfPage.TrimMargins.Top = 5;
                                                    pdfPage.TrimMargins.Right = 5;
                                                    pdfPage.TrimMargins.Bottom = 5;
                                                    pdfPage.TrimMargins.Left = 5;

                                                    ////
                                                    graph.Dispose();
                                                    graph = XGraphics.FromPdfPage(pdfPage);
                                                    tf = new XTextFormatter(graph);
                                                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                                                    yPoint = 0;
                                                    yLine = 0;
                                                    yPoint = yPoint + 150;
                                                    yLine = yLine + 145;

                                                    // graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                                                    //COMPANY NAME
                                                    intPageCount = intPageCount + 1;
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                                                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                                                    {
                                                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                                        graph.DrawImage(xImgCmpnyName, 0, 30);
                                                        xImgCmpnyName.Dispose();
                                                    }

                                                    //row line
                                                    graph.DrawLine(XPens.Black, 40, yLine, 555, yLine);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("ITEM NAME", fontEntryHeading, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString("UNIT", fontEntryHeading, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("QUANTITY", fontEntryHeading, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("SELLING PRICE", fontEntryHeading, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("DISCOUNT", fontEntryHeading, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    tf.Alignment = XParagraphAlignment.Right;
                                                    tf.DrawString("TOTAL", fontEntryHeading, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                    yPoint = yPoint + 22;

                                                    yLine = yLine + 22;
                                                    //column line0
                                                    graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                                    //column line1
                                                    graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                                    //column line2
                                                    graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                                    //column line3
                                                    graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                                    //column line4
                                                    graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                                    //column line5
                                                    graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                                    //column line6
                                                    graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);
                                                    //row line
                                                    graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                                }

                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strItemName, fontEntry, XBrushes.Black, new XRect(25, yPoint, 180, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                double dItmsts = 0;
                                                dItmsts = MeasureHeight(graph, strProductSts, fontEntry, 120);
                                                if (strProductSts != "" && strProductSts != "")
                                                {
                                                    strProductSts = "( " + strProductSts + " )";
                                                    double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                    tf.Alignment = XParagraphAlignment.Left;
                                                    tf.DrawString(strProductSts, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee), 145, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    if (strItemDescription != "")
                                                    {
                                                        double dItmNamee = MeasureHeight(graph, strItemName, fontEntry, 120);
                                                        tf.Alignment = XParagraphAlignment.Left;
                                                        tf.DrawString("DESCRIPTION:" + strItemDescription, fontEntry, XBrushes.Black, new XRect(25, yPoint + Convert.ToInt32(dItmNamee) + Convert.ToInt32(dItmsts), 145, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                    }

                                                }
                                                tf.Alignment = XParagraphAlignment.Left;
                                                tf.DrawString(strUnitName, fontEntry, XBrushes.Black, new XRect(215, yPoint, 70, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strQuantity, fontEntry, XBrushes.Black, new XRect(295, yPoint, 40, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strRateWithComma, fontEntry, XBrushes.Black, new XRect(345, yPoint, 65, pdfPage.Height.Point), XStringFormats.TopLeft);
                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(420, yPoint, 55, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                tf.Alignment = XParagraphAlignment.Right;
                                                tf.DrawString(strAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);

                                                if (Printneed == 1)
                                                {

                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yPoint = yPoint + 22 + Convert.ToInt32(dItmsts);
                                                }
                                                if (Printneed == 1)
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmDesc) + Convert.ToInt32(dItmsts);
                                                }
                                                else
                                                {
                                                    yLine = yLine + 22 + Convert.ToInt32(dItmsts);
                                                }

                                                graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                                            }

                                        }

                                        //column line0
                                        graph.DrawLine(XPens.Black, 20, yLineStart, 20, yLine);

                                        //column line1
                                        graph.DrawLine(XPens.Black, 210, yLineStart, 210, yLine);

                                        //column line2
                                        graph.DrawLine(XPens.Black, 290, yLineStart, 290, yLine);

                                        //column line3
                                        graph.DrawLine(XPens.Black, 340, yLineStart, 340, yLine);

                                        //column line4
                                        graph.DrawLine(XPens.Black, 415, yLineStart, 415, yLine);

                                        //column line5
                                        graph.DrawLine(XPens.Black, 480, yLineStart, 480, yLine);

                                        //column line6
                                        graph.DrawLine(XPens.Black, 575, yLineStart, 575, yLine);


                                    }
                                }
                            }
                        }
                        //for toatal amount section OF NO TAX SECTION

                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("GROSS AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strGrossAmountWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);





                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("BILL-WISE DISCOUNT AMOUNT", fontEntry, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(strTotalDiscAmntWithComma, fontEntry, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);


                        if (yPoint >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString("NET AMOUNT", fontEntryNetAmnt, XBrushes.Black, new XRect(345, yPoint, 133, pdfPage.Height.Point), XStringFormats.TopLeft);
                        tf.Alignment = XParagraphAlignment.Right;

                        if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                        {
                            XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                            graph.DrawImage(xImgCurrencySymbl, 483, yPoint + 2);
                            xImgCurrencySymbl.Dispose();
                        }

                        tf.DrawString(strNetAmountWithComma, fontEntryNetAmnt, XBrushes.Black, new XRect(485, yPoint, 87, pdfPage.Height.Point), XStringFormats.TopLeft);
                        yPoint = yPoint + 22;
                        yLine = yLine + 22;
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - 25, 20, yLine);
                        //column line6
                        graph.DrawLine(XPens.Black, 480, yLine - 25, 480, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - 25, 575, yLine);
                        string strNetAmntInWords = ConvertCurrencyToWords(strNetAmount);
                        double dNetAmntInWords = MeasureHeight(graph, strNetAmntInWords, fontEntryAmntInWords, 400);
                        if (yPoint + Convert.ToInt32(dNetAmntInWords) >= 758)
                        {
                            //FOOTER
                            string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                            if (File.Exists(Server.MapPath(strImageFooterLoc)))
                            {
                                XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                                graph.DrawImage(xImgFoot, 40, 775);
                                xImgFoot.Dispose();
                            }
                            pdfPage = pdf.AddPage();
                            /////
                            pdfPage.Orientation = PageOrientation.Portrait;

                            pdfPage.Width = size.Width;
                            pdfPage.Height = size.Height;
                            pdfPage.TrimMargins.Top = 5;
                            pdfPage.TrimMargins.Right = 5;
                            pdfPage.TrimMargins.Bottom = 5;
                            pdfPage.TrimMargins.Left = 5;

                            ////
                            graph.Dispose();
                            graph = XGraphics.FromPdfPage(pdfPage);
                            tf = new XTextFormatter(graph);
                            fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                            yPoint = 0;
                            yLine = 0;
                            yPoint = yPoint + 150;
                            yLine = yLine + 145;

                            graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);

                            //COMPANY NAME
                            intPageCount = intPageCount + 1;
                            tf.Alignment = XParagraphAlignment.Right;
                            tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                            string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                            if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                            {
                                XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                                graph.DrawImage(xImgCmpnyName, 0, 30);
                                xImgCmpnyName.Dispose();
                            }
                        }

                        tf.Alignment = XParagraphAlignment.Left;
                        tf.DrawString(strNetAmntInWords, fontEntryAmntInWords, XBrushes.Black, new XRect(25, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                        yPoint = yPoint + 18 + Convert.ToInt32(dNetAmntInWords);
                        yLine = yLine + 18 + Convert.ToInt32(dNetAmntInWords);
                        //row line
                        graph.DrawLine(XPens.Black, 20, yLine, 575, yLine);
                        //column line4
                        graph.DrawLine(XPens.Black, 20, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 20, yLine);
                        //column line7
                        graph.DrawLine(XPens.Black, 575, yLine - (18 + Convert.ToInt32(dNetAmntInWords)), 575, yLine);


                    }
                    yPoint = yPoint + 30;
                    yLine = yLine + 30;
                }

                     double dItmComments = 0;
                     if (StrComments != "")
                     {
                         dItmComments = MeasureHeight(graph, StrComments, fontEntryAmntInWords, 120);
                         yPoint = yPoint + 22;
                         yLine = yLine + 22;
                         graph.DrawString("COMMENTS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                         graph.DrawLine(XPens.Black, 40, yLine + 14.5, 100, yLine + 14.5);
                         yPoint = yPoint + 22;
                         yLine = yLine + 22;
                         // StrComments
                         tf.Alignment = XParagraphAlignment.Left;
                         tf.DrawString(StrComments, fontEntryAmntInWords, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                     }
                    yPoint = yPoint + 22 + Convert.ToInt32(dItmComments);

                    yLine = yLine + 22 + Convert.ToInt32(dItmComments);
                //FOOTER
                string strImageFooterLocBottomBOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBottomBOQ)))
                {
                    XImage xImgFootBottom = XImage.FromFile(Server.MapPath(strImageFooterLocBottomBOQ));
                    graph.DrawImage(xImgFootBottom, 40, 775);
                    xImgFootBottom.Dispose();

                }
                //NEW PAGE
                pdfPage = pdf.AddPage();
                /////
                pdfPage.Orientation = PageOrientation.Portrait;

                pdfPage.Width = size.Width;
                pdfPage.Height = size.Height;
                pdfPage.TrimMargins.Top = 5;
                pdfPage.TrimMargins.Right = 5;
                pdfPage.TrimMargins.Bottom = 5;
                pdfPage.TrimMargins.Left = 5;

                ////
                graph.Dispose();
                graph = XGraphics.FromPdfPage(pdfPage);
                tf = new XTextFormatter(graph);
                fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                yPoint = 0;
                yLine = 0;
                yPoint = yPoint + 150;
                yLine = yLine + 145;

                //COMPANY NAME
                intPageCount = intPageCount + 1;
                tf.Alignment = XParagraphAlignment.Right;
                tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 18, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                string strImageCmpnyNameBOQHeader = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                if (File.Exists(Server.MapPath(strImageCmpnyNameBOQHeader)))
                {
                    XImage xImgCmpnyNameBOQHeader = XImage.FromFile(Server.MapPath(strImageCmpnyNameBOQHeader));
                    graph.DrawImage(xImgCmpnyNameBOQHeader, 0, 30);
                    xImgCmpnyNameBOQHeader.Dispose();
                }



                graph.DrawString("TERMS & CONDITIONS", fontTermsAndConditionHeading, XBrushes.Black, new XRect(40, yLine, pdfPage.Width.Point, pdfPage.Height.Point), XStringFormats.TopLeft);
                graph.DrawLine(XPens.Black, 40, yLine + 14.5, 152, yLine + 14.5);
                yPoint = yPoint + 22;
                yLine = yLine + 22;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("OFFER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                foreach (DataRow dT in dtQtnDtlGroup.Rows)
                {
                    if (yPoint >= 755)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    string StrGrpNetAmount = dT["QTNDTLGRP_NET_AMT"].ToString();
                    StrGrpNetAmount = objBusiness.AddCommasForNumberSeperation(StrGrpNetAmount, objEntityCommon);
                    string strAttchdBy = dT["QTNDTLGRP_NAME"].ToString();

                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    if (File.Exists(Server.MapPath(strCurrencySymbolPath)))
                    {
                        XImage xImgCurrencySymbl = XImage.FromFile(Server.MapPath(strCurrencySymbolPath));
                        graph.DrawImage(xImgCurrencySymbl, 160, yPoint + 4);

                        xImgCurrencySymbl.Dispose();
                    }
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(StrGrpNetAmount + " (As Per " + strAttchdBy + " list)", fontOffer, XBrushes.Black, new XRect(172, yPoint, 395, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21;
                    yLine = yLine + 21;
                }


                /////////////////////////------------/////////////////////////////
                if (strPriceTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strPriceTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PRICE TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPriceTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);




                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }


                if (strPaymentTerm != "")
                {

                    double dPayment = MeasureHeight(graph, strPaymentTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPayment) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("PAYMENT TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strPaymentTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dPayment);
                    yLine = yLine + 21 + Convert.ToInt32(dPayment);

                }


                if (strValidityTerm != "")
                {
                    double dValidity = MeasureHeight(graph, strValidityTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dValidity) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("QUOTE VALIDITY", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strValidityTerm + " Days.", fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dValidity);
                    yLine = yLine + 21 + Convert.ToInt32(dValidity);
                }

                if (strDeliveryTerm != "")
                {
                    double dDelivery = MeasureHeight(graph, strDeliveryTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dDelivery) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("DELIVERY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strDeliveryTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dDelivery);
                    yLine = yLine + 21 + Convert.ToInt32(dDelivery);
                }

                if (strWarrantyTerm != "")
                {
                    double dWarranty = MeasureHeight(graph, strWarrantyTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dWarranty) >= 758)
                    {
                        //FOOTER
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;

                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }

                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("WARRANTY TERMS", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strWarrantyTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);


                    yPoint = yPoint + 21 + Convert.ToInt32(dWarranty);
                    yLine = yLine + 21 + Convert.ToInt32(dWarranty);
                }

                if (strManufacturerTerm != "")
                {

                    double dPrice = MeasureHeight(graph, strManufacturerTerm, fontTermsDtl, 380);
                    if (yPoint + Convert.ToInt32(dPrice) >= 758)
                    {
                        string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                        if (File.Exists(Server.MapPath(strImageFooterLoc)))
                        {
                            XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                            graph.DrawImage(xImgFoot, 40, 775);
                            xImgFoot.Dispose();
                        }
                        pdfPage = pdf.AddPage();
                        /////
                        pdfPage.Orientation = PageOrientation.Portrait;

                        pdfPage.Width = size.Width;
                        pdfPage.Height = size.Height;
                        pdfPage.TrimMargins.Top = 5;
                        pdfPage.TrimMargins.Right = 5;
                        pdfPage.TrimMargins.Bottom = 5;
                        pdfPage.TrimMargins.Left = 5;

                        ////
                        graph.Dispose();
                        graph = XGraphics.FromPdfPage(pdfPage);
                        tf = new XTextFormatter(graph);
                        fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                        yPoint = 0;
                        yLine = 0;
                        yPoint = yPoint + 150;
                        yLine = yLine + 145;


                        //COMPANY NAME
                        intPageCount = intPageCount + 1;
                        tf.Alignment = XParagraphAlignment.Right;
                        tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                        string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                        if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                        {
                            XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                            graph.DrawImage(xImgCmpnyName, 0, 30);
                            xImgCmpnyName.Dispose();
                        }
                    }


                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString("MANUFACTURER", fontTermsDtlHeading, XBrushes.Black, new XRect(40, yPoint, 100, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(":", fontTermsDtlHeading, XBrushes.Black, new XRect(140, yPoint, 2, pdfPage.Height.Point), XStringFormats.TopLeft);
                    tf.Alignment = XParagraphAlignment.Left;
                    tf.DrawString(strManufacturerTerm, fontTermsDtl, XBrushes.Black, new XRect(160, yPoint, 380, pdfPage.Height.Point), XStringFormats.TopLeft);

                    yPoint = yPoint + 21 + Convert.ToInt32(dPrice);
                    yLine = yLine + 21 + Convert.ToInt32(dPrice);

                }

                //----------------footer//////////////////
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }

                strActvUsrName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                strActvUsrDsgn = dtActvUsrDtl.Rows[0]["DSGN_NAME"].ToString();
                string strActUserDtl = "";
                string strActMobDtl = " MOB: " + dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() + ")";
                string strActUserName = dtActvUsrDtl.Rows[0]["USR_NAME"].ToString();
                string strEmailDtl = "(EMAIL: " + dtActvUsrDtl.Rows[0]["USR_EMAIL"].ToString();
                if (dtActvUsrDtl.Rows[0]["USR_MOBILE"].ToString() != "")
                {
                    string strDtl = strEmailDtl + " or" + strActMobDtl;
                    strActUserDtl = strActUserName + strDtl;
                }
                else
                {
                    string strDtl = strEmailDtl + ")";
                    strActUserDtl = strActUserName + strDtl;
                }
                string strFooterMsg = objComm.GetMsg(CL_Compzit.clsCommonLibrary.MSG_SECTION.QUOTATION_PDF_FOOTER_MSG);
                double dFooterMsg = MeasureHeight(graph, strFooterMsg, fontTermsDtl, 540);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strFooterMsg, fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.DrawString(strActUserDtl, fontFooterActvUsr, XBrushes.Black, new XRect(169, yPoint + Convert.ToInt32(dFooterMsg) + 2.7, 371, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 30 + Convert.ToInt32(dFooterMsg);
                yLine = yLine + 30 + Convert.ToInt32(dFooterMsg);

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }





                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString("For", fontFooterMsg, XBrushes.Black, new XRect(40, yPoint, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strCorpName + ",", fontFooterTeamHeadDtl, XBrushes.Black, new XRect(58, yPoint, 480, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                double dActvUsrName = MeasureHeight(graph, strActvUsrName, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrName) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrName, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                yPoint = yPoint + 12;
                yLine = yLine + 12;
                double dActvUsrDsgn = MeasureHeight(graph, strActvUsrDsgn, fontNote, 380);
                if (yPoint + Convert.ToInt32(dActvUsrDsgn) >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }


                tf.Alignment = XParagraphAlignment.Left;
                tf.DrawString(strActvUsrDsgn, fontFooterTeamHeadDtl, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);
                //NOTE
                yPoint = yPoint + 50;
                yLine = yLine + 50;
                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    //   graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("Thank you for your business!", fontRefDate, XBrushes.Black, new XRect(40, yPoint, 540, pdfPage.Height.Point), XStringFormats.TopLeft);

                yPoint = yPoint + 65;
                yLine = yLine + 65;

                if (yPoint >= 758)
                {
                    //FOOTER
                    string strImageFooterLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                    if (File.Exists(Server.MapPath(strImageFooterLoc)))
                    {
                        XImage xImgFoot = XImage.FromFile(Server.MapPath(strImageFooterLoc));
                        graph.DrawImage(xImgFoot, 40, 775);
                        xImgFoot.Dispose();
                    }
                    pdfPage = pdf.AddPage();
                    /////
                    pdfPage.Orientation = PageOrientation.Portrait;

                    pdfPage.Width = size.Width;
                    pdfPage.Height = size.Height;
                    pdfPage.TrimMargins.Top = 5;
                    pdfPage.TrimMargins.Right = 5;
                    pdfPage.TrimMargins.Bottom = 5;
                    pdfPage.TrimMargins.Left = 5;

                    ////
                    graph.Dispose();
                    graph = XGraphics.FromPdfPage(pdfPage);
                    tf = new XTextFormatter(graph);
                    fontEntry = new XFont("Calibri", 7, XFontStyle.Regular);
                    yPoint = 0;
                    yLine = 0;
                    yPoint = yPoint + 150;
                    yLine = yLine + 145;

                    // graph.DrawLine(XPens.Black, 340, yLine, 555, yLine);

                    //COMPANY NAME
                    intPageCount = intPageCount + 1;
                    tf.Alignment = XParagraphAlignment.Right;
                    tf.DrawString(intPageCount.ToString(), fontPageNumber, XBrushes.Black, new XRect(540, 22, 5, pdfPage.Height.Point), XStringFormats.TopLeft);
                    string strImageCmpnyNameLoc = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-header.png";
                    if (File.Exists(Server.MapPath(strImageCmpnyNameLoc)))
                    {
                        XImage xImgCmpnyName = XImage.FromFile(Server.MapPath(strImageCmpnyNameLoc));
                        graph.DrawImage(xImgCmpnyName, 0, 30);
                        xImgCmpnyName.Dispose();
                    }
                }
                tf.Alignment = XParagraphAlignment.Center;
                tf.DrawString("/*******************END OF QUOTE*******************/", fontRefDate, XBrushes.CornflowerBlue, new XRect(40, yPoint, 510, pdfPage.Height.Point), XStringFormats.TopLeft);

                //FOOTER
                string strImageFooterLocBootomEOQ = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.CORPORATE_LOGOS) + "quotation-footer.png";
                if (File.Exists(Server.MapPath(strImageFooterLocBootomEOQ)))
                {
                    XImage xImgFootBootomNotax = XImage.FromFile(Server.MapPath(strImageFooterLocBootomEOQ));
                    graph.DrawImage(xImgFootBootomNotax, 40, 775);
                    xImgFootBootomNotax.Dispose();
                }
                string pdfFilename = "Enquiry-" + strId + "_Quotation.pdf";


                string strImagePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
                pdf.Save(Server.MapPath(strImagePath) + pdfFilename);
                pdf.Close();
                pdf.Dispose();

            }
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }

    [WebMethod]
    public static void AddMailIds(string intLeadID, string strToMail, string strCcMail, string strBCcMail)
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation clsEntityLayerQuotation = new clsEntityLayerQuotation();

        clsEntityLayerQuotation.Lead_Id = Convert.ToInt32(intLeadID);
        objBusinessLayerQuotation.Delete_Adtnl_Mail(clsEntityLayerQuotation);
        clsEntityLayerQuotation.ToMail = strToMail;
        clsEntityLayerQuotation.CcMail = strCcMail;
        clsEntityLayerQuotation.BCcMail = strBCcMail;
        objBusinessLayerQuotation.Add_Adtnl_Mail(clsEntityLayerQuotation);
    }


    public void LoadProductAvailSts()
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

        DataTable dtPrdctAvl = objBusinessLayerQuotation.ReadAvailbltyStsload(objEntityQuotation);
        divPrdctStockOptions.InnerHtml = ConvertDataTableToHTMLSelectOptions(dtPrdctAvl);
        //if (dtPrdctAvl.Rows.Count > 0)
        //{
        //    cbxPrdctStock.DataSource = dtPrdctAvl;
        //    cbxPrdctStock.DataTextField = "LD_AVLSTS_NAME";
        //    cbxPrdctStock.DataValueField = "LD_AVLSTS_ID";
        //    cbxPrdctStock.DataBind();

        //}
        //cbxPrdctStock.Items.Insert(0, "--SELECT--");
    }

    [WebMethod]
    public static string[] LoadStockPrdct()
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();

        DataTable dt = objBusinessLayerQuotation.ReadAvailbltyStsload(objEntityQuotation);

        List<string> ListReturn = new List<string>();
        for (int intRow = 0; intRow < dt.Rows.Count; intRow++)
        {
            ListReturn.Add(string.Format("{0}<>{1}", dt.Rows[intRow]["LD_AVLSTS_ID"].ToString(), dt.Rows[intRow]["LD_AVLSTS_NAME"].ToString()));
        }
        return ListReturn.ToArray();
    }

    //It build the Html table by using the datatable provided
    public string ConvertDataTableToHTMLQuatationList(DataTable dtSelect)
    {

        Loadcustomer();
        //add options
        clsCommonLibrary objCommon = new clsCommonLibrary();
        string strRandom = objCommon.Random_Number();
        StringBuilder sb = new StringBuilder();

        sb.Append("<table id=\"ReportTable\" class=\"table table-bordered\">");
        sb.Append("<thead class=\"thead1\">");
        sb.Append("<tr>");
        sb.Append("<th class=\"col-md-4 tr_l\">Ref#</th>");
        sb.Append("<th class=\"col-md-5 tr_l\">Customer Name</th>");
        sb.Append("<th class=\"col-md-3 tr_c\">Copy</th>");
        sb.Append("</tr>");
        sb.Append("</thead>");
        sb.Append("<tbody>");

        if (dtSelect.Rows.Count == 0)
        {
            sb.Append("<tr>");
            sb.Append("<td colspan=\"3\"><center>No data available</center></td>");
            sb.Append("</tr>");
        }
        else
        {
            for (int intRowBodyCount = 0; intRowBodyCount < dtSelect.Rows.Count; intRowBodyCount++)
            {
                sb.Append("<tr>");
                sb.Append("<td class=\"tr_l\"><a href=\"javascript:;\" class=\"icon_3\" onclick=\"return ShowquatationDetaillist('" + dtSelect.Rows[intRowBodyCount][0].ToString() + "','" + dtSelect.Rows[intRowBodyCount][1].ToString() + "')\">" + dtSelect.Rows[intRowBodyCount][1].ToString() + "</td>");
                sb.Append("<td class=\"tr_l\">" + dtSelect.Rows[intRowBodyCount][2].ToString() + "</td>");
                sb.Append("<td class=\"tr_c\">");
                sb.Append("<button id=\"cphMain_btncopyquoation\" name=\"ctl00$cphMain$btncopyquoation\" runat=\"server\" class=\"btn tab_but1 butn5 cpy_hi\" title=\"Copy\" onclick=\"return AddToQuotation('" + dtSelect.Rows[intRowBodyCount][0].ToString() + "') \" onServerClick=\"btncopyquoation_Click\"><i class=\"fa fa-files-o\"></i></button>");
                sb.Append("</td>");
                sb.Append("</tr>");
            }
        }
        sb.Append("</tbody>");
        sb.Append("</table>");

        string strDynamicOptions = sb.ToString(); ;
        return strDynamicOptions;
    }
    [WebMethod]
    public static string LoadQutationdetails(int corpid, int orgid, int intQtnId, int templttype)
    {

        //when Editing or viewing
        //intEditOrView if 1-Edit,2-View
        clsCommonLibrary objCommon = new clsCommonLibrary();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        objEntityQuotation.QuotationId = intQtnId;

        objEntityQuotation.CorpOffice_Id = corpid;

        objEntityQuotation.Organisation_Id = orgid;


        DataTable dtQtnDtl = new DataTable();
        DataTable dtQtnDtlGroup = new DataTable();

        objEntityQuotation.QuotationTemplateTypeId = templttype;
        dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
        dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
        quatationdetails objquatationdetails = new quatationdetails();
        string strhtm = objquatationdetails.ConvertDataTableToHTMLQuatationListDetails(dtQtnDtl, dtQtnDtlGroup);
        return strhtm;
    }
    class quatationdetails
    {
        //It build the Html table by using the datatable provided for quotation details
        public string ConvertDataTableToHTMLQuatationListDetails(DataTable dt, DataTable dtGroup)
        {

            //add options

            clsCommonLibrary objCommon = new clsCommonLibrary();
            string strRandom = objCommon.Random_Number();

            // class="table table-bordered table-striped"
            StringBuilder sb = new StringBuilder();

            int count = 0;
            string strHtml = "";
            if (dtGroup.Rows.Count > 0)
            {
                foreach (DataRow drGrp in dtGroup.Rows)
                {

                    count++;
                    sb.Append("<div>");
                    sb.Append("<div>");
                    sb.Append("<label style=\"color: #034508;\">Product As : " + drGrp["QTNDTLGRP_NAME"] + "</label>");
                    sb.Append("</div>");
                    sb.Append("<table id=\"ReportTable" + count + "\" class=\"main_table\" cellspacing=\"0\" cellpadding=\"2px\" style=\"margin-bottom: 10px;\" >");
                    //add header row
                    sb.Append("<thead>");
                    sb.Append("<tr class=\"main_table_head\" style=\"height:32px\" >");

                    sb.Append("<th class=\"thT\" style=\"width:2%;text-align: left; word-wrap:break-word;\">" + "SL#" + "</th>");


                    for (int intColumnHeaderCount = 0; intColumnHeaderCount < dt.Columns.Count; intColumnHeaderCount++)
                    {

                        if (intColumnHeaderCount == 1)
                        {
                            sb.Append("<th class=\"thT\" style=\"width:10%;text-align: left; word-wrap:break-word;\">PRODUCT</th>");
                        }

                        else if (intColumnHeaderCount == 2)
                        {
                            sb.Append("<th class=\"thT\"  style=\"width:8%;text-align: left; word-wrap:break-word;\">UNIT</th>");
                        }

                        else if (intColumnHeaderCount == 3)
                        {
                            sb.Append("<th class=\"thT\"  style=\"width:5%;text-align: left; word-wrap:break-word;\">QUANTITY</th>");
                        }
                        else if (intColumnHeaderCount == 4)
                        {
                            sb.Append("<th class=\"thT\"  style=\"width:15%;text-align: right; word-wrap:break-word;\">SELLING PRICE</th>");
                        }

                        else if (intColumnHeaderCount == 5)
                        {
                            sb.Append("<th class=\"thT\"  style=\"width:5%;text-align: right; word-wrap:break-word;\">TOATAL AMOUNT</th>");
                        }

                    }



                    sb.Append("</tr>");
                    sb.Append("</thead>");
                    //add rows

                    sb.Append("<tbody>");
                    for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
                    {
                        if (drGrp["QUOTNDTLGRP_ID"].ToString() == dt.Rows[intRowBodyCount]["QUOTNDTLGRP_ID"].ToString())
                        {
                            int slno;

                            slno = intRowBodyCount + 1;
                            sb.Append("<tr  >");
                            sb.Append("<td class=\"tdT\" style=\" width:2%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + slno + "</td>");

                            for (int intColumnBodyCount = 0; intColumnBodyCount < dt.Columns.Count; intColumnBodyCount++)
                            {

                                if (intColumnBodyCount == 1)
                                {
                                    if (dt.Rows[intRowBodyCount]["PRDT_NAME"].ToString() != "")
                                        sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + dt.Rows[intRowBodyCount]["PRDT_NAME"].ToString() + "</td>");
                                    else
                                        sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + dt.Rows[intRowBodyCount]["PRDT NAME"].ToString() + "</td>");
                                }
                                else if (intColumnBodyCount == 2)
                                {
                                    sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + dt.Rows[intRowBodyCount]["UOM_NAME"].ToString() + "</td>");
                                }

                                else if (intColumnBodyCount == 3)
                                {
                                    sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + dt.Rows[intRowBodyCount]["QUOTNDTL_QTY"].ToString() + "</td>");
                                }
                                else if (intColumnBodyCount == 4)
                                {
                                    sb.Append("<td class=\"tdT\" style=\" width:10%;word-break: break-all; word-wrap:break-word;text-align: right;padding-right:7px;\"  >" + dt.Rows[intRowBodyCount]["QUOTNDTL_RATE"].ToString() + "</td>");
                                }
                                else if (intColumnBodyCount == 5)
                                {

                                    sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: right;padding-right:7px;\" >" + dt.Rows[intRowBodyCount]["QUOTNDTL_AMOUNT"].ToString() + "</td>");
                                }
                            }

                            sb.Append("</tr>");
                        }
                    }

                    sb.Append("</tbody>");

                    sb.Append("</table>");
                    sb.Append("</div>");
                }
            }
            else
            {
                sb.Append("<div>");
                sb.Append("<table id=\"ReportTable" + count + "\" class=\"main_table\" cellspacing=\"0\" cellpadding=\"2px\" >");
                //add header row
                sb.Append("<thead>");
                sb.Append("<tr class=\"main_table_head\" style=\"height:32px\" >");

                sb.Append("<th class=\"thT\" style=\"width:2%;text-align: left; word-wrap:break-word;\">" + "SL#" + "</th>");


                for (int intColumnHeaderCount = 0; intColumnHeaderCount < dt.Columns.Count; intColumnHeaderCount++)
                {

                    if (intColumnHeaderCount == 1)
                    {
                        sb.Append("<th class=\"thT\" style=\"width:10%;text-align: left; word-wrap:break-word;\">PRODUCT</th>");
                    }

                    else if (intColumnHeaderCount == 2)
                    {
                        sb.Append("<th class=\"thT\"  style=\"width:8%;text-align: left; word-wrap:break-word;\">UNIT</th>");
                    }

                    else if (intColumnHeaderCount == 3)
                    {
                        sb.Append("<th class=\"thT\"  style=\"width:5%;text-align: left; word-wrap:break-word;\">QUANTITY</th>");
                    }
                    else if (intColumnHeaderCount == 4)
                    {
                        sb.Append("<th class=\"thT\"  style=\"width:15%;text-align: right; word-wrap:break-word;\">SELLING PRICE</th>");
                    }

                    else if (intColumnHeaderCount == 5)
                    {
                        sb.Append("<th class=\"thT\"  style=\"width:5%;text-align: right; word-wrap:break-word;\">TOATAL AMOUNT</th>");
                    }

                }



                sb.Append("</tr>");
                sb.Append("</thead>");
                //add rows

                sb.Append("<tbody>");
                for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
                {

                    int slno;

                    slno = intRowBodyCount + 1;
                    sb.Append("<tr  >");
                    sb.Append("<td class=\"tdT\" style=\" width:2%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + slno + "</td>");

                    for (int intColumnBodyCount = 0; intColumnBodyCount < dt.Columns.Count; intColumnBodyCount++)
                    {

                        if (intColumnBodyCount == 1)
                        {
                            if (dt.Rows[intRowBodyCount]["PRDT_NAME"].ToString() != "")
                                sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + dt.Rows[intRowBodyCount]["PRDT_NAME"].ToString() + "</td>");
                            else
                                sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + dt.Rows[intRowBodyCount]["PRDT NAME"].ToString() + "</td>");
                        }
                        else if (intColumnBodyCount == 2)
                        {
                            sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + dt.Rows[intRowBodyCount]["UOM_NAME"].ToString() + "</td>");
                        }

                        else if (intColumnBodyCount == 3)
                        {
                            sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: left;\" >" + dt.Rows[intRowBodyCount]["QUOTNDTL_QTY"].ToString() + "</td>");
                        }
                        else if (intColumnBodyCount == 4)
                        {
                            sb.Append("<td class=\"tdT\" style=\" width:10%;word-break: break-all; word-wrap:break-word;text-align: right;\"  >" + dt.Rows[intRowBodyCount]["QUOTNDTL_RATE"].ToString() + "</td>");
                        }
                        else if (intColumnBodyCount == 5)
                        {

                            sb.Append("<td class=\"tdT\" style=\" width:8%;word-break: break-all; word-wrap:break-word;text-align: right;\" >" + dt.Rows[intRowBodyCount]["QUOTNDTL_AMOUNT"].ToString() + "</td>");
                        }
                    }

                    sb.Append("</tr>");
                }

                sb.Append("</tbody>");

                sb.Append("</table>");
                sb.Append("</div>");
            }
            string strDynamicOptions = sb.ToString();
            return strDynamicOptions;
        }

        //It build the Html table by using the datatable provided
        public string ConvertDataTableToHTMLQuatationList(DataTable dtSelect)
        {
            //add options
            clsCommonLibrary objCommon = new clsCommonLibrary();
            string strRandom = objCommon.Random_Number();

            // class="table table-bordered table-striped"
            StringBuilder sb = new StringBuilder();

            sb.Append("<table id=\"ReportTable\" class=\"table table-bordered\">");
            sb.Append("<thead class=\"thead1\">");
            sb.Append("<tr>");
            sb.Append("<th class=\"col-md-4 tr_l\">Ref#</th>");
            sb.Append("<th class=\"col-md-5 tr_l\">Customer Name</th>");
            sb.Append("<th class=\"col-md-3 tr_c\">Copy</th>");
            sb.Append("</tr>");
            sb.Append("</thead>");
            sb.Append("<tbody>");

            if (dtSelect.Rows.Count == 0)
            {
                sb.Append("<tr>");
                sb.Append("<td colspan=\"3\"><center>No data available</center></td>");
                sb.Append("</tr>");
            }
            else
            {
                for (int intRowBodyCount = 0; intRowBodyCount < dtSelect.Rows.Count; intRowBodyCount++)
                {
                    sb.Append("<tr>");
                    sb.Append("<td class=\"tr_l\"><a href=\"javascript:;\" class=\"icon_3\" onclick=\"return ShowquatationDetaillist('" + dtSelect.Rows[intRowBodyCount][0].ToString() + "','" + dtSelect.Rows[intRowBodyCount][1].ToString() + "')\">" + dtSelect.Rows[intRowBodyCount][1].ToString() + "</td>");
                    sb.Append("<td class=\"tr_l\">" + dtSelect.Rows[intRowBodyCount][2].ToString() + "</td>");
                    sb.Append("<td class=\"tr_c\">");
                    sb.Append("<button id=\"cphMain_btncopyquoation\" name=\"ctl00$cphMain$btncopyquoation\" runat=\"server\" class=\"btn tab_but1 butn5 cpy_hi\" title=\"Copy\" onclick=\"return AddToQuotation('" + dtSelect.Rows[intRowBodyCount][0].ToString() + "') \" onServerClick=\"btncopyquoation_Click\"><i class=\"fa fa-files-o\"></i></button>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                }
            }
            sb.Append("</tbody>");
            sb.Append("</table>");

            string strDynamicOptions = sb.ToString();
            return strDynamicOptions;

        }
    }

    //For Copyng quotation
    private void EditViewforcopy(int intQtnId, int intEditOrView)
    {
        clsCommonLibrary objCommon = new clsCommonLibrary();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        objEntityQuotation.QuotationId = intQtnId;
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }

        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        DataTable dtQtnDtl = new DataTable();
        DataTable dtQtnDtlGroup = new DataTable();
        DataTable dtQtnCatDtl = new DataTable();
        DataTable dtQtn = new DataTable();
        DataTable dtQtnAttchmnt = new DataTable();
        objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
        dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
        dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);
       // dtQtnAttchmnt = objBusinessLayerQuotation.ReadQuotationAttchmnt(objEntityQuotation);
        dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
        dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailByQtnId(objEntityQuotation);

        if (dtQtn.Rows.Count > 0)
        {
            txtPriceTerm.Text = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
            txtPymntTerm.Text = dtQtn.Rows[0]["LDQUOT_PMNT_TERMS"].ToString();
            txtDlvryTerm.Text = dtQtn.Rows[0]["LDQUOT_DLVRY_TERMS"].ToString();
            txtWrntyTerm.Text = dtQtn.Rows[0]["LDQUOT_WRNTY_TERMS"].ToString();
            txtValidityTerm.Text = dtQtn.Rows[0]["LDQUOT_VALIDITY"].ToString();
            txtManufacturerTerm.Text = dtQtn.Rows[0]["LDQUOT_MANFCTR_TERMS"].ToString();
            txtComments.Text = dtQtn.Rows[0]["LDQUOT_COMMENTS"].ToString();
            hiddenQuotationDate.Value = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
            int intDiscMode = Convert.ToInt32(dtQtn.Rows[0]["LDQUOT_BILL_DISC_MODE"].ToString());
            divRef.Visible = true;
            ddlCurrency.ClearSelection();
            if (ddlCurrency.Items.FindByValue(dtQtn.Rows[0]["CRNCMST_ID"].ToString()) != null)
            {
                ddlCurrency.Items.FindByValue(dtQtn.Rows[0]["CRNCMST_ID"].ToString()).Selected = true;
            }

            else
            {
                ListItem lstSt = new ListItem(dtQtn.Rows[0]["CRNCMST_NAME"].ToString(), dtQtn.Rows[0]["CRNCMST_ID"].ToString());
                ddlCurrency.Items.Insert(1, lstSt);

                SortDDL(ref this.ddlCurrency);
                ddlCurrency.Items.FindByText(dtQtn.Rows[0]["CRNCMST_NAME"].ToString()).Selected = true;
            }
            int intSndMail = Convert.ToInt32(dtQtn.Rows[0]["LDQUOT_MAIL_STS"].ToString());
            if (cbxSendMail.Enabled == true)
            {
                if (intSndMail == 0)
                {
                    cbxSendMail.Checked = false;
                }
                else
                {
                    cbxSendMail.Checked = true;
                }
            }
            else
            {
                cbxSendMail.Checked = false;
            }

            DataTable dtDetailCat = new DataTable();
            dtDetailCat.Columns.Add("CATNAME", typeof(string));
            dtDetailCat.Columns.Add("GRPID", typeof(string));
            dtDetailCat.Columns.Add("QTNDTLID", typeof(string));
            if (dtQtnCatDtl.Rows.Count > 0)
            {
                foreach (DataRow dtCat in dtQtnCatDtl.Rows)
                {
                    DataRow drDtlCat = dtDetailCat.NewRow();
                    drDtlCat["CATNAME"] = dtCat["CATGRY_NAME"].ToString();
                    if (dtCat["QUOTNDTLGRP_ID"].ToString() != "")
                    {
                        drDtlCat["GRPID"] = Convert.ToInt32(dtCat["QUOTNDTLGRP_ID"].ToString());
                    }
                    else
                    {
                        drDtlCat["GRPID"] = 0;
                    }
                    dtDetailCat.Rows.Add(drDtlCat);
                }
            }
            string strJsonCat = DataTableToJSONWithJavaScriptSerializer(dtDetailCat);
            hiddenEditCatDataCopied.Value = strJsonCat;

            DataTable dtDetailGroup = new DataTable();
            dtDetailGroup.Columns.Add("BRID", typeof(string));
            dtDetailGroup.Columns.Add("BRNAME", typeof(string));
            dtDetailGroup.Columns.Add("BRGRSAMNT", typeof(string));
            dtDetailGroup.Columns.Add("DISCMOD", typeof(string));
            dtDetailGroup.Columns.Add("DISCVAL", typeof(string));
            dtDetailGroup.Columns.Add("DISCAMNT", typeof(string));
            dtDetailGroup.Columns.Add("NETAMNT", typeof(string));
            if (dtQtnDtlGroup.Rows.Count > 0)
            {
                foreach (DataRow dtBr in dtQtnDtlGroup.Rows)
                {
                    DataRow drDtlBr = dtDetailGroup.NewRow();
                    drDtlBr["BRID"] = Convert.ToInt32(dtBr["QUOTNDTLGRP_ID"].ToString());
                    drDtlBr["BRNAME"] = dtBr["QTNDTLGRP_NAME"].ToString();
                    drDtlBr["BRGRSAMNT"] = Convert.ToDecimal(dtBr["QTNDTLGRP_GROSS_AMT"].ToString());
                    drDtlBr["DISCMOD"] = Convert.ToInt32(dtBr["QTNDTLGRP_BILL_DISC_MODE"].ToString());
                    drDtlBr["DISCVAL"] = Convert.ToDecimal(dtBr["QTNDTLGRP_BILL_DISC_VALUE"].ToString());
                    drDtlBr["DISCAMNT"] = Convert.ToDecimal(dtBr["QTNDTLGRP_BILL_DISC_TOT_AMT"].ToString());
                    drDtlBr["NETAMNT"] = Convert.ToDecimal(dtBr["QTNDTLGRP_NET_AMT"].ToString());
                    dtDetailGroup.Rows.Add(drDtlBr);
                }
            }
            else
            {
                DataRow drDtlBr = dtDetailGroup.NewRow();
                drDtlBr["BRID"] = 0;
                drDtlBr["BRNAME"] = 0;
                drDtlBr["BRGRSAMNT"] = Convert.ToDecimal(dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString());
                drDtlBr["DISCMOD"] = Convert.ToInt32(dtQtn.Rows[0]["LDQUOT_BILL_DISC_MODE"].ToString());
                drDtlBr["DISCVAL"] = Convert.ToDecimal(dtQtn.Rows[0]["LDQUOT_BILL_DISC_VALUE"].ToString());
                drDtlBr["DISCAMNT"] = 0;
                drDtlBr["NETAMNT"] = Convert.ToDecimal(dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString());
                dtDetailGroup.Rows.Add(drDtlBr);
            }

            string strJsonGrp = DataTableToJSONWithJavaScriptSerializer(dtDetailGroup);
            hiddenEditdetailgroupDataCopied.Value = strJsonGrp;




            DataTable dtDetail = new DataTable();
            dtDetail.Columns.Add("TransId", typeof(int));
            dtDetail.Columns.Add("TransDtlId", typeof(int));
            dtDetail.Columns.Add("ProductName", typeof(string));
            dtDetail.Columns.Add("ProductId", typeof(int));
            dtDetail.Columns.Add("UnitName", typeof(string));
            dtDetail.Columns.Add("UnitId", typeof(int));
            dtDetail.Columns.Add("Quantity", typeof(decimal));
            dtDetail.Columns.Add("CostPrice", typeof(decimal));
            dtDetail.Columns.Add("Hike", typeof(string));
            dtDetail.Columns.Add("Rate", typeof(decimal));
            dtDetail.Columns.Add("TaxName", typeof(string));
            dtDetail.Columns.Add("TaxId", typeof(int));
            dtDetail.Columns.Add("TaxPer", typeof(decimal));
            dtDetail.Columns.Add("TaxAmnt", typeof(decimal));
            dtDetail.Columns.Add("DiscountAmnt", typeof(decimal));
            dtDetail.Columns.Add("Amount", typeof(decimal));
            dtDetail.Columns.Add("AddDesc", typeof(string));
            dtDetail.Columns.Add("StockStatus", typeof(int));
            dtDetail.Columns.Add("StockName", typeof(string));
            dtDetail.Columns.Add("ProductMode", typeof(int));
            dtDetail.Columns.Add("txtProductName", typeof(string));

            dtDetail.Columns.Add("PrintSts", typeof(int));
            dtDetail.Columns.Add("ProductCat", typeof(string));
            dtDetail.Columns.Add("ProductWinSts", typeof(string));
            dtDetail.Columns.Add("ProductGroupId", typeof(string));


            DataTable dtAttchmnt = new DataTable();
            dtAttchmnt.Columns.Add("TransDtlId", typeof(int));
            dtAttchmnt.Columns.Add("FileName", typeof(string));
            dtAttchmnt.Columns.Add("ActualFileName", typeof(string));
            dtAttchmnt.Columns.Add("SendSts", typeof(int));


            if (dtQtnDtl.Rows.Count > 0)
            {
                for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                {
                    DataRow drDtl = dtDetail.NewRow();
                    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQUOT_ID"].ToString());
                    drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_ID"].ToString());
                    drDtl["ProductName"] = dtQtnDtl.Rows[intcnt]["PRDT CODE_AND_NAME"].ToString();
                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                    {
                        drDtl["ProductId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString());

                    }
                    else
                    {

                        drDtl["ProductId"] = 0;
                    }
                    drDtl["UnitName"] = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();
                    drDtl["UnitId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["UOM_ID"].ToString());
                    drDtl["Quantity"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString());
                    drDtl["CostPrice"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString());
                    drDtl["Hike"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                    drDtl["Rate"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString());

                    if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                    {
                        drDtl["TaxName"] = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();
                        drDtl["TaxId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString());
                        drDtl["TaxPer"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString());
                        drDtl["TaxAmnt"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString());
                    }
                    else
                    {
                        drDtl["TaxName"] = "";
                        drDtl["TaxId"] = 0;
                        drDtl["TaxPer"] = 0;
                        drDtl["TaxAmnt"] = 0;

                    }
                    drDtl["DiscountAmnt"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString());
                    drDtl["Amount"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString());

                    drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                    if (dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != "" && dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != null)
                        drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString());
                    else
                        drDtl["StockStatus"] = 0;
                    drDtl["StockName"] = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                    drDtl["PrintSts"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                    drDtl["ProductCat"] = dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString();
                    drDtl["ProductMode"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRDT_MODE"].ToString());
                    drDtl["txtProductName"] = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();

                    drDtl["ProductWinSts"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_WIN_STS"].ToString();
                    if (dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString() != "")
                        drDtl["ProductGroupId"] = dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString();
                    else
                        drDtl["ProductGroupId"] = 0;
                    dtDetail.Rows.Add(drDtl);

                }
                HiddenDonotclear.Value = "";
                string strJson = DataTableToJSONWithJavaScriptSerializer(dtDetail);
                if (intEditOrView == 1)
                {
                    HiddenCopiedval.Value = strJson;
                }
                else if (intEditOrView == 2)
                {
                    hiddenView.Value = strJson;
                }


                if (HiddenField1.Value != "")
                {
                    string jsonData = HiddenField1.Value;

                    string c = jsonData.Replace("\"{", "\\{");
                    string d = c.Replace("\\n", "\r\n");
                    string g = d.Replace("\\", "");
                    string h = g.Replace("}\"]", "}]");
                    string i = h.Replace("}\",", "},");
                    List<clsQtnData> objQtnDataList = new List<clsQtnData>();
                    //   UserData  data
                    objQtnDataList = JsonConvert.DeserializeObject<List<clsQtnData>>(i);
                    dtDetail.Clear();

                    foreach (clsQtnData objClsQtnData in objQtnDataList)
                    {
                        if (objClsQtnData.EVTACTION == "INS")
                        {

                            DataRow drDtl = dtDetail.NewRow();
                            if (objClsQtnData.ITEMID != "")
                            {
                                drDtl["ProductId"] = objClsQtnData.ITEMID;

                            }
                            else
                            {
                                // WHEN CHANGING MODE IT BECOMES NULL
                                drDtl["ProductId"] = 0;
                            }
                            drDtl["ProductName"] = objClsQtnData.ITEMNAME;
                            drDtl["UnitName"] = "";
                            drDtl["UnitId"] = objClsQtnData.UNITID.ToString();
                            drDtl["Quantity"] = objClsQtnData.QUANTITY;
                            drDtl["CostPrice"] = objClsQtnData.COSTPRICE;
                            drDtl["Hike"] = objClsQtnData.HIKE;
                            drDtl["Rate"] = objClsQtnData.RATE;

                            if (hiddenTaxEnabled.Value == "1")
                            {
                                if (objClsQtnData.TAXID == "--Select Tax--")
                                {
                                    drDtl["TaxName"] = "";
                                    drDtl["TaxId"] = 0;
                                    drDtl["TaxPer"] = 0;
                                    drDtl["TaxAmnt"] = 0;
                                }
                                else
                                    drDtl["TaxId"] = objClsQtnData.TAXID;
                                drDtl["TaxPer"] = objClsQtnData.TAXPERC;
                                drDtl["TaxAmnt"] = objClsQtnData.TAXAMNT;
                            }
                            else
                            {
                                drDtl["TaxName"] = "";
                                drDtl["TaxId"] = 0;
                                drDtl["TaxPer"] = 0;
                                drDtl["TaxAmnt"] = 0;

                            }
                            drDtl["DiscountAmnt"] = objClsQtnData.DISCAMNT;
                            drDtl["Amount"] = objClsQtnData.AMOUNT;

                            drDtl["AddDesc"] = objClsQtnData.ADDITIONAL;

                            if (objClsQtnData.PRDCTAVAILABLE != "" && objClsQtnData.PRDCTAVAILABLE != null)
                                drDtl["StockStatus"] = objClsQtnData.PRDCTAVAILABLE;
                            else
                                drDtl["StockStatus"] = 0;

                            drDtl["PrintSts"] = objClsQtnData.PRINTED;
                            drDtl["ProductMode"] = objClsQtnData.PRDCTMODE;
                            drDtl["txtProductName"] = objClsQtnData.ITEMNAME;
                            dtDetail.Rows.Add(drDtl);



                        }


                    }
                    strJson = DataTableToJSONWithJavaScriptSerializer(dtDetail);
                    HiddenDonotclear.Value = strJson;

                }



            }
            hiddenFilePath.Value = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            if (dtQtnAttchmnt.Rows.Count > 0)
            {
                for (int intcnt = 0; intcnt < dtQtnAttchmnt.Rows.Count; intcnt++)
                {
                    DataRow drAttch = dtAttchmnt.NewRow();
                    drAttch["TransDtlId"] = dtQtnAttchmnt.Rows[intcnt]["QTFLS_ID"].ToString();
                    drAttch["FileName"] = dtQtnAttchmnt.Rows[intcnt]["QTFLS_FILENAME"].ToString();
                    drAttch["ActualFileName"] = dtQtnAttchmnt.Rows[intcnt]["QTFLS_FLNM_ACT"].ToString();
                    drAttch["SendSts"] = dtQtnAttchmnt.Rows[intcnt]["QTFLS_ATCH_MAIL_STS"].ToString();
                    dtAttchmnt.Rows.Add(drAttch);
                    hiddenAttchmntSlNumber.Value = dtQtnAttchmnt.Rows[intcnt]["QTFLS_SLNUM"].ToString();
                }

                string strJson = DataTableToJSONWithJavaScriptSerializer(dtAttchmnt);
                hiddenEditAttchmnt.Value = strJson;
            }


        }
    }
    protected void btncopyquoation_Click(object sender, EventArgs e)
    {
        EditViewforcopy(Convert.ToInt32(HiddenCopyqtnid.Value), 1);
    }
    public int backupAdd()
    {
        try
        {
            if (Request.QueryString["LeadId"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "")
            {
                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);
                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

                objEntityQuotation.QuotationDate = System.DateTime.Now;
                objEntityQuotation.QuotnComment = txtComments.Text.Trim();
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(hiddenDfltCurrencyMstrId.Value);
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(ddlCurrency.SelectedItem.Value);
                objEntityQuotation.PriceTerm = txtPriceTerm.Text.Trim();
                objEntityQuotation.PaymntTerm = txtPymntTerm.Text.Trim();
                objEntityQuotation.ManufacturerTerm = txtManufacturerTerm.Text.Trim();
                objEntityQuotation.DeliveryTerm = txtDlvryTerm.Text.Trim();
                objEntityQuotation.WarrantyTerm = txtWrntyTerm.Text.Trim();
                objEntityQuotation.ValidityTerm = txtValidityTerm.Text.Trim();
                if (cbxSendMail.Checked == true)
                {
                    objEntityQuotation.MailStatus = 1;
                }
                else
                {
                    objEntityQuotation.MailStatus = 0;
                }
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;
                objEntityQuotation.QuotationStatus = 0;
                objEntityQuotation.ApprovedStatus = 0;

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                //Start:-For read table details
                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);
                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtQtnAttchmnt = new DataTable();
                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetail(objEntityQuotation);
                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailByQtnId(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotation(objEntityQuotation);
                dtQtnAttchmnt = objBusinessLayerQuotation.ReadQuotationAttchmnt(objEntityQuotation);

                List<clsEntityLayerQuotationDtl> objEntityQtnGrpDtlsList = new List<clsEntityLayerQuotationDtl>();
                if (dtQtnDtlGroup.Rows.Count > 0)
                {
                    foreach (DataRow dtgrp in dtQtnDtlGroup.Rows)
                    {
                        clsEntityLayerQuotationDtl objEntityQtnGrpDtls = new clsEntityLayerQuotationDtl();

                        objEntityQtnGrpDtls.PrdctGrpId = Convert.ToInt32(dtgrp["QUOTNDTLGRP_ID"].ToString());
                        objEntityQtnGrpDtls.PrdctGroupName = dtgrp["QTNDTLGRP_NAME"].ToString().ToUpper();
                        objEntityQtnGrpDtls.GrpGrossAmnt = Convert.ToDecimal(dtgrp["QTNDTLGRP_GROSS_AMT"]);
                        objEntityQtnGrpDtls.GrpNetAmnt = Convert.ToDecimal(dtgrp["QTNDTLGRP_NET_AMT"]);
                        objEntityQtnGrpDtls.GrpDiscmode = Convert.ToInt32(dtgrp["QTNDTLGRP_BILL_DISC_MODE"]);
                        objEntityQtnGrpDtls.GrpDiscvalue = Convert.ToDecimal(dtgrp["QTNDTLGRP_BILL_DISC_VALUE"]);
                        objEntityQtnGrpDtls.GrpDiscAmount = Convert.ToDecimal(dtgrp["QTNDTLGRP_BILL_DISC_TOT_AMT"]);
                        objEntityQtnGrpDtlsList.Add(objEntityQtnGrpDtls);
                    }
                }

                List<clsEntityLayerQuotationDtl> objEntityQtnDeatilsList = new List<clsEntityLayerQuotationDtl>();

                if (dtQtnDtl.Rows.Count > 0)
                {
                    for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                    {

                        clsEntityLayerQuotationDtl objEntityQtnDetails = new clsEntityLayerQuotationDtl();
                        if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                        {
                            objEntityQtnDetails.ProductId = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString());

                        }
                        else
                        {
                            // WHEN CHANGING MODE IT BECOMES NULL
                            objEntityQtnDetails.ProductId = 0;
                        }
                        objEntityQtnDetails.UOMName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();
                        objEntityQtnDetails.UOMId = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["UOM_ID"].ToString());
                        objEntityQtnDetails.Quantity = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString());
                        objEntityQtnDetails.CostPrice = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString());
                        objEntityQtnDetails.Hike = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                        objEntityQtnDetails.Rate = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString());

                        if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                        {

                            objEntityQtnDetails.TaxId = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString());
                            objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString());
                            objEntityQtnDetails.TaxAmnt = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString());
                        }
                        else
                        {
                            objEntityQtnDetails.TaxId = 0;
                            objEntityQtnDetails.TaxPecentage = 0;
                            objEntityQtnDetails.TaxAmnt = 0;

                        }
                        objEntityQtnDetails.ItemDiscntAmnt = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString());
                        objEntityQtnDetails.Amount = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString());

                        objEntityQtnDetails.ItemDescription = dtQtnDtl.Rows[intcnt]["QUOTNDTL_DESCR"].ToString();

                        if (dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != "" && dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != null)
                            objEntityQtnDetails.StockSts = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString());
                        else
                            objEntityQtnDetails.StockSts = 0;

                        objEntityQtnDetails.Print = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                        objEntityQtnDetails.ProductMode = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRDT_MODE"].ToString());
                        objEntityQtnDetails.ProductName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                        objEntityQtnDetails.ProductCategory = dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString().ToUpper();
                        objEntityQtnDetails.PrdctGrpId = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTLGRP_ID"].ToString());

                        objEntityQtnDeatilsList.Add(objEntityQtnDetails);
                    }
                }
                //End-For read table details

                //Start:-For read attachment details
                List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
                if (dtQtnAttchmnt.Rows.Count > 0)
                {
                    for (int intcnt = 0; intcnt < dtQtnAttchmnt.Rows.Count; intcnt++)
                    {
                        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
                        objEntityQtnDetailsAttchmnt.FileName = dtQtnAttchmnt.Rows[intcnt]["QTFLS_FILENAME"].ToString();
                        objEntityQtnDetailsAttchmnt.ActualFileName = dtQtnAttchmnt.Rows[intcnt]["QTFLS_FLNM_ACT"].ToString();
                        objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = Convert.ToInt32(dtQtnAttchmnt.Rows[intcnt]["QTFLS_SLNUM"].ToString());

                        objEntityQtnDetailsAttchmnt.AttchWthMailsts = Convert.ToInt32(dtQtnAttchmnt.Rows[intcnt]["QTFLS_ATCH_MAIL_STS"]);
                        objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);

                    }
                }

                //Stop:-For read attachment details

                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.SectionId = Convert.ToInt32(clsCommonLibrary.Section.QUOTATION);
                objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                string strNextNum = objBusinessLayer.ReadNextNumberWebForUI(objEntityCommon);
                objEntityQuotation.BckupId = Convert.ToInt32(strNextNum);


                objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);

                string strSectnAndCorId = objEntityCommon.SectionId.ToString() + objEntityCommon.CorporateID.ToString();
                int intSectnAndCorIdLength = strSectnAndCorId.Length;
                string strRefSerialId = strNextNum.Substring(intSectnAndCorIdLength);
                objEntityQuotation.QtnRefSerialId = Convert.ToInt32(strRefSerialId);

                objEntityQuotation.QuotationRefNumbr = lblRefNumbr.Text;

                objBusinessLayerQuotation.AddQuotationBckup(objEntityQuotation,objEntityQtnGrpDtlsList, objEntityQtnDeatilsList, objEntityQtnAttchmntDeatilsList);
                return objEntityQuotation.BckupId;
            }
            else
            {

                Response.Redirect("~/Default.aspx");
                return 0;
            }
        }
        catch
        {
            return 0;
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }
    }

    //It build the Html table by using the datatable provided
    public string ConvertDataTableToHTMLQuatationRvsdList(DataTable dtSelect)
    {
        clsCommonLibrary objCommon = new clsCommonLibrary();
        string strRandom = objCommon.Random_Number();
        StringBuilder sb = new StringBuilder();

        for (int intRowBodyCount = 0; intRowBodyCount < dtSelect.Rows.Count; intRowBodyCount++)
        {
            string strId = dtSelect.Rows[intRowBodyCount][3].ToString();
            int intIdLength = dtSelect.Rows[intRowBodyCount][3].ToString().Length;
            string stridLength = intIdLength.ToString("00");
            string Id = stridLength + strId + strRandom;
            string strPrevUrl = "";
            if (Request.QueryString["Prev"] != null)
            {
                strPrevUrl = Request.QueryString["Prev"].ToString();
            }

            int intTemplateId = Convert.ToInt32(dtSelect.Rows[intRowBodyCount]["QTN_TMPLT_ID"].ToString());
            if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard))
            {
                sb.Append("<a onclick='return getdetails(this.href);' " + "href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation.aspx?LeadId=" + Id + "&RvsdId=" + dtSelect.Rows[intRowBodyCount][0].ToString() + "&Prev=" + strPrevUrl + "\"></a>");
                sb.Append("<li class=\"li_st_rev\">" + dtSelect.Rows[intRowBodyCount][1].ToString() + "</li>");
                sb.Append("</a>");
            }
            else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Project))
            {
                sb.Append("<a onclick='return getdetails(this.href);' " + "href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&RvsdId=" + dtSelect.Rows[intRowBodyCount][0].ToString() + "&Prev=" + strPrevUrl + "\"></a>");
                sb.Append("<li class=\"li_st_rev\">" + dtSelect.Rows[intRowBodyCount][1].ToString() + "</li>");
                sb.Append("</a>");
            }
            else if (intTemplateId == Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Tender))
            {
                sb.Append("<a onclick='return getdetails(this.href);' " + "href=\"/Transaction/Cmpzt_Quotation/Cmpzt_Quotation2.aspx?LeadId=" + Id + "&RvsdId=" + dtSelect.Rows[intRowBodyCount][0].ToString() + "&Prev=" + strPrevUrl + "\"></a>");
                sb.Append("<li class=\"li_st_rev\">" + dtSelect.Rows[intRowBodyCount][1].ToString() + "</li>");
                sb.Append("</a>");
            }
        }

        string strDynamicOptions = sb.ToString();
        return strDynamicOptions;

    }

    protected void btnMakeFinalquoation_Click(object sender, EventArgs e)
    {
        try
        {
            if (Request.QueryString["LeadId"] != null && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "")
            {

                clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
                clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
                int intUserId = 0;
                if (hiddenCorporateId.Value == "")
                {
                    if (Session["CORPOFFICEID"] != null)
                    {
                        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                    }
                    else if (Session["CORPOFFICEID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {

                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
                }
                if (hiddenOrganisationId.Value == "")
                {
                    if (Session["ORGID"] != null)
                    {
                        objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                    }
                    else if (Session["ORGID"] == null)
                    {
                        Response.Redirect("~/Default.aspx");
                    }
                }
                else
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
                }
                if (Session["USERID"] != null)
                {
                    intUserId = Convert.ToInt32(Session["USERID"]);

                }
                else if (Session["USERID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }

                string strRandomMixedId = Request.QueryString["LeadId"].ToString();
                string strLenghtofId = strRandomMixedId.Substring(0, 2);
                int intLenghtofId = Convert.ToInt16(strLenghtofId);
                string strId = strRandomMixedId.Substring(2, intLenghtofId);
                objEntityQuotation.Lead_Id = Convert.ToInt32(strId);

                clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
                objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
                clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
                DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);


                //Start:-For read table details
                if (Request.QueryString["RvsdId"] != null)
                {
                    objEntityQuotation.QuotationId = Convert.ToInt32(Request.QueryString["RvsdId"].ToString());
                }


                DataTable dtQtnDtl = new DataTable();
                DataTable dtQtn = new DataTable();
                DataTable dtQtnAttchmnt = new DataTable();
                DataTable dtQtnDtlGroup = new DataTable();
                DataTable dtQtnCatDtl = new DataTable();
                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);

                dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetailBckup(objEntityQuotation);
                dtQtn = objBusinessLayerQuotation.ReadQuotationBckup(objEntityQuotation);
                dtQtnAttchmnt = objBusinessLayerQuotation.ReadQuotationAttchmntBckup(objEntityQuotation);
                dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailBckupByQtnId(objEntityQuotation);
                dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailBckupByQtnId(objEntityQuotation);
                objEntityQuotation.QuotationDate = System.DateTime.Now;
                objEntityQuotation.QuotnComment = dtQtn.Rows[0]["LDQTBKP_COMMENTS"].ToString();
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(dtQtn.Rows[0]["CRNCMST_ID"].ToString());
                objEntityQuotation.PriceTerm = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
                objEntityQuotation.PaymntTerm = dtQtn.Rows[0]["LDQTBKP_PMNT_TERMS"].ToString();
                objEntityQuotation.ManufacturerTerm = dtQtn.Rows[0]["LDQUOTBKP_MANFCTR_TERMS"].ToString();
                objEntityQuotation.DeliveryTerm = dtQtn.Rows[0]["LDQTBKP_DLVRY_TERMS"].ToString();
                objEntityQuotation.WarrantyTerm = dtQtn.Rows[0]["LDQTBKP_WRNTY_TERMS"].ToString();
                objEntityQuotation.ValidityTerm = dtQtn.Rows[0]["LDQTBKP_VALIDITY"].ToString();
                objEntityQuotation.CurncyMastrId = Convert.ToInt32(dtQtn.Rows[0]["CRNCMST_ID"].ToString());
                objEntityQuotation.MailStatus = Convert.ToInt32(dtQtn.Rows[0]["LDQTBKP_MAIL_STS"].ToString());
                objEntityQuotation.User_Id = intUserId;
                objEntityQuotation.D_Date = System.DateTime.Now;
                objEntityQuotation.QuotationStatus = 0;
                objEntityQuotation.ApprovedStatus = 0;

                objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);

                List<clsEntityLayerQuotationDtl> objEntityQtnGrpDtlsList = new List<clsEntityLayerQuotationDtl>();
                foreach (DataRow DtRow in dtQtnDtlGroup.Rows)
                {
                    clsEntityLayerQuotationDtl objEntityQtnGrpDtls = new clsEntityLayerQuotationDtl();

                    objEntityQtnGrpDtls.PrdctGroupName = DtRow["QTNDTLGRPBCK_NAME"].ToString().ToUpper();
                    objEntityQtnGrpDtls.GrpGrossAmnt = Convert.ToDecimal(DtRow["QTNDTLGRPBCK_GROSS_AMT"]);
                    objEntityQtnGrpDtls.GrpNetAmnt = Convert.ToDecimal(DtRow["QTNDTLGRPBCK_NET_AMT"]);
                    objEntityQtnGrpDtls.GrpDiscmode = Convert.ToInt32(DtRow["QTNDTLGRPBCK_BILL_DISC_MODE"]);
                    objEntityQtnGrpDtls.GrpDiscvalue = Convert.ToInt32(DtRow["QTNDTLGRPBCK_BILL_DISC_VALUE"]);
                    objEntityQtnGrpDtls.GrpDiscAmount = Convert.ToDecimal(DtRow["QTNDTLGRPBCK_BILL_DISC_TOT_AMT"]);
                    objEntityQtnGrpDtlsList.Add(objEntityQtnGrpDtls);

                }

                List<clsEntityLayerQuotationDtl> objEntityQtnDeatilsList = new List<clsEntityLayerQuotationDtl>();

                if (dtQtnDtl.Rows.Count > 0)
                {
                    for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                    {

                        clsEntityLayerQuotationDtl objEntityQtnDetails = new clsEntityLayerQuotationDtl();
                        if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                        {
                            objEntityQtnDetails.ProductId = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString());

                        }
                        else
                        {
                            // WHEN CHANGING MODE IT BECOMES NULL
                            objEntityQtnDetails.ProductId = 0;
                        }
                        objEntityQtnDetails.UOMName = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();
                        objEntityQtnDetails.UOMId = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["UOM_ID"].ToString());
                        objEntityQtnDetails.Quantity = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString());
                        objEntityQtnDetails.CostPrice = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString());
                        objEntityQtnDetails.Hike = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                        objEntityQtnDetails.Rate = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString());

                        if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                        {

                            objEntityQtnDetails.TaxId = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString());
                            objEntityQtnDetails.TaxPecentage = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString());
                            objEntityQtnDetails.TaxAmnt = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString());
                        }
                        else
                        {

                            objEntityQtnDetails.TaxId = 0;
                            objEntityQtnDetails.TaxPecentage = 0;
                            objEntityQtnDetails.TaxAmnt = 0;

                        }
                        objEntityQtnDetails.ItemDiscntAmnt = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString());
                        objEntityQtnDetails.Amount = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString());

                        objEntityQtnDetails.ItemDescription = dtQtnDtl.Rows[intcnt]["LDQTDTBCK_DESCR"].ToString();

                        if (dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != "" && dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != null)
                            objEntityQtnDetails.StockSts = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString());
                        else
                            objEntityQtnDetails.StockSts = 0;

                        objEntityQtnDetails.Print = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                        objEntityQtnDetails.ProductMode = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRDT_MODE"].ToString());
                        objEntityQtnDetails.ProductName = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();

                        objEntityQtnDetails.PrdctGroupName = dtQtnDtl.Rows[intcnt]["QTNDTLGRPBCK_NAME"].ToString().ToUpper();
                        objEntityQtnDetails.ProductCategory = dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString().ToUpper();

                        objEntityQtnDeatilsList.Add(objEntityQtnDetails);
                    }
                }

                //End-For read table details

                //Start:-For read attachment details
                List<clsEntityLayerQuotationAttchmntDtl> objEntityQtnAttchmntDeatilsList = new List<clsEntityLayerQuotationAttchmntDtl>();
                if (dtQtnAttchmnt.Rows.Count > 0)
                {
                    for (int intcnt = 0; intcnt < dtQtnAttchmnt.Rows.Count; intcnt++)
                    {
                        clsEntityLayerQuotationAttchmntDtl objEntityQtnDetailsAttchmnt = new clsEntityLayerQuotationAttchmntDtl();
                        objEntityQtnDetailsAttchmnt.FileName = dtQtnAttchmnt.Rows[intcnt]["QTFLSBK_FILENAME"].ToString();
                        objEntityQtnDetailsAttchmnt.ActualFileName = dtQtnAttchmnt.Rows[intcnt]["QTFLSBK_FLNM_ACT"].ToString();
                        objEntityQtnDetailsAttchmnt.QtnAttchmntSlNumber = Convert.ToInt32(dtQtnAttchmnt.Rows[intcnt]["QTFLSBK_SLNUM"].ToString());
                        objEntityQtnAttchmntDeatilsList.Add(objEntityQtnDetailsAttchmnt);

                    }
                }

                //Stop:-For read attachment details

                clsEntityCommon objEntityCommon = new clsEntityCommon();
                objEntityCommon.SectionId = Convert.ToInt32(clsCommonLibrary.Section.QUOTATION);
                objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
                string strNextNum = objBusinessLayer.ReadNextNumberWebForUI(objEntityCommon);
                objEntityQuotation.QuotationId = Convert.ToInt32(strNextNum);

                string strSectnAndCorId = objEntityCommon.SectionId.ToString() + objEntityCommon.CorporateID.ToString();
                int intSectnAndCorIdLength = strSectnAndCorId.Length;
                string strRefSerialId = strNextNum.Substring(intSectnAndCorIdLength);
                objEntityQuotation.QtnRefSerialId = Convert.ToInt32(strRefSerialId);

                objEntityQuotation.QuotationRefNumbr = lblRefNumbr.Text;
                
                objBusinessLayerQuotation.InsertQuotationFrmBckup(objEntityQuotation,objEntityQtnGrpDtlsList, objEntityQtnDeatilsList, objEntityQtnAttchmntDeatilsList);

                string strRandomLeadId = "";
                if (Request.QueryString["LeadId"] != null)
                {
                    strRandomLeadId = Request.QueryString["LeadId"].ToString();

                }
                string strPrevUrl = "";
                if (Request.QueryString["Prev"] != null)
                {
                    strPrevUrl = Request.QueryString["Prev"].ToString();
                }

                if (Request.QueryString["L_MODE"] != null)
                {
                    string strL_MODE = Request.QueryString["L_MODE"].ToString();
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=SaveFnl&Prev=" + strPrevUrl + "&L_MODE=" + strL_MODE + "");
                }
                else
                {
                    Response.Redirect("Cmpzt_Quotation.aspx?LeadId=" + strRandomLeadId + "&InsUpd=SaveFnl&Prev=" + strPrevUrl + "");
                }
            }
            else
            {

                Response.Redirect("~/Default.aspx");

            }
        }
        catch(Exception EX)
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "ErrorMsg", "ErrorMsg();", true);
        }

    }
    private void ViewRvsdQtn(int intQtnId, int intEditOrView)
    {//when Editing or viewing
        //intEditOrView if 1-Edit,2-View
        clsCommonLibrary objCommon = new clsCommonLibrary();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        objEntityQuotation.QuotationId = intQtnId;
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }

        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }
        DataTable dtQtnDtl = new DataTable();
        DataTable dtQtn = new DataTable();
        DataTable dtQtnAttchmnt = new DataTable();
        DataTable dtQtnDtlGroup = new DataTable();
        DataTable dtQtnCatDtl = new DataTable();

        objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(clsCommonLibrary.QUOTATION_TEMPLATE.Standard);
        dtQtnDtlGroup = objBusinessLayerQuotation.ReadQuotationGrpDetailBckupByQtnId(objEntityQuotation);
        dtQtnCatDtl = objBusinessLayerQuotation.ReadQuotationCatDetailBckupByQtnId(objEntityQuotation);
        dtQtnDtl = objBusinessLayerQuotation.ReadQuotationDetailBckup(objEntityQuotation);
        dtQtn = objBusinessLayerQuotation.ReadQuotationBckup(objEntityQuotation);
        dtQtnAttchmnt = objBusinessLayerQuotation.ReadQuotationAttchmntBckup(objEntityQuotation);

        if (dtQtn.Rows.Count > 0)
        {

            //Currency selection
            ddlCurrency.ClearSelection();
            if (ddlCurrency.Items.FindByValue(dtQtn.Rows[0]["CRNCMST_ID"].ToString()) != null)
            {
                ddlCurrency.Items.FindByValue(dtQtn.Rows[0]["CRNCMST_ID"].ToString()).Selected = true;
            }
            else
            {
                ListItem lstSt = new ListItem(dtQtn.Rows[0]["CRNCMST_NAME"].ToString(), dtQtn.Rows[0]["CRNCMST_ID"].ToString());
                ddlCurrency.Items.Insert(1, lstSt);

                SortDDL(ref this.ddlCurrency);
                ddlCurrency.Items.FindByValue(dtQtn.Rows[0]["CRNCMST_ID"].ToString()).Selected = true;
            }
            txtPriceTerm.Text = dtQtn.Rows[0]["LDQUOT_PRICE_TERMS"].ToString();
            txtPymntTerm.Text = dtQtn.Rows[0]["LDQTBKP_PMNT_TERMS"].ToString();
            txtDlvryTerm.Text = dtQtn.Rows[0]["LDQTBKP_DLVRY_TERMS"].ToString();
            txtWrntyTerm.Text = dtQtn.Rows[0]["LDQTBKP_WRNTY_TERMS"].ToString();
            txtValidityTerm.Text = dtQtn.Rows[0]["LDQTBKP_VALIDITY"].ToString();
            txtManufacturerTerm.Text = dtQtn.Rows[0]["LDQUOTBKP_MANFCTR_TERMS"].ToString();
            txtComments.Text = dtQtn.Rows[0]["LDQTBKP_COMMENTS"].ToString();
            hiddenQuotationDate.Value = dtQtn.Rows[0]["LDQUOT_DATE"].ToString();
            int intDiscMode = Convert.ToInt32(dtQtn.Rows[0]["LDQTBKP_BILL_DISC_MODE"].ToString());
            divRef.Visible = true;
            lblRefNumbr.Text = dtQtn.Rows[0]["LDQUOTBKP_REF_NUMBER"].ToString();


            int intSndMail = Convert.ToInt32(dtQtn.Rows[0]["LDQTBKP_MAIL_STS"].ToString());
            if (cbxSendMail.Enabled == true)
            {
                if (intSndMail == 0)
                {
                    cbxSendMail.Checked = false;
                }
                else
                {

                    cbxSendMail.Checked = true;

                }
            }
            else
            {
                cbxSendMail.Checked = false;
            }

            DataTable dtDetailCat = new DataTable();
            dtDetailCat.Columns.Add("CATNAME", typeof(string));
            dtDetailCat.Columns.Add("GRPID", typeof(string));
            dtDetailCat.Columns.Add("QTNDTLID", typeof(string));
            if (dtQtnCatDtl.Rows.Count > 0)
            {
                foreach (DataRow dtCat in dtQtnCatDtl.Rows)
                {
                    DataRow drDtlCat = dtDetailCat.NewRow();
                    drDtlCat["CATNAME"] = dtCat["CATGRY_NAME"].ToString();
                    if (dtCat["QTNDTLGRPBCK_ID"].ToString() != "")
                    {
                        drDtlCat["GRPID"] = Convert.ToInt32(dtCat["QTNDTLGRPBCK_ID"].ToString());
                    }
                    else
                    {
                        drDtlCat["GRPID"] = 0;
                    }

                    dtDetailCat.Rows.Add(drDtlCat);
                }
            }
            string strJsonCat = DataTableToJSONWithJavaScriptSerializer(dtDetailCat);
            hiddenEditCatDataCopied.Value = strJsonCat;

            DataTable dtDetailGroup = new DataTable();
            dtDetailGroup.Columns.Add("BRID", typeof(string));
            dtDetailGroup.Columns.Add("BRNAME", typeof(string));
            dtDetailGroup.Columns.Add("BRGRSAMNT", typeof(string));
            dtDetailGroup.Columns.Add("DISCMOD", typeof(string));
            dtDetailGroup.Columns.Add("DISCVAL", typeof(string));
            dtDetailGroup.Columns.Add("DISCAMNT", typeof(string));
            dtDetailGroup.Columns.Add("NETAMNT", typeof(string));
            if (dtQtnDtlGroup.Rows.Count > 0)
            {
                foreach (DataRow dtBr in dtQtnDtlGroup.Rows)
                {
                    DataRow drDtlBr = dtDetailGroup.NewRow();
                    drDtlBr["BRID"] = Convert.ToInt32(dtBr["QTNDTLGRPBCK_ID"].ToString());
                    drDtlBr["BRNAME"] = dtBr["QTNDTLGRPBCK_NAME"].ToString();
                    drDtlBr["BRGRSAMNT"] = Convert.ToDecimal(dtBr["QTNDTLGRPBCK_GROSS_AMT"].ToString());
                    drDtlBr["DISCMOD"] = Convert.ToInt32(dtBr["QTNDTLGRPBCK_BILL_DISC_MODE"].ToString());
                    drDtlBr["DISCVAL"] = Convert.ToDecimal(dtBr["QTNDTLGRPBCK_BILL_DISC_VALUE"].ToString());
                    drDtlBr["DISCAMNT"] = Convert.ToDecimal(dtBr["QTNDTLGRPBCK_BILL_DISC_TOT_AMT"].ToString());
                    drDtlBr["NETAMNT"] = Convert.ToDecimal(dtBr["QTNDTLGRPBCK_NET_AMT"].ToString());
                    dtDetailGroup.Rows.Add(drDtlBr);
                }
            }
            else
            {
                DataRow drDtlBr = dtDetailGroup.NewRow();
                drDtlBr["BRID"] = 0;
                drDtlBr["BRNAME"] = 0;
                drDtlBr["BRGRSAMNT"] = Convert.ToDecimal(dtQtn.Rows[0]["LDQUOT_GROSS_AMT"].ToString());
                drDtlBr["DISCMOD"] = Convert.ToInt32(dtQtn.Rows[0]["LDQTBKP_BILL_DISC_MODE"].ToString());
                drDtlBr["DISCVAL"] = Convert.ToDecimal(dtQtn.Rows[0]["LDQUOT_BILL_DISC_VALUE"].ToString());
                drDtlBr["DISCAMNT"] = 0;
                drDtlBr["NETAMNT"] = Convert.ToDecimal(dtQtn.Rows[0]["LDQUOT_NET_AMT"].ToString());
                dtDetailGroup.Rows.Add(drDtlBr);
            }

            string strJsonGrp = DataTableToJSONWithJavaScriptSerializer(dtDetailGroup);
            hiddenEditdetailgroupDataCopied.Value = strJsonGrp;

            DataTable dtDetail = new DataTable();
            dtDetail.Columns.Add("TransId", typeof(int));
            dtDetail.Columns.Add("TransDtlId", typeof(int));
            dtDetail.Columns.Add("ProductName", typeof(string));
            dtDetail.Columns.Add("ProductId", typeof(int));
            dtDetail.Columns.Add("UnitName", typeof(string));
            dtDetail.Columns.Add("UnitId", typeof(int));
            dtDetail.Columns.Add("Quantity", typeof(decimal));
            dtDetail.Columns.Add("CostPrice", typeof(decimal));
            dtDetail.Columns.Add("Hike", typeof(string));
            dtDetail.Columns.Add("Rate", typeof(decimal));
            dtDetail.Columns.Add("TaxName", typeof(string));
            dtDetail.Columns.Add("TaxId", typeof(int));
            dtDetail.Columns.Add("TaxPer", typeof(decimal));
            dtDetail.Columns.Add("TaxAmnt", typeof(decimal));
            dtDetail.Columns.Add("DiscountAmnt", typeof(decimal));
            dtDetail.Columns.Add("Amount", typeof(decimal));
            dtDetail.Columns.Add("AddDesc", typeof(string));
            dtDetail.Columns.Add("StockStatus", typeof(int));
            dtDetail.Columns.Add("StockName", typeof(string));
            dtDetail.Columns.Add("ProductMode", typeof(int));
            dtDetail.Columns.Add("txtProductName", typeof(string));
            dtDetail.Columns.Add("PrintSts", typeof(int));
            dtDetail.Columns.Add("ProductCat", typeof(string));
            dtDetail.Columns.Add("ProductWinSts", typeof(string));
            dtDetail.Columns.Add("ProductGroupId", typeof(string));

            DataTable dtAttchmnt = new DataTable();
            dtAttchmnt.Columns.Add("TransDtlId", typeof(int));
            dtAttchmnt.Columns.Add("FileName", typeof(string));
            dtAttchmnt.Columns.Add("ActualFileName", typeof(string));
            dtAttchmnt.Columns.Add("SendSts", typeof(int));



            if (dtQtnDtl.Rows.Count > 0)
            {
                for (int intcnt = 0; intcnt < dtQtnDtl.Rows.Count; intcnt++)
                {
                    DataRow drDtl = dtDetail.NewRow();
                    drDtl["TransId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQTBKP_ID"].ToString());
                    if (dtQtnDtl.Rows[intcnt]["LDQTDTBCK_ID"].ToString() != "")
                    {
                        drDtl["TransDtlId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LDQTDTBCK_ID"].ToString());
                    }
                    else
                    {
                        drDtl["TransDtlId"] = 0;
                    }

                    drDtl["ProductName"] = dtQtnDtl.Rows[intcnt]["PRDT CODE_AND_NAME"].ToString();
                    if (dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString() != "")
                    {
                        drDtl["ProductId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["PRDT_ID"].ToString());

                    }
                    else
                    {
                        // WHEN CHANGING MODE IT BECOMES NULL
                        drDtl["ProductId"] = 0;
                    }
                    drDtl["ProductName"] = dtQtnDtl.Rows[intcnt]["PRDT_NAME"].ToString();
                    drDtl["UnitName"] = dtQtnDtl.Rows[intcnt]["UOM_NAME"].ToString();
                    drDtl["UnitId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["UOM_ID"].ToString());
                    drDtl["Quantity"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_QTY"].ToString());
                    drDtl["CostPrice"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRICE"].ToString());
                    drDtl["Hike"] = dtQtnDtl.Rows[intcnt]["QUOTNDTL_HIKE"].ToString();
                    drDtl["Rate"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_RATE"].ToString());

                    if (dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString() != "")
                    {
                        drDtl["TaxName"] = dtQtnDtl.Rows[intcnt]["TAX_NAME"].ToString();
                        drDtl["TaxId"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["TAX_ID"].ToString());
                        drDtl["TaxPer"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_PERC"].ToString());
                        drDtl["TaxAmnt"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_TAX_AMNT"].ToString());
                    }
                    else
                    {
                        drDtl["TaxName"] = "";
                        drDtl["TaxId"] = 0;
                        drDtl["TaxPer"] = 0;
                        drDtl["TaxAmnt"] = 0;
                    }
                    drDtl["DiscountAmnt"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_DISC_AMNT"].ToString());
                    drDtl["Amount"] = Convert.ToDecimal(dtQtnDtl.Rows[intcnt]["QUOTNDTL_AMOUNT"].ToString());

                    drDtl["AddDesc"] = dtQtnDtl.Rows[intcnt]["LDQTDTBCK_DESCR"].ToString();

                    if (dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != "" && dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString() != null)
                        drDtl["StockStatus"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_AVLSTS_ID"].ToString());
                    else
                        drDtl["StockStatus"] = 0;
                    drDtl["StockName"] = dtQtnDtl.Rows[intcnt]["LD_AVLSTS_NAME"].ToString();
                    drDtl["PrintSts"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["LD_PRINTSTS"].ToString());
                    drDtl["ProductMode"] = Convert.ToInt32(dtQtnDtl.Rows[intcnt]["QUOTNDTL_PRDT_MODE"].ToString());
                    drDtl["txtProductName"] = dtQtnDtl.Rows[intcnt]["PRDT NAME"].ToString();
                    if (dtQtnDtl.Rows[intcnt]["QTNDTLGRPBCK_ID"].ToString() != "")
                        drDtl["ProductGroupId"] = dtQtnDtl.Rows[intcnt]["QTNDTLGRPBCK_ID"].ToString();
                    else
                        drDtl["ProductGroupId"] = 0;
                    drDtl["ProductCat"] = dtQtnDtl.Rows[intcnt]["CATGRY_NAME"].ToString();

                    dtDetail.Rows.Add(drDtl);

                }

                string strJson = DataTableToJSONWithJavaScriptSerializer(dtDetail);
                if (intEditOrView == 1)
                {
                    hiddenEdit.Value = strJson;
                }
                else if (intEditOrView == 2)
                {
                    hiddenEdit.Value = "";
                    hiddenView.Value = strJson;
                }
            }
            hiddenFilePath.Value = objCommon.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);
            if (dtQtnAttchmnt.Rows.Count > 0)
            {
                for (int intcnt = 0; intcnt < dtQtnAttchmnt.Rows.Count; intcnt++)
                {
                    DataRow drAttch = dtAttchmnt.NewRow();
                    drAttch["TransDtlId"] = dtQtnAttchmnt.Rows[intcnt]["QTFLSBK_ID"].ToString();
                    drAttch["FileName"] = dtQtnAttchmnt.Rows[intcnt]["QTFLSBK_FILENAME"].ToString();
                    drAttch["ActualFileName"] = dtQtnAttchmnt.Rows[intcnt]["QTFLSBK_FLNM_ACT"].ToString();
                    drAttch["SendSts"] = dtQtnAttchmnt.Rows[intcnt]["QTFLSBK_ATCH_MAIL_STS"].ToString();
                    dtAttchmnt.Rows.Add(drAttch);
                    hiddenAttchmntSlNumber.Value = dtQtnAttchmnt.Rows[intcnt]["QTFLSBK_SLNUM"].ToString();
                }

                string strJson = DataTableToJSONWithJavaScriptSerializer(dtAttchmnt);
                hiddenEditAttchmnt.Value = strJson;
            }


        }
    }
    //Currency Selection

    public void currencyLoad()
    {
        ddlCurrency.Items.Clear();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (hiddenCorporateId.Value == "")
        {
            if (Session["CORPOFFICEID"] != null)
            {
                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
            }
            else if (Session["CORPOFFICEID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {

            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
        }
        if (hiddenOrganisationId.Value == "")
        {
            if (Session["ORGID"] != null)
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
            }
            else if (Session["ORGID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
        }
        else
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
        }

        DataTable dtTerms = objBusinessLayerQuotation.ReadCurrencyLoad(objEntityQuotation);

        ddlCurrency.DataSource = dtTerms;
        ddlCurrency.DataTextField = "CRNCMST_NAME";
        ddlCurrency.DataValueField = "CRNCMST_ID";
        ddlCurrency.DataBind();
        if (hiddenDfltCurrencyMstrId.Value != "")
        {
            ddlCurrency.Items.FindByValue(hiddenDfltCurrencyMstrId.Value).Selected = true;
        }

        clsEntityCommon ObjEntityCommon = new clsEntityCommon();
        clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
        clsCommonLibrary objCommon = new clsCommonLibrary();

        string strImagePath = objCommon.GetImagePath(clsCommonLibrary.IMAGE_SECTION.COUNTRY_ICON_IMAGES);

        if (ddlCurrency != null)
        {
            foreach (System.Web.UI.WebControls.ListItem li in ddlCurrency.Items)
            {
                if (li.Text != "--SELECT CURRENCY--")
                {
                    ObjEntityCommon.CurrencyId = Convert.ToInt32(li.Value);
                    DataTable dtCurrencyDtls = objBusinessLayer.ReadCurrencyDetails(ObjEntityCommon);

                    li.Attributes["data-imagecss"] = "flag ad";
                    li.Attributes["title"] = li.Text;
                    if (dtCurrencyDtls.Rows[0]["CNTRY_FLAG_ICON_NAME"].ToString() != "")
                    {
                        li.Attributes["data-image"] = strImagePath + dtCurrencyDtls.Rows[0]["CNTRY_FLAG_ICON_NAME"].ToString();
                    }
                }
            }
        }

    }


    //Currency Selection
    //for sorting drop down
    private void SortDDL(ref DropDownList objDDL)
    {
        ArrayList textList = new ArrayList();
        ArrayList valueList = new ArrayList();


        foreach (ListItem li in objDDL.Items)
        {
            textList.Add(li.Text);
        }

        textList.Sort();


        foreach (object item in textList)
        {
            string value = objDDL.Items.FindByText(item.ToString()).Value;
            valueList.Add(value);
        }
        objDDL.Items.Clear();

        for (int i = 0; i < textList.Count; i++)
        {
            ListItem objItem = new ListItem(textList[i].ToString(), valueList[i].ToString());
            objDDL.Items.Add(objItem);
        }
    }
    //Stop:-EMP-0009
    //start:-EMP-0015 9   
    public void Loadcustomer()
    {
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        if (Session["CORPOFFICEID"] != null)
        {
            objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"].ToString());
            //  intCorpId = Convert.ToInt32(Session["CORPOFFICEID"].ToString());
            //hiddenCorporateId.Value = Session["CORPOFFICEID"].ToString();

        }
        else if (Session["CORPOFFICEID"] == null)
        {
            Response.Redirect("~/Default.aspx");
        }
        if (Session["ORGID"] != null)
        {
            objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());

        }
        else if (Session["ORGID"] == null)
        {
            Response.Redirect("~/Default.aspx");
        }
        DataTable dtSelect = objBusinessLayerQuotation.ReadCutomerList(objEntityQuotation);
        if (dtSelect.Rows.Count > 0)
        {
            ddlcustomername.Items.Clear();
            ddlcustomername.DataSource = dtSelect;


            ddlcustomername.DataValueField = "CSTMR_ID";
            ddlcustomername.DataTextField = "CSTMR_NAME";

            ddlcustomername.DataBind();

        }
        ddlcustomername.Items.Insert(0, "--SELECT CUSTOMER--");

    }
    //start:-EMP-0015 9   

    [WebMethod]
    public static string LoadQutationListBysearch(string corpid, string orgid, string customerId, string templttype, string userId)
    {

        //when Editing or viewing
        //intEditOrView if 1-Edit,2-View
        clsCommonLibrary objCommon = new clsCommonLibrary();
        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        objEntityQuotation.CustomerId = Convert.ToInt32(customerId);

        objEntityQuotation.CorpOffice_Id = Convert.ToInt32(corpid);

        objEntityQuotation.Organisation_Id = Convert.ToInt32(orgid);
        objEntityQuotation.User_Id = Convert.ToInt32(userId);

        DataTable dtQtnDtl = new DataTable();
        DataTable dtQtn = new DataTable();
        DataTable dtQtnAttchmnt = new DataTable();
        objEntityQuotation.QuotationTemplateTypeId = Convert.ToInt32(templttype);
        dtQtnDtl = objBusinessLayerQuotation.ReadQuotationByTemplateIdBysearch(objEntityQuotation);
        quatationdetails objquatationdetails = new quatationdetails();
        string strhtm = objquatationdetails.ConvertDataTableToHTMLQuatationList(dtQtnDtl);
        return strhtm;
    }

    protected void BackUpEmailOnApprove(int intBackupID)
    {

        clsBusinessLayerQuotation objBusinessLayerQuotation = new clsBusinessLayerQuotation();
        clsEntityLayerQuotation objEntityQuotation = new clsEntityLayerQuotation();
        objEntityQuotation.BckupId = intBackupID;
        if (Request.QueryString["LeadId"] != null && (hiddenQuotationId.Value != "") && hiddenDivisionCode.Value != "" && hiddenUserCode.Value != "" && hiddenMonthMM.Value != "" && hiddenYearYYYY.Value != "" && hiddenDfltQuotationFormatId.Value != "")
        {
            objEntityQuotation.QuotationId = Convert.ToInt32(hiddenQuotationId.Value);


            objEntityQuotation.QuotationRefNumbr = RefNumGeneralFormat(Convert.ToInt32(hiddenQtnRefSerialId.Value));

            int intUserId = 0;
            if (hiddenCorporateId.Value == "")
            {
                if (Session["CORPOFFICEID"] != null)
                {
                    objEntityQuotation.CorpOffice_Id = Convert.ToInt32(Session["CORPOFFICEID"]);
                }
                else if (Session["CORPOFFICEID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {

                objEntityQuotation.CorpOffice_Id = Convert.ToInt32(hiddenCorporateId.Value);
            }
            if (hiddenOrganisationId.Value == "")
            {
                if (Session["ORGID"] != null)
                {
                    objEntityQuotation.Organisation_Id = Convert.ToInt32(Session["ORGID"].ToString());
                }
                else if (Session["ORGID"] == null)
                {
                    Response.Redirect("~/Default.aspx");
                }
            }
            else
            {
                objEntityQuotation.Organisation_Id = Convert.ToInt32(hiddenOrganisationId.Value);
            }
            if (Session["USERID"] != null)
            {
                intUserId = Convert.ToInt32(Session["USERID"]);

            }
            else if (Session["USERID"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }
            objEntityQuotation.User_Id = intUserId;
            objEntityQuotation.D_Date = System.DateTime.Now;
            string strRandomMixedId = Request.QueryString["LeadId"].ToString();
            string strLenghtofId = strRandomMixedId.Substring(0, 2);
            int intLenghtofId = Convert.ToInt16(strLenghtofId);
            string strId = strRandomMixedId.Substring(2, intLenghtofId);
            objEntityQuotation.Lead_Id = Convert.ToInt32(strId);
            clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
            objEntityLeadCreation.LeadId = objEntityQuotation.Lead_Id;
            clsBusinessLayer objBusinessLayer = new clsBusinessLayer();
            DataTable dtLeadStatus = objBusinessLayer.ReadLeadStatus(objEntityLeadCreation);

            int intLeadStatus = 0;
            if (dtLeadStatus.Rows.Count > 0)
            {
                intLeadStatus = Convert.ToInt32(dtLeadStatus.Rows[0]["LDSTS_ID"]);
            }
            if (intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Approved) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Success) && intLeadStatus != Convert.ToInt32(clsCommonLibrary.LeadStatus.Quotation_Delivered))
            {
                Response.Redirect("~/Default.aspx");
            }


            clsBusinessLayerLeadIndividual objBusinessLayerIndividual = new clsBusinessLayerLeadIndividual();
            clsEntityLeadCreation objEntityLead = new clsEntityLeadCreation();


            objEntityLead.LeadId = objEntityQuotation.Lead_Id;



            objEntityLead.User_Id = intUserId;
            objEntityQuotation.Lead_Id = Convert.ToInt32(HiddenLeadId.Value);
            DataTable dtFromMail = objBusinessLayerIndividual.ReadFromMailAddress(objEntityLead);
            DataTable dtToMail = objBusinessLayerIndividual.ReadToMailAddress(objEntityLead);

            DataTable dtAdtnlMail = objBusinessLayerQuotation.Read_Adtnl_Mail(objEntityQuotation);
            clsEntityMailConsole objEntityMail = new clsEntityMailConsole();
            objEntityMail.Email_Subject = "Enquiry - ";
            objEntityMail.Email_Subject = objEntityMail.Email_Subject + dtToMail.Rows[0]["LEADS_REF_NUMBER"].ToString() + " ( QUOTATION )";

            int intQid = Convert.ToInt32(hiddenQuotationId.Value);
            objEntityLead.Quotation_Id = intQid;
            objEntityLead.QtnFile_Type = 1;
            DataTable dtQtnAtchmntDtl = new DataTable();
            dtQtnAtchmntDtl = objBusinessLayerIndividual.ReadQuotationAttchmnt(objEntityLead);

            clsEntityCommon objEntityCommon = new clsEntityCommon();
            objEntityCommon.CorporateID = objEntityQuotation.CorpOffice_Id;
            objEntityCommon.Organisation_Id = objEntityQuotation.Organisation_Id;
            objEntityCommon.CorpMailTmpltTypId = Convert.ToInt32(CL_Compzit.clsCommonLibrary.CORP_TMPLT_TYP.Quotation);

            DataTable dtMailContent = objBusinessLayerQuotation.ReadCorpMailContent(objEntityCommon);

            string StrMailContent = "Dear " + lblCustomerName.Text + " ," + Environment.NewLine + Environment.NewLine;

            if (lblTitle.Text == "")
            {
                StrMailContent = StrMailContent + "Please find attached Quotation " + Environment.NewLine + Environment.NewLine;
            }
            else
            {
                StrMailContent = StrMailContent + "Please find attached Quotation for " + lblTitle.Text + Environment.NewLine + Environment.NewLine;
            }
            StrMailContent = StrMailContent + "Quotation Reference Number: " + lblRefNumbr.Text + Environment.NewLine + Environment.NewLine;
            if (dtMailContent.Rows.Count > 0)
            {

                objEntityMail.Email_Content = StrMailContent + dtMailContent.Rows[0]["CMTMPLT_MESSAGE"].ToString() + Environment.NewLine;

            }
            else
            {
                objEntityMail.Email_Content = StrMailContent + "" + Environment.NewLine;
            }
        

            objEntityMail.Lead_Id = objEntityQuotation.Lead_Id;
            objEntityMail.D_Date = System.DateTime.Now;


            List<clsEntityMailAttachment> objEntityMailAttachList = new List<clsEntityMailAttachment>();


            int intDfltQtnPdfFrmnt = Convert.ToInt32(hiddenDfltQuotationFormatId.Value);
            if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Standard_Format))
            {
                PdfGeneration();
            }
            else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format))
            {
                PdfAdvancedGeneration();
            }
            else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advanced_Format_Corpoate))
            {
                PdfCorporateAdvancedGeneration();
            }
            else if (intDfltQtnPdfFrmnt == Convert.ToInt32(clsCommonLibrary.CORP_QTN_FORMAT.Advncd_Frmt_Corp_Terms_To_Last))
            {
                PdfTermsToLastCorporateAdvancedGeneration();
            }
            clsCommonLibrary objComm = new clsCommonLibrary();
            string strFilePath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_PDF);
            string strBackupPath = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_MAIL_ATTCH_BKP);
            string strFileName = "Enquiry-" + intBackupID + "_Quotation.pdf";
            string strRealName = "Enquiry-" + objEntityQuotation.Lead_Id + "_Quotation.pdf";

            string strFileLocation = strFilePath + strRealName;
            string strFileBackupLocation = strBackupPath + strFileName;
            if (File.Exists(Server.MapPath(strFileLocation)))
            {
                clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();
                objEntityAttach.Email_Real_Name = strRealName;
                objEntityAttach.Email_File_Name = strFileName;
                objEntityAttach.Attch_Path = Server.MapPath(strFileLocation);
                objEntityMailAttachList.Add(objEntityAttach);
            }

            int Count=0;
            if (dtQtnAtchmntDtl.Rows.Count > 0)
            {
                for (int intRowBodyCount = 0; intRowBodyCount < dtQtnAtchmntDtl.Rows.Count; intRowBodyCount++)
                {Count++;
                    string strFilePathAddtn = objComm.GetImagePath(CL_Compzit.clsCommonLibrary.IMAGE_SECTION.QUOTATION_ATTACHMENT);

                    string strFileNameReal = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FILENAME"].ToString();
                    string strFileExt = strFileNameReal.Substring(strFileNameReal.LastIndexOf('.') + 1).ToLower();

                    string strFileNameBck = "Addtn-" + Count + "-" + +intBackupID + "." + strFileExt;
                    string strActualFileName = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_FLNM_ACT"].ToString();
                    string MailSndSts = dtQtnAtchmntDtl.Rows[intRowBodyCount]["QTFLS_ATCH_MAIL_STS"].ToString();
                    string strFileLocationAddtnl = strFilePathAddtn + strFileNameReal;
                    string strFileLocationAddtnlbck = strBackupPath + strFileNameBck;
                    if (MailSndSts.ToString() == "1")
                    {
                        if (File.Exists(Server.MapPath(strFileLocationAddtnl)))
                        {
                            clsEntityMailAttachment objEntityAttach = new clsEntityMailAttachment();
                            objEntityAttach.Email_Real_Name = strActualFileName;
                            objEntityAttach.Email_File_Name = strFileNameBck;
                            objEntityAttach.Attch_Path = Server.MapPath(strFileLocationAddtnl);
                            objEntityMailAttachList.Add(objEntityAttach);
                            File.Copy(Server.MapPath(strFileLocationAddtnl), Server.MapPath(strFileLocationAddtnlbck), true);
                        }
                    }
                   
                }
            }

            clsEntityLayerQuotation objEntityQuotationAddtnMail = new clsEntityLayerQuotation();

            if (dtAdtnlMail.Rows.Count > 0)
            {
                string strToFullId = dtAdtnlMail.Rows[0]["TO_MAIL"].ToString();
                objEntityQuotationAddtnMail.ToMail = strToFullId;

                string strCcFullId = dtAdtnlMail.Rows[0]["CC_MAIL"].ToString();
                objEntityQuotationAddtnMail.CcMail = strCcFullId;
                string strBCcFullId = dtAdtnlMail.Rows[0]["BCC_MAIL"].ToString();
                objEntityQuotationAddtnMail.BCcMail = strBCcFullId;
            }
            else
            {

                string strToFullId = dtToMail.Rows[0]["LEADS_EMAIL"].ToString();
                objEntityQuotationAddtnMail.ToMail = strToFullId;
                string strCcFullId = "";
                foreach (DataRow row in dtToMail.Rows)
                {
                    if (row["LDCNT_MAIL_ALWD"].ToString() == "1")
                    {
                        clsEntityMailCcBCc objEntityMailCcBCc = new clsEntityMailCcBCc();
                        strCcFullId =strCcFullId+","+ row["LDCNT_EMAIL"].ToString();
                       
                    }

                }

                if (strCcFullId != "")
                {
                    objEntityQuotationAddtnMail.CcMail = strCcFullId;
                }
            }
           

            try
            {
                // objMail.SendMail(objEntityMail, objEntityMailAttachList);
                objBusinessLayerQuotation.InsertQuotationMailBackup(objEntityQuotation, objEntityMail, objEntityMailAttachList, objEntityQuotationAddtnMail);

                File.Copy(Server.MapPath(strFileLocation), Server.MapPath(strFileBackupLocation), true);
                objEntityQuotation.MailStatus = 1;
            }
            catch
            {

                objEntityQuotation.MailStatus = 0;
            }

        }
        else
        {

            Response.Redirect("~/Default.aspx");

        }
    }

    [WebMethod]
    public static string QuotanStsLoad(string strLeadId)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
        LeadSts objSts = new LeadSts();
        objEntityLeadCreation.LeadId = Convert.ToInt32(strLeadId);
        DataTable dtProject = objBusinessLeadIndvl.QuotationStsLead(objEntityLeadCreation);
        string projectInLead = "", strSts = "";

        if (dtProject.Rows.Count > 0)
        {
            strSts = objSts.ConvertDataTableToHTML(dtProject);
        }
        return strSts;




    }
    public class LeadSts
    {
        public string strtbConvert = "";
        public string ConvertDataTableToHTML(DataTable dt)
        {
            clsBusinessLayer objBusiness = new clsBusinessLayer();
            clsEntityCommon objEntityCommon = new clsEntityCommon();
            clsCommonLibrary objCommon = new clsCommonLibrary();
            string strRandom = objCommon.Random_Number();
            StringBuilder sb = new StringBuilder();
            string strHtml = "";

            for (int intRowBodyCount = 0; intRowBodyCount < dt.Rows.Count; intRowBodyCount++)
            {
                string strNetAmount = dt.Rows[0][2].ToString();

                strHtml += "<a id=\"ddlQoutSts" + intRowBodyCount + "\" onclick=\"return ChangeQuotSts('" + dt.Rows[intRowBodyCount][0].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "');\" href=\"javascript:;\" title=\"" + dt.Rows[intRowBodyCount][1].ToString() + "\" >";
                strHtml += "<li class=\"\">";
                if (strNetAmount != dt.Rows[intRowBodyCount][0].ToString())
                {
                    strHtml += "<i class=\"opp_ico_img ble opp_acs csz\"><i class=\"\">" + dt.Rows[intRowBodyCount][1].ToString()[0] + "</i> </i> " + dt.Rows[intRowBodyCount][1].ToString() + "";
                }
                else
                {
                    strHtml += "<i class=\"opp_ico_img ble opp_acs csz1\"><i class=\"\">" + dt.Rows[intRowBodyCount][1].ToString()[0] + "</i> </i> " + dt.Rows[intRowBodyCount][1].ToString() + "";
                }
                strHtml += "</li>";
                strHtml += "</a>";

                //if (strNetAmount != dt.Rows[intRowBodyCount][0].ToString())
                //{
                //    strHtml += "<td class=\"tdT\" style=\" width:24%;word-break: break-all; word-wrap:break-word;text-align: left;\" ><span id=\"ddlQoutSts" + intRowBodyCount + "\" onclick=\"return ChangeQuotSts('" + dt.Rows[intRowBodyCount][0].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "');\" style=\"margin-left: 1%;cursor: pointer; font-size: medium; color: green\">" + dt.Rows[intRowBodyCount][1].ToString() + "</span></td>";
                //}
                //else
                //{
                //    strHtml += "<td class=\"tdT\" style=\" width:24%;word-break: break-all; word-wrap:break-word;text-align: left;\" ><span id=\"ddlQoutSts" + intRowBodyCount + "\" onclick=\"return ChangeQuotSts('" + dt.Rows[intRowBodyCount][0].ToString() + "','" + dt.Rows[intRowBodyCount][1].ToString() + "');\" style=\"margin-left: 1%;cursor: pointer; font-size: medium; color: #191b19\">" + dt.Rows[intRowBodyCount][1].ToString() + "</span></td>";
                //}
            }

            sb.Append(strHtml);
            return sb.ToString();
        }
    }
    [WebMethod]
    public static string QuotanStsSave(string strLeadId, string strId, string strName)
    {
        clsBusinessLayerLeadIndividual objBusinessLeadIndvl = new clsBusinessLayerLeadIndividual();
        clsEntityLeadCreation objEntityLeadCreation = new clsEntityLeadCreation();
        LeadSts objSts = new LeadSts();
        objEntityLeadCreation.LeadId = Convert.ToInt32(strLeadId);
        objEntityLeadCreation.Status = Convert.ToInt32(strId);
        objBusinessLeadIndvl.InsertQuotationSts(objEntityLeadCreation);
        string strSts = "";
        return strSts;
    }
}